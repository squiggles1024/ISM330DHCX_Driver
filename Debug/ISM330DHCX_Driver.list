
ISM330DHCX_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000a550  20000084  080080f0  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000a5d4  080080f0  0002a5d4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001624a  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d69  00000000  00000000  00036304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001070  00000000  00000000  00039070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f28  00000000  00000000  0003a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003460c  00000000  00000000  0003b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016b66  00000000  00000000  0006f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013deca  00000000  00000000  0008617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c4044  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004930  00000000  00000000  001c4094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000084 	.word	0x20000084
 8000250:	00000000 	.word	0x00000000
 8000254:	08007e44 	.word	0x08007e44

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000088 	.word	0x20000088
 8000270:	08007e44 	.word	0x08007e44

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ISM330DHCX_Init>:

/********************************************************************************************************
 * Brief: Constructs and intializes an ISM330DHCX Device and links it to its low level drivers
 * Params: Settings: Desired user settings for device, Dev: Device to be initialized, ISM330DHCX_IO_Drv_t low level IO driver
 ********************************************************************************************************/
void ISM330DHCX_Init(ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_Handle_t *Dev, ISM330DHCX_IO_Drv_t LowLevelDrivers){
 8000594:	b082      	sub	sp, #8
 8000596:	b590      	push	{r4, r7, lr}
 8000598:	b087      	sub	sp, #28
 800059a:	af00      	add	r7, sp, #0
 800059c:	f107 0408 	add.w	r4, r7, #8
 80005a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Dev->ISM330DHCX_IO.Init = LowLevelDrivers.Init;
 80005a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	61da      	str	r2, [r3, #28]
	Dev->ISM330DHCX_IO.DeInit = LowLevelDrivers.DeInit;
 80005ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	621a      	str	r2, [r3, #32]
	Dev->ISM330DHCX_IO.WriteReg = LowLevelDrivers.WriteReg;
 80005b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
	Dev->ISM330DHCX_IO.ReadReg = LowLevelDrivers.ReadReg;
 80005ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
	Dev->ISM330DHCX_IO.ioctl = LowLevelDrivers.ioctl;
 80005c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c

	if(Settings.Int1 != 0 || Settings.Int2 != 0){
 80005c6:	7b3b      	ldrb	r3, [r7, #12]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <ISM330DHCX_Init+0x3e>
 80005cc:	7b7b      	ldrb	r3, [r7, #13]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d003      	beq.n	80005da <ISM330DHCX_Init+0x46>
		Dev->ISM330DHCX_IO.ioctl(IRQDisable);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	2001      	movs	r0, #1
 80005d8:	4798      	blx	r3
	}

	Dev->ISM330DHCX_IO.Init();
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4798      	blx	r3

	uint8_t DeviceID = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	75fb      	strb	r3, [r7, #23]
	Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_WHO_AM_I, &DeviceID, 1);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e8:	f107 0117 	add.w	r1, r7, #23
 80005ec:	2201      	movs	r2, #1
 80005ee:	200f      	movs	r0, #15
 80005f0:	4798      	blx	r3
	if(DeviceID != ISM330DHCX_DEVICE_ID){
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	2b6b      	cmp	r3, #107	; 0x6b
 80005f6:	d003      	beq.n	8000600 <ISM330DHCX_Init+0x6c>
		printf("IMU Communication Failed\n"); //DEBUG ONLY
 80005f8:	485f      	ldr	r0, [pc, #380]	; (8000778 <ISM330DHCX_Init+0x1e4>)
 80005fa:	f006 ff95 	bl	8007528 <puts>
		return;
 80005fe:	e0b5      	b.n	800076c <ISM330DHCX_Init+0x1d8>
	}

	uint8_t settings_reg;

	if(Settings.Filter != LPF_Div2){
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d02e      	beq.n	8000664 <ISM330DHCX_Init+0xd0>

		/*Configure the low pass filter*/
		settings_reg = (Settings.Filter - 1) << 5;
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	3b01      	subs	r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	015b      	lsls	r3, r3, #5
 800060e:	b2db      	uxtb	r3, r3
 8000610:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL8_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000616:	f107 0116 	add.w	r1, r7, #22
 800061a:	2201      	movs	r2, #1
 800061c:	2017      	movs	r0, #23
 800061e:	4798      	blx	r3
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <ISM330DHCX_Init+0x9a>
			printf("CTRL8 X Write Failed\n"); //DEBUG ONLY
 8000626:	4855      	ldr	r0, [pc, #340]	; (800077c <ISM330DHCX_Init+0x1e8>)
 8000628:	f006 ff7e 	bl	8007528 <puts>
			return;
 800062c:	e09e      	b.n	800076c <ISM330DHCX_Init+0x1d8>
		}

		/*Configure the ODR and Sensitivity*/
		settings_reg = (Settings.AccelMode << 4) | (Settings.XL_Sense << 2) | (1 << 1);
 800062e:	7a3b      	ldrb	r3, [r7, #8]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7abb      	ldrb	r3, [r7, #10]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	b2db      	uxtb	r3, r3
 8000646:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL1_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	f107 0116 	add.w	r1, r7, #22
 8000650:	2201      	movs	r2, #1
 8000652:	2010      	movs	r0, #16
 8000654:	4798      	blx	r3
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01b      	beq.n	8000694 <ISM330DHCX_Init+0x100>
			printf("CTRL1 X Write Failed\n"); //DEBUG ONLY
 800065c:	4848      	ldr	r0, [pc, #288]	; (8000780 <ISM330DHCX_Init+0x1ec>)
 800065e:	f006 ff63 	bl	8007528 <puts>
			return;
 8000662:	e083      	b.n	800076c <ISM330DHCX_Init+0x1d8>
		}

	} else {

		/*Configure the ODR and Sensitivity*/
		settings_reg = (Settings.AccelMode << 4) | (Settings.XL_Sense << 2);
 8000664:	7a3b      	ldrb	r3, [r7, #8]
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	b25a      	sxtb	r2, r3
 800066a:	7abb      	ldrb	r3, [r7, #10]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	b25b      	sxtb	r3, r3
 8000670:	4313      	orrs	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL1_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067c:	f107 0116 	add.w	r1, r7, #22
 8000680:	2201      	movs	r2, #1
 8000682:	2010      	movs	r0, #16
 8000684:	4798      	blx	r3
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <ISM330DHCX_Init+0x100>
			printf("CTRL1 X Write Failed\n"); //DEBUG ONLY
 800068c:	483c      	ldr	r0, [pc, #240]	; (8000780 <ISM330DHCX_Init+0x1ec>)
 800068e:	f006 ff4b 	bl	8007528 <puts>
			return;
 8000692:	e06b      	b.n	800076c <ISM330DHCX_Init+0x1d8>
		}
	}

	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL1_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	f107 0116 	add.w	r1, r7, #22
 800069c:	2201      	movs	r2, #1
 800069e:	2010      	movs	r0, #16
 80006a0:	4798      	blx	r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <ISM330DHCX_Init+0x11c>
		printf("CTRL1 X Write Failed\n"); //DEBUG ONLY
 80006a8:	4835      	ldr	r0, [pc, #212]	; (8000780 <ISM330DHCX_Init+0x1ec>)
 80006aa:	f006 ff3d 	bl	8007528 <puts>
		return;
 80006ae:	e05d      	b.n	800076c <ISM330DHCX_Init+0x1d8>
	}


	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_INT1_CTRL, &Settings.Int1, 1) != ISM330DHCX_OK){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	f107 0208 	add.w	r2, r7, #8
 80006b8:	1d11      	adds	r1, r2, #4
 80006ba:	2201      	movs	r2, #1
 80006bc:	200d      	movs	r0, #13
 80006be:	4798      	blx	r3
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <ISM330DHCX_Init+0x13a>
		printf("CTRL INT1 Write Failed\n"); //DEBUG ONLY
 80006c6:	482f      	ldr	r0, [pc, #188]	; (8000784 <ISM330DHCX_Init+0x1f0>)
 80006c8:	f006 ff2e 	bl	8007528 <puts>
		return;
 80006cc:	e04e      	b.n	800076c <ISM330DHCX_Init+0x1d8>
	}

	settings_reg = (Settings.GyroMode << 4) | (Settings.G_Sense << 2);
 80006ce:	7a7b      	ldrb	r3, [r7, #9]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	75bb      	strb	r3, [r7, #22]
	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL2_G, &settings_reg, 1) != ISM330DHCX_OK){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e6:	f107 0116 	add.w	r1, r7, #22
 80006ea:	2201      	movs	r2, #1
 80006ec:	2011      	movs	r0, #17
 80006ee:	4798      	blx	r3
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <ISM330DHCX_Init+0x16a>
		printf("CTRL G2 Write Failed\n"); //DEBUG ONLY
 80006f6:	4824      	ldr	r0, [pc, #144]	; (8000788 <ISM330DHCX_Init+0x1f4>)
 80006f8:	f006 ff16 	bl	8007528 <puts>
		return;
 80006fc:	e036      	b.n	800076c <ISM330DHCX_Init+0x1d8>
	}

	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_INT2_CTRL, &Settings.Int2, 1) != ISM330DHCX_OK){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	f107 0208 	add.w	r2, r7, #8
 8000706:	1d51      	adds	r1, r2, #5
 8000708:	2201      	movs	r2, #1
 800070a:	200e      	movs	r0, #14
 800070c:	4798      	blx	r3
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d003      	beq.n	800071c <ISM330DHCX_Init+0x188>
		printf("CTRL INT2 Write Failed\n"); //DEBUG ONLY
 8000714:	481d      	ldr	r0, [pc, #116]	; (800078c <ISM330DHCX_Init+0x1f8>)
 8000716:	f006 ff07 	bl	8007528 <puts>
		return;
 800071a:	e027      	b.n	800076c <ISM330DHCX_Init+0x1d8>
	}

	Dev->G_Sensitivity = Settings.G_Sense;
 800071c:	7afb      	ldrb	r3, [r7, #11]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	edc3 7a05 	vstr	s15, [r3, #20]
	Dev->XL_Sensitivity = Settings.XL_Sense;
 800072c:	7abb      	ldrb	r3, [r7, #10]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	edc3 7a04 	vstr	s15, [r3, #16]
	if(Settings.Int1 == 0 && Settings.Int2 == 0){
 800073c:	7b3b      	ldrb	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d102      	bne.n	8000748 <ISM330DHCX_Init+0x1b4>
 8000742:	7b7b      	ldrb	r3, [r7, #13]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d010      	beq.n	800076a <ISM330DHCX_Init+0x1d6>
		return;
	}

	if(Settings.Int1 != 0 || Settings.Int2 != 0){
 8000748:	7b3b      	ldrb	r3, [r7, #12]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <ISM330DHCX_Init+0x1c0>
 800074e:	7b7b      	ldrb	r3, [r7, #13]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d003      	beq.n	800075c <ISM330DHCX_Init+0x1c8>
		Dev->ISM330DHCX_IO.ioctl(IRQEnable);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000758:	2000      	movs	r0, #0
 800075a:	4798      	blx	r3
	}

	/*Ensure IRQ Line is cleared*/
	ISM330DHCX_ReadAcceleration(Dev);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f817 	bl	8000790 <ISM330DHCX_ReadAcceleration>
	ISM330DHCX_ReadAngularVelocity(Dev);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f825 	bl	80007b2 <ISM330DHCX_ReadAngularVelocity>
 8000768:	e000      	b.n	800076c <ISM330DHCX_Init+0x1d8>
		return;
 800076a:	bf00      	nop
}
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000774:	b002      	add	sp, #8
 8000776:	4770      	bx	lr
 8000778:	08007e5c 	.word	0x08007e5c
 800077c:	08007e78 	.word	0x08007e78
 8000780:	08007e90 	.word	0x08007e90
 8000784:	08007ea8 	.word	0x08007ea8
 8000788:	08007ec0 	.word	0x08007ec0
 800078c:	08007ed8 	.word	0x08007ed8

08000790 <ISM330DHCX_ReadAcceleration>:

/********************************************************************************************************
 * Brief: Reads Acceleration registers on ISM330DHCX and stores them in the device handle variables
 * Params: ISM330DHCX Device Handle
 ********************************************************************************************************/
void ISM330DHCX_ReadAcceleration(ISM330DHCX_Handle_t *Dev){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	int16_t *pData = Dev->Acceleration;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3306      	adds	r3, #6
 800079c:	60fb      	str	r3, [r7, #12]
	Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_OUTX_L_A, (uint8_t*)pData, 6);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a2:	2206      	movs	r2, #6
 80007a4:	68f9      	ldr	r1, [r7, #12]
 80007a6:	2028      	movs	r0, #40	; 0x28
 80007a8:	4798      	blx	r3
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <ISM330DHCX_ReadAngularVelocity>:

/********************************************************************************************************
 * Brief: Reads Gyro registers on ISM330DHCX and stores them in the device handle variables
 * Params: ISM330DHCX Device Handle
 ********************************************************************************************************/
void ISM330DHCX_ReadAngularVelocity(ISM330DHCX_Handle_t *Dev){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	int16_t *pData = Dev->AngularVelocity;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]
	Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_OUTX_L_G, (uint8_t*)pData, 6);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c2:	2206      	movs	r2, #6
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	2022      	movs	r0, #34	; 0x22
 80007c8:	4798      	blx	r3
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <ISM330DHCX_ReadTemperature>:

/********************************************************************************************************
 * Brief: Reads temperature registers on ISM330DHCX and stores them in the device handle variables
 * Params: ISM330DHCX Device Handle
 ********************************************************************************************************/
void ISM330DHCX_ReadTemperature(ISM330DHCX_Handle_t *Dev){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	uint8_t *buff = (uint8_t*) &Dev->Temperature;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	330c      	adds	r3, #12
 80007de:	60fb      	str	r3, [r7, #12]
	Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_OUT_TEMP_L,buff,2);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e4:	2202      	movs	r2, #2
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	2020      	movs	r0, #32
 80007ea:	4798      	blx	r3
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db0b      	blt.n	800081e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 021f 	and.w	r2, r3, #31
 800080c:	4907      	ldr	r1, [pc, #28]	; (800082c <__NVIC_EnableIRQ+0x38>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	2001      	movs	r0, #1
 8000816:	fa00 f202 	lsl.w	r2, r0, r2
 800081a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db12      	blt.n	8000868 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	490a      	ldr	r1, [pc, #40]	; (8000874 <__NVIC_DisableIRQ+0x44>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	3320      	adds	r3, #32
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
}
 8000860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000862:	f3bf 8f6f 	isb	sy
}
 8000866:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <ISM330DHCX_IO_Init>:
static uint8_t ISM330DHCX_IO_IOCtl(ISM330DHCX_IO_Cmd_t Cmd);
static uint8_t ISM330DHCX_IO_ReadIntPin(uint16_t Pin);
static void ISM330DHCX_IO_IRQEnable(void);
static void ISM330DHCX_IO_IRQDisable(void);

static void ISM330DHCX_IO_Init(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	  HAL_Delay(10);      /* Device has a 10ms boot sequence on power up */
 800087c:	200a      	movs	r0, #10
 800087e:	f000 fd9b 	bl	80013b8 <HAL_Delay>
	  MX_GPIO_Init();
 8000882:	f000 f8a7 	bl	80009d4 <MX_GPIO_Init>
	  MX_I2C2_Init();
 8000886:	f000 f90b 	bl	8000aa0 <MX_I2C2_Init>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <ISM330DHCX_IO_DeInit>:

static void ISM330DHCX_IO_DeInit(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	  //HAL_I2C_DeInit(&hi2c2); Do not do this if more than one device shares the I2C bus
	  HAL_GPIO_DeInit(ISM330DHCX_IRQ_GPIO_Port, ISM330DHCX_IRQ_Pin); //De-init the GPIO Pin
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <ISM330DHCX_IO_DeInit+0x14>)
 800089a:	f001 f899 	bl	80019d0 <HAL_GPIO_DeInit>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	42021000 	.word	0x42021000

080008a8 <ISM330DHCX_IO_WriteReg>:

static ISM330DHCX_Status_t ISM330DHCX_IO_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, HAL_MAX_DELAY) != HAL_OK){
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	9102      	str	r1, [sp, #8]
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	21d6      	movs	r1, #214	; 0xd6
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <ISM330DHCX_IO_WriteReg+0x44>)
 80008d2:	f001 fa33 	bl	8001d3c <HAL_I2C_Mem_Write>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <ISM330DHCX_IO_WriteReg+0x38>
		return ISM330DHCX_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <ISM330DHCX_IO_WriteReg+0x3a>
	}
	return ISM330DHCX_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000a0 	.word	0x200000a0

080008f0 <ISM330DHCX_IO_ReadReg>:

static ISM330DHCX_Status_t ISM330DHCX_IO_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR | 0x01, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, HAL_MAX_DELAY) != HAL_OK){
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	b29a      	uxth	r2, r3
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	b29b      	uxth	r3, r3
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	9102      	str	r1, [sp, #8]
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	21d7      	movs	r1, #215	; 0xd7
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <ISM330DHCX_IO_ReadReg+0x44>)
 800091a:	f001 fb23 	bl	8001f64 <HAL_I2C_Mem_Read>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <ISM330DHCX_IO_ReadReg+0x38>
		return ISM330DHCX_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <ISM330DHCX_IO_ReadReg+0x3a>
	}
	return ISM330DHCX_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000a0 	.word	0x200000a0

08000938 <ISM330DHCX_IO_IOCtl>:

static uint8_t ISM330DHCX_IO_IOCtl(ISM330DHCX_IO_Cmd_t Cmd){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	uint8_t PinStatus;
	switch(Cmd){
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d00e      	beq.n	8000966 <ISM330DHCX_IO_IOCtl+0x2e>
 8000948:	2b02      	cmp	r3, #2
 800094a:	dc19      	bgt.n	8000980 <ISM330DHCX_IO_IOCtl+0x48>
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <ISM330DHCX_IO_IOCtl+0x1e>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d004      	beq.n	800095e <ISM330DHCX_IO_IOCtl+0x26>
			return 1;
		} else {
			return 0;
		}
	default:
		break;
 8000954:	e014      	b.n	8000980 <ISM330DHCX_IO_IOCtl+0x48>
		ISM330DHCX_IO_IRQEnable();
 8000956:	f000 f82f 	bl	80009b8 <ISM330DHCX_IO_IRQEnable>
		return ISM330DHCX_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e012      	b.n	8000984 <ISM330DHCX_IO_IOCtl+0x4c>
		ISM330DHCX_IO_IRQDisable();
 800095e:	f000 f832 	bl	80009c6 <ISM330DHCX_IO_IRQDisable>
		return ISM330DHCX_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e00e      	b.n	8000984 <ISM330DHCX_IO_IOCtl+0x4c>
		PinStatus = ISM330DHCX_IO_ReadIntPin(ISM330DHCX_IRQ_Pin);
 8000966:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800096a:	f000 f80f 	bl	800098c <ISM330DHCX_IO_ReadIntPin>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
		if(PinStatus == GPIO_PIN_SET){
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d101      	bne.n	800097c <ISM330DHCX_IO_IOCtl+0x44>
			return 1;
 8000978:	2301      	movs	r3, #1
 800097a:	e003      	b.n	8000984 <ISM330DHCX_IO_IOCtl+0x4c>
			return 0;
 800097c:	2300      	movs	r3, #0
 800097e:	e001      	b.n	8000984 <ISM330DHCX_IO_IOCtl+0x4c>
		break;
 8000980:	bf00      	nop

	}
	return 0;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <ISM330DHCX_IO_ReadIntPin>:

static uint8_t ISM330DHCX_IO_ReadIntPin(uint16_t Pin){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(ISM330DHCX_IRQ_GPIO_Port, Pin) == GPIO_PIN_SET){
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <ISM330DHCX_IO_ReadIntPin+0x28>)
 800099c:	f001 f8f6 	bl	8001b8c <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <ISM330DHCX_IO_ReadIntPin+0x1e>
		return 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <ISM330DHCX_IO_ReadIntPin+0x20>
	} else {
		return 0;
 80009aa:	2300      	movs	r3, #0
	}
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	42021000 	.word	0x42021000

080009b8 <ISM330DHCX_IO_IRQEnable>:

static void ISM330DHCX_IO_IRQEnable(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(ISM330DHCX_IRQ_EXTI_IRQn);
 80009bc:	2016      	movs	r0, #22
 80009be:	f7ff ff19 	bl	80007f4 <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <ISM330DHCX_IO_IRQDisable>:

static void ISM330DHCX_IO_IRQDisable(void){
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(ISM330DHCX_IRQ_EXTI_IRQn);
 80009ca:	2016      	movs	r0, #22
 80009cc:	f7ff ff30 	bl	8000830 <__NVIC_DisableIRQ>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
*/
void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_GPIO_Init+0xc0>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_GPIO_Init+0xc0>)
 8000a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISM330DHCX_IRQ_Pin;
 8000a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_GPIO_Init+0xc4>)
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISM330DHCX_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_GPIO_Init+0xc8>)
 8000a78:	f000 fdd2 	bl	8001620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2016      	movs	r0, #22
 8000a82:	f000 fd98 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000a86:	2016      	movs	r0, #22
 8000a88:	f000 fdaf 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	46020c00 	.word	0x46020c00
 8000a98:	10110000 	.word	0x10110000
 8000a9c:	42021000 	.word	0x42021000

08000aa0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C2_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C2_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000adc:	f001 f89f 	bl	8001c1e <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 f9c7 	bl	8000e78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000aee:	f001 fdf9 	bl	80026e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 f9be 	bl	8000e78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_I2C2_Init+0x74>)
 8000b00:	f001 fe3b 	bl	800277a <HAL_I2CEx_ConfigDigitalFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f9b5 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000a0 	.word	0x200000a0
 8000b18:	40005800 	.word	0x40005800
 8000b1c:	30909dec 	.word	0x30909dec

08000b20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0bc      	sub	sp, #240	; 0xf0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	22c8      	movs	r2, #200	; 0xc8
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f006 fc7b 	bl	800743c <memset>
  if(i2cHandle->Instance==I2C2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_I2C_MspInit+0xc4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d144      	bne.n	8000bda <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b50:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 f9c3 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000b70:	f000 f982 	bl	8000e78 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ISM330DHCX_SCL_Pin|ISM330DHCX_SDA_Pin;
 8000b92:	2330      	movs	r3, #48	; 0x30
 8000b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000baa:	2304      	movs	r3, #4
 8000bac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <HAL_I2C_MspInit+0xcc>)
 8000bb8:	f000 fd32 	bl	8001620 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_I2C_MspInit+0xc8>)
 8000bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bda:	bf00      	nop
 8000bdc:	37f0      	adds	r7, #240	; 0xf0
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005800 	.word	0x40005800
 8000be8:	46020c00 	.word	0x46020c00
 8000bec:	42021c00 	.word	0x42021c00

08000bf0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f001 fe0d 	bl	8002814 <HAL_ICACHE_ConfigAssociativityMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c00:	f000 f93a 	bl	8000e78 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c04:	f001 fe26 	bl	8002854 <HAL_ICACHE_Enable>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c0e:	f000 f933 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  ISM330DHCX_Init_Struct_t Sensor_Settings = {
 8000c1e:	4a50      	ldr	r2, [pc, #320]	; (8000d60 <main+0x148>)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c28:	6018      	str	r0, [r3, #0]
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	8019      	strh	r1, [r3, #0]
 8000c2e:	3302      	adds	r3, #2
 8000c30:	0c0a      	lsrs	r2, r1, #16
 8000c32:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fb3c 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f8a8 	bl	8000d8c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000c3c:	f000 f900 	bl	8000e40 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART1_UART_Init();
 8000c40:	f000 fa58 	bl	80010f4 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 8000c44:	f7ff ffd4 	bl	8000bf0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  ISM330DHCX_Init(Sensor_Settings, &IMU, ISM330DHCX_HardwareDrv);
 8000c48:	4d46      	ldr	r5, [pc, #280]	; (8000d64 <main+0x14c>)
 8000c4a:	466c      	mov	r4, sp
 8000c4c:	1d2b      	adds	r3, r5, #4
 8000c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c54:	682b      	ldr	r3, [r5, #0]
 8000c56:	4a44      	ldr	r2, [pc, #272]	; (8000d68 <main+0x150>)
 8000c58:	f107 0108 	add.w	r1, r7, #8
 8000c5c:	c903      	ldmia	r1, {r0, r1}
 8000c5e:	f7ff fc99 	bl	8000594 <ISM330DHCX_Init>
  uint8_t start_condition = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
  uint32_t stop_time = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint16_t samples = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* wait to receive 0xFF on the debug UART*/
	  while(start_condition != 0xFF){
 8000c6e:	e006      	b.n	8000c7e <main+0x66>
		  HAL_UART_Receive(&huart1, &start_condition, 1, HAL_MAX_DELAY);
 8000c70:	1df9      	adds	r1, r7, #7
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	483c      	ldr	r0, [pc, #240]	; (8000d6c <main+0x154>)
 8000c7a:	f005 fe78 	bl	800696e <HAL_UART_Receive>
	  while(start_condition != 0xFF){
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2bff      	cmp	r3, #255	; 0xff
 8000c82:	d1f5      	bne.n	8000c70 <main+0x58>
	  }

	  stop_time = HAL_GetTick() + 5000;
 8000c84:	f000 fb8c 	bl	80013a0 <HAL_GetTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000c8e:	3308      	adds	r3, #8
 8000c90:	613b      	str	r3, [r7, #16]
	  /*Log Data for 5 seconds*/
	  while(HAL_GetTick() < stop_time){
 8000c92:	e052      	b.n	8000d3a <main+0x122>
		 if(IMU.DataReadyFlag == 1 || IMU.ISM330DHCX_IO.ioctl(ReadInt1Pin) == 1){
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <main+0x150>)
 8000c96:	7e1b      	ldrb	r3, [r3, #24]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d006      	beq.n	8000caa <main+0x92>
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <main+0x150>)
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d147      	bne.n	8000d3a <main+0x122>
			 IMU.ISM330DHCX_IO.ioctl(IRQDisable);
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <main+0x150>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4798      	blx	r3

			 ISM330DHCX_ReadAcceleration(&IMU);
 8000cb2:	482d      	ldr	r0, [pc, #180]	; (8000d68 <main+0x150>)
 8000cb4:	f7ff fd6c 	bl	8000790 <ISM330DHCX_ReadAcceleration>
			 ISM330DHCX_ReadAngularVelocity(&IMU);
 8000cb8:	482b      	ldr	r0, [pc, #172]	; (8000d68 <main+0x150>)
 8000cba:	f7ff fd7a 	bl	80007b2 <ISM330DHCX_ReadAngularVelocity>
			 ISM330DHCX_ReadTemperature(&IMU);
 8000cbe:	482a      	ldr	r0, [pc, #168]	; (8000d68 <main+0x150>)
 8000cc0:	f7ff fd87 	bl	80007d2 <ISM330DHCX_ReadTemperature>

			 Ax_log[samples] = IMU.Acceleration[0];
 8000cc4:	8afb      	ldrh	r3, [r7, #22]
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <main+0x150>)
 8000cc8:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <main+0x158>)
 8000cce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Ay_log[samples] = IMU.Acceleration[1];
 8000cd2:	8afb      	ldrh	r3, [r7, #22]
 8000cd4:	4a24      	ldr	r2, [pc, #144]	; (8000d68 <main+0x150>)
 8000cd6:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <main+0x15c>)
 8000cdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Az_log[samples] = IMU.Acceleration[2];
 8000ce0:	8afb      	ldrh	r3, [r7, #22]
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <main+0x150>)
 8000ce4:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <main+0x160>)
 8000cea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wx_log[samples] = IMU.AngularVelocity[0];
 8000cee:	8afb      	ldrh	r3, [r7, #22]
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <main+0x150>)
 8000cf2:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <main+0x164>)
 8000cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wy_log[samples] = IMU.AngularVelocity[1];
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <main+0x150>)
 8000d00:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <main+0x168>)
 8000d06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wz_log[samples] = IMU.AngularVelocity[2];
 8000d0a:	8afb      	ldrh	r3, [r7, #22]
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <main+0x150>)
 8000d0e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <main+0x16c>)
 8000d14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 temperature_log[samples] = IMU.Temperature;
 8000d18:	8afb      	ldrh	r3, [r7, #22]
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <main+0x150>)
 8000d1c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <main+0x170>)
 8000d22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			 samples++;
 8000d26:	8afb      	ldrh	r3, [r7, #22]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	82fb      	strh	r3, [r7, #22]
			 IMU.DataReadyFlag = 0;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <main+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	761a      	strb	r2, [r3, #24]
			 IMU.ISM330DHCX_IO.ioctl(IRQEnable);
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <main+0x150>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2000      	movs	r0, #0
 8000d38:	4798      	blx	r3
	  while(HAL_GetTick() < stop_time){
 8000d3a:	f000 fb31 	bl	80013a0 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d8a6      	bhi.n	8000c94 <main+0x7c>
		 }
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)Ax_log, samples, HAL_MAX_DELAY);
 8000d46:	8afa      	ldrh	r2, [r7, #22]
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	4908      	ldr	r1, [pc, #32]	; (8000d70 <main+0x158>)
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <main+0x154>)
 8000d50:	f005 fd68 	bl	8006824 <HAL_UART_Transmit>
	  samples = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	82fb      	strh	r3, [r7, #22]
	  start_condition = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	71fb      	strb	r3, [r7, #7]
	  while(start_condition != 0xFF){
 8000d5c:	e78f      	b.n	8000c7e <main+0x66>
 8000d5e:	bf00      	nop
 8000d60:	08007ef0 	.word	0x08007ef0
 8000d64:	20000000 	.word	0x20000000
 8000d68:	200000ec 	.word	0x200000ec
 8000d6c:	2000a530 	.word	0x2000a530
 8000d70:	2000188c 	.word	0x2000188c
 8000d74:	2000476c 	.word	0x2000476c
 8000d78:	2000764c 	.word	0x2000764c
 8000d7c:	20002ffc 	.word	0x20002ffc
 8000d80:	20005edc 	.word	0x20005edc
 8000d84:	20008dbc 	.word	0x20008dbc
 8000d88:	2000011c 	.word	0x2000011c

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09e      	sub	sp, #120	; 0x78
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2260      	movs	r2, #96	; 0x60
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fb4e 	bl	800743c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000db0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000db4:	f001 fd5e 	bl	8002874 <HAL_PWREx_ControlVoltageScaling>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000dbe:	f000 f85b 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000de0:	230a      	movs	r3, #10
 8000de2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000df0:	230c      	movs	r3, #12
 8000df2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fdcb 	bl	8002998 <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e08:	f000 f836 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	231f      	movs	r3, #31
 8000e0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2303      	movs	r3, #3
 8000e12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	2104      	movs	r1, #4
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fc8b 	bl	8003744 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e34:	f000 f820 	bl	8000e78 <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3778      	adds	r7, #120	; 0x78
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e44:	f001 fd98 	bl	8002978 <HAL_PWREx_DisableUCPDDeadBattery>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	const uint8_t character = ch & 0x00FF;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &character, 1, HAL_MAX_DELAY);
 8000e5a:	f107 010f 	add.w	r1, r7, #15
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	2201      	movs	r2, #1
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <__io_putchar+0x28>)
 8000e66:	f005 fcdd 	bl	8006824 <HAL_UART_Transmit>
	return ch;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000a530 	.word	0x2000a530

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_MspInit+0x30>)
 8000e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e90:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x30>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x30>)
 8000e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	46020c00 	.word	0x46020c00

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 fa38 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM330DHCX_IRQ_Pin);
 8000f10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f14:	f000 fe52 	bl	8001bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
	IMU.DataReadyFlag = 1;
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	200000ec 	.word	0x200000ec

08000f3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e00a      	b.n	8000f64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4e:	e000      	b.n	8000f52 <_read+0x16>
 8000f50:	bf00      	nop
 8000f52:	4601      	mov	r1, r0
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	b2ca      	uxtb	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	dbf0      	blt.n	8000f4e <_read+0x12>
	}

return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5b 	bl	8000e4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf1      	blt.n	8000f88 <_write+0x12>
	}
	return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_close>:

int _close(int file)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_isatty>:

int _isatty(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f006 f9ce 	bl	80073e8 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200c0000 	.word	0x200c0000
 8001078:	00000400 	.word	0x00000400
 800107c:	2000a52c 	.word	0x2000a52c
 8001080:	2000a5d8 	.word	0x2000a5d8

08001084 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <SystemInit+0x68>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <SystemInit+0x68>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <SystemInit+0x6c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <SystemInit+0x6c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <SystemInit+0x6c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <SystemInit+0x6c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <SystemInit+0x6c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <SystemInit+0x6c>)
 80010b6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010ba:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <SystemInit+0x6c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <SystemInit+0x6c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <SystemInit+0x6c>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <SystemInit+0x6c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SystemInit+0x68>)
 80010da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010de:	609a      	str	r2, [r3, #8]
  #endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	46020c00 	.word	0x46020c00

080010f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_USART1_UART_Init+0x90>)
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_USART1_UART_Init+0x94>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800113e:	f005 fb21 	bl	8006784 <HAL_UART_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001148:	f7ff fe96 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001150:	f006 f880 	bl	8007254 <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800115a:	f7ff fe8d 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001162:	f006 f8b5 	bl	80072d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800116c:	f7ff fe84 	bl	8000e78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_USART1_UART_Init+0x90>)
 8001172:	f006 f836 	bl	80071e2 <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800117c:	f7ff fe7c 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000a530 	.word	0x2000a530
 8001188:	40013800 	.word	0x40013800

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0bc      	sub	sp, #240	; 0xf0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	22c8      	movs	r2, #200	; 0xc8
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f945 	bl	800743c <memset>
  if(uartHandle->Instance==USART1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_UART_MspInit+0xc4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d145      	bne.n	8001248 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011bc:	f04f 0201 	mov.w	r2, #1
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011c8:	2300      	movs	r3, #0
 80011ca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fe8d 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80011dc:	f7ff fe4c 	bl	8000e78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UART_MspInit+0xc8>)
 80011e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011e6:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <HAL_UART_MspInit+0xc8>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UART_MspInit+0xc8>)
 80011f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_MspInit+0xc8>)
 8001200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_UART_MspInit+0xc8>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_UART_MspInit+0xc8>)
 8001210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin;
 800121c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001236:	2307      	movs	r3, #7
 8001238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_UART_MspInit+0xcc>)
 8001244:	f000 f9ec 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001248:	bf00      	nop
 800124a:	37f0      	adds	r7, #240	; 0xf0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013800 	.word	0x40013800
 8001254:	46020c00 	.word	0x46020c00
 8001258:	42020000 	.word	0x42020000

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001260:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001262:	e003      	b.n	800126c <LoopCopyDataInit>

08001264 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001266:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001268:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800126a:	3104      	adds	r1, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <LoopForever+0xa>)
	ldr	r3, =_edata
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001270:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001272:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001274:	d3f6      	bcc.n	8001264 <CopyDataInit>
	ldr	r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001278:	e002      	b.n	8001280 <LoopFillZerobss>

0800127a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800127a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800127c:	f842 3b04 	str.w	r3, [r2], #4

08001280 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001282:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001284:	d3f9      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001286:	f7ff fefd 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f006 f8b3 	bl	80073f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff fcc3 	bl	8000c18 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001294:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001298:	0800806c 	.word	0x0800806c
	ldr	r0, =_sdata
 800129c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012a0:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80012a4:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80012a8:	2000a5d4 	.word	0x2000a5d4

080012ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_Init+0x4c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_Init+0x4c>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f96d 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012c6:	f002 fc2f 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_Init+0x50>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	490b      	ldr	r1, [pc, #44]	; (8001304 <HAL_Init+0x54>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x58>)
 80012de:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e0:	200f      	movs	r0, #15
 80012e2:	f000 f813 	bl	800130c <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e002      	b.n	80012f6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fdc8 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000
 8001300:	46020c00 	.word	0x46020c00
 8001304:	08007ef8 	.word	0x08007ef8
 8001308:	20000014 	.word	0x20000014

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_InitTick+0x60>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_InitTick+0x64>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_InitTick+0x60>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f965 	bl	8001606 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f92f 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x68>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000001c 	.word	0x2000001c
 8001370:	20000014 	.word	0x20000014
 8001374:	20000018 	.word	0x20000018

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000001c 	.word	0x2000001c
 800139c:	2000a5c0 	.word	0x2000a5c0

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000a5c0 	.word	0x2000a5c0

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000001c 	.word	0x2000001c

08001400 <__NVIC_SetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff40 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff33 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa4 	bl	800155c <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001632:	e1ba      	b.n	80019aa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 81aa 	beq.w	80019a4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <HAL_GPIO_Init+0x188>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d15d      	bne.n	8001714 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800165e:	2201      	movs	r2, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	4013      	ands	r3, r2
 800166c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	4313      	orrs	r3, r2
 8001680:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001688:	4a48      	ldr	r2, [pc, #288]	; (80017ac <HAL_GPIO_Init+0x18c>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001690:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001692:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_GPIO_Init+0x18c>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3208      	adds	r2, #8
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	4013      	ands	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220b      	movs	r2, #11
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3208      	adds	r2, #8
 80016de:	69f9      	ldr	r1, [r7, #28]
 80016e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2202      	movs	r2, #2
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4313      	orrs	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e067      	b.n	80017e4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x104>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d145      	bne.n	80017b0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	4013      	ands	r3, r2
 8001746:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 020f 	and.w	r2, r3, #15
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	4313      	orrs	r3, r2
 8001760:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	4313      	orrs	r3, r2
 800179c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e01e      	b.n	80017e4 <HAL_GPIO_Init+0x1c4>
 80017a6:	bf00      	nop
 80017a8:	46020000 	.word	0x46020000
 80017ac:	08007f50 	.word	0x08007f50
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d00b      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f8:	2b11      	cmp	r3, #17
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b12      	cmp	r3, #18
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	4313      	orrs	r3, r2
 800182c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800183a:	2201      	movs	r2, #1
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	4013      	ands	r3, r2
 8001848:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4313      	orrs	r3, r2
 800185e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d017      	beq.n	800189e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	4013      	ands	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4313      	orrs	r3, r2
 8001896:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d07c      	beq.n	80019a4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3318      	adds	r3, #24
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0a9a      	lsrs	r2, r3, #10
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <HAL_GPIO_Init+0x3ac>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	4093      	lsls	r3, r2
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018e6:	4938      	ldr	r1, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3318      	adds	r3, #24
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	4013      	ands	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	4013      	ands	r3, r2
 800192c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 800194a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	4013      	ands	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 8001978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800197c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_GPIO_Init+0x3a8>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f ae3d 	bne.w	8001634 <HAL_GPIO_Init+0x14>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3724      	adds	r7, #36	; 0x24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	46022000 	.word	0x46022000
 80019cc:	002f7f7f 	.word	0x002f7f7f

080019d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80019e2:	e0bc      	b.n	8001b5e <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80019e4:	2201      	movs	r2, #1
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80ad 	beq.w	8001b58 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a5e      	ldr	r2, [pc, #376]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d115      	bne.n	8001a32 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8001a06:	4a5e      	ldr	r2, [pc, #376]	; (8001b80 <HAL_GPIO_DeInit+0x1b0>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a0e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a10:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <HAL_GPIO_DeInit+0x1b0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4954      	ldr	r1, [pc, #336]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e053      	b.n	8001ada <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8001a32:	4a54      	ldr	r2, [pc, #336]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3318      	adds	r3, #24
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0a9a      	lsrs	r2, r3, #10
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_GPIO_DeInit+0x1b8>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f002 0203 	and.w	r2, r2, #3
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	4093      	lsls	r3, r2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d136      	bne.n	8001ada <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4943      	ldr	r1, [pc, #268]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a80:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	493e      	ldr	r1, [pc, #248]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8001a90:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	493a      	ldr	r1, [pc, #232]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8001abc:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3318      	adds	r3, #24
 8001ac4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	482d      	ldr	r0, [pc, #180]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3208      	adds	r2, #8
 8001af6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	08d2      	lsrs	r2, r2, #3
 8001b0e:	4019      	ands	r1, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2103      	movs	r1, #3
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2101      	movs	r1, #1
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f47f af3c 	bne.w	80019e4 <HAL_GPIO_DeInit+0x14>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	46020000 	.word	0x46020000
 8001b80:	08007f50 	.word	0x08007f50
 8001b84:	46022000 	.word	0x46022000
 8001b88:	002f7f7f 	.word	0x002f7f7f

08001b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e001      	b.n	8001bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f99e 	bl	8000f1c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001bec:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f807 	bl	8001c08 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	46022000 	.word	0x46022000

08001c08 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e081      	b.n	8001d34 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe ff6b 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2224      	movs	r2, #36	; 0x24
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	e006      	b.n	8001ca6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ca4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d104      	bne.n	8001cb8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69d9      	ldr	r1, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	f040 80f9 	bne.w	8001f56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x34>
 8001d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ed      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Mem_Write+0x4e>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0e6      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d92:	f7ff fb05 	bl	80013a0 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2319      	movs	r3, #25
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 fac3 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d1      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2221      	movs	r2, #33	; 0x21
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a3a      	ldr	r2, [r7, #32]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ddc:	88f8      	ldrh	r0, [r7, #6]
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4603      	mov	r3, r0
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f9d3 	bl	8002198 <I2C_RequestMemoryWrite>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0a9      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d90e      	bls.n	8001e2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	8979      	ldrh	r1, [r7, #10]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fc2b 	bl	8002680 <I2C_TransferConfig>
 8001e2a:	e00f      	b.n	8001e4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fc1a 	bl	8002680 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 faad 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e07b      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d034      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x1c8>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d130      	bne.n	8001f04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fa3f 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e04d      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2bff      	cmp	r3, #255	; 0xff
 8001ec4:	d90e      	bls.n	8001ee4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	22ff      	movs	r2, #255	; 0xff
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fbcf 	bl	8002680 <I2C_TransferConfig>
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	8979      	ldrh	r1, [r7, #10]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fbbe 	bl	8002680 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d19e      	bne.n	8001e4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa8c 	bl	8002430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e01a      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2220      	movs	r2, #32
 8001f28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_I2C_Mem_Write+0x224>)
 8001f36:	400b      	ands	r3, r1
 8001f38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	fe00e800 	.word	0xfe00e800

08001f64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	817b      	strh	r3, [r7, #10]
 8001f76:	460b      	mov	r3, r1
 8001f78:	813b      	strh	r3, [r7, #8]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	f040 80fd 	bne.w	8002186 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x34>
 8001f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0f1      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Mem_Read+0x4e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e0ea      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fba:	f7ff f9f1 	bl	80013a0 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f9af 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0d5      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2222      	movs	r2, #34	; 0x22
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002004:	88f8      	ldrh	r0, [r7, #6]
 8002006:	893a      	ldrh	r2, [r7, #8]
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	4603      	mov	r3, r0
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f913 	bl	8002240 <I2C_RequestMemoryRead>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ad      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	2bff      	cmp	r3, #255	; 0xff
 8002034:	d90e      	bls.n	8002054 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22ff      	movs	r2, #255	; 0xff
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_I2C_Mem_Read+0x22c>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fb17 	bl	8002680 <I2C_TransferConfig>
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	b2da      	uxtb	r2, r3
 8002064:	8979      	ldrh	r1, [r7, #10]
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_I2C_Mem_Read+0x22c>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fb06 	bl	8002680 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	2200      	movs	r2, #0
 800207c:	2104      	movs	r1, #4
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f956 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07c      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d034      	beq.n	8002134 <HAL_I2C_Mem_Read+0x1d0>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d130      	bne.n	8002134 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	2200      	movs	r2, #0
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f927 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e04d      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2bff      	cmp	r3, #255	; 0xff
 80020f4:	d90e      	bls.n	8002114 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	b2da      	uxtb	r2, r3
 8002102:	8979      	ldrh	r1, [r7, #10]
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fab7 	bl	8002680 <I2C_TransferConfig>
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	2300      	movs	r3, #0
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 faa6 	bl	8002680 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d19a      	bne.n	8002074 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f974 	bl	8002430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01a      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2220      	movs	r2, #32
 8002158:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_I2C_Mem_Read+0x230>)
 8002166:	400b      	ands	r3, r1
 8002168:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	80002400 	.word	0x80002400
 8002194:	fe00e800 	.word	0xfe00e800

08002198 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	817b      	strh	r3, [r7, #10]
 80021aa:	460b      	mov	r3, r1
 80021ac:	813b      	strh	r3, [r7, #8]
 80021ae:	4613      	mov	r3, r2
 80021b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	8979      	ldrh	r1, [r7, #10]
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <I2C_RequestMemoryWrite+0xa4>)
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fa5d 	bl	8002680 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8f0 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e02c      	b.n	8002234 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021e0:	893b      	ldrh	r3, [r7, #8]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
 80021ea:	e015      	b.n	8002218 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021ec:	893b      	ldrh	r3, [r7, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8d6 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e012      	b.n	8002234 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800220e:	893b      	ldrh	r3, [r7, #8]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f884 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	80002000 	.word	0x80002000

08002240 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	817b      	strh	r3, [r7, #10]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	8979      	ldrh	r1, [r7, #10]
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <I2C_RequestMemoryRead+0xa4>)
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2300      	movs	r3, #0
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa0a 	bl	8002680 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f89d 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e02c      	b.n	80022da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002286:	893b      	ldrh	r3, [r7, #8]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
 8002290:	e015      	b.n	80022be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002292:	893b      	ldrh	r3, [r7, #8]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f883 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e012      	b.n	80022da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022b4:	893b      	ldrh	r3, [r7, #8]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2140      	movs	r1, #64	; 0x40
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f831 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	80002000 	.word	0x80002000

080022e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d103      	bne.n	8002306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	619a      	str	r2, [r3, #24]
  }
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	e022      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d01e      	beq.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff f829 	bl	80013a0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d113      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00f      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d0cd      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023bc:	e02c      	b.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f870 	bl	80024a8 <I2C_IsErrorOccurred>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02a      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d01e      	beq.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7fe ffe1 	bl	80013a0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d1cb      	bne.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800243c:	e028      	b.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f830 	bl	80024a8 <I2C_IsErrorOccurred>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e026      	b.n	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7fe ffa5 	bl	80013a0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d113      	bne.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d1cf      	bne.n	800243e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d075      	beq.n	80025c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2210      	movs	r2, #16
 80024da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024dc:	e056      	b.n	800258c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d052      	beq.n	800258c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7fe ff5b 	bl	80013a0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_IsErrorOccurred+0x54>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d147      	bne.n	800258c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800250e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251e:	d12e      	bne.n	800257e <I2C_IsErrorOccurred+0xd6>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002526:	d02a      	beq.n	800257e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b20      	cmp	r3, #32
 800252c:	d027      	beq.n	800257e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800253c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800253e:	f7fe ff2f 	bl	80013a0 <HAL_GetTick>
 8002542:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002544:	e01b      	b.n	800257e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002546:	f7fe ff2b 	bl	80013a0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b19      	cmp	r3, #25
 8002552:	d914      	bls.n	800257e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b20      	cmp	r3, #32
 800258a:	d1dc      	bne.n	8002546 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b20      	cmp	r3, #32
 8002598:	d003      	beq.n	80025a2 <I2C_IsErrorOccurred+0xfa>
 800259a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d09d      	beq.n	80024de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2220      	movs	r2, #32
 80025b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01c      	beq.n	8002670 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fe56 	bl	80022e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <I2C_IsErrorOccurred+0x1d4>)
 8002648:	400b      	ands	r3, r1
 800264a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	431a      	orrs	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002674:	4618      	mov	r0, r3
 8002676:	3728      	adds	r7, #40	; 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	fe00e800 	.word	0xfe00e800

08002680 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	4613      	mov	r3, r2
 8002690:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002698:	7a7b      	ldrb	r3, [r7, #9]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	0d5b      	lsrs	r3, r3, #21
 80026ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <I2C_TransferConfig+0x60>)
 80026c0:	430b      	orrs	r3, r1
 80026c2:	43db      	mvns	r3, r3
 80026c4:	ea02 0103 	and.w	r1, r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	03ff63ff 	.word	0x03ff63ff

080026e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d138      	bne.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002704:	2302      	movs	r3, #2
 8002706:	e032      	b.n	800276e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2224      	movs	r2, #36	; 0x24
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002736:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	e000      	b.n	800276e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	d139      	bne.n	8002804 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800279a:	2302      	movs	r3, #2
 800279c:	e033      	b.n	8002806 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2224      	movs	r2, #36	; 0x24
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e007      	b.n	8002842 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0204 	bic.w	r2, r3, #4
 800283a:	4905      	ldr	r1, [pc, #20]	; (8002850 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40030400 	.word	0x40030400

08002854 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_ICACHE_Enable+0x1c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_ICACHE_Enable+0x1c>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40030400 	.word	0x40030400

08002874 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002884:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d101      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e057      	b.n	8002942 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d90a      	bls.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	60d3      	str	r3, [r2, #12]
 80028ae:	e007      	b.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028b8:	4925      	ldr	r1, [pc, #148]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	2232      	movs	r2, #50	; 0x32
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80028de:	e002      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x84>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f3      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01b      	beq.n	8002936 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	2232      	movs	r2, #50	; 0x32
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	3301      	adds	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800291c:	e002      	b.n	8002924 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b01      	subs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f3      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e000      	b.n	8002942 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	46020800 	.word	0x46020800
 8002954:	20000014 	.word	0x20000014
 8002958:	10624dd3 	.word	0x10624dd3

0800295c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_PWREx_GetVoltageRange+0x18>)
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	46020800 	.word	0x46020800

08002978 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	46020800 	.word	0x46020800

08002998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f000 bec3 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b9c      	ldr	r3, [pc, #624]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b99      	ldr	r3, [pc, #612]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8172 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_RCC_OscConfig+0x52>
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	f040 80e4 	bne.w	8002baa <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f040 80e0 	bne.w	8002baa <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ea:	4b8e      	ldr	r3, [pc, #568]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <HAL_RCC_OscConfig+0x6c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 be9a 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a08:	4b86      	ldr	r3, [pc, #536]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_RCC_OscConfig+0x86>
 8002a14:	4b83      	ldr	r3, [pc, #524]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a1c:	e005      	b.n	8002a2a <HAL_RCC_OscConfig+0x92>
 8002a1e:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d255      	bcs.n	8002ada <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 f9d3 	bl	8003de4 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f000 be77 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002a4a:	4b76      	ldr	r3, [pc, #472]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a75      	ldr	r2, [pc, #468]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a54:	6093      	str	r3, [r2, #8]
 8002a56:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	4970      	ldr	r1, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a70:	d309      	bcc.n	8002a86 <HAL_RCC_OscConfig+0xee>
 8002a72:	4b6c      	ldr	r3, [pc, #432]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 021f 	bic.w	r2, r3, #31
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4969      	ldr	r1, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60cb      	str	r3, [r1, #12]
 8002a84:	e07e      	b.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da0a      	bge.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002a8e:	4b65      	ldr	r3, [pc, #404]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	015b      	lsls	r3, r3, #5
 8002a9c:	4961      	ldr	r1, [pc, #388]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
 8002aa2:	e06f      	b.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d30a      	bcc.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	029b      	lsls	r3, r3, #10
 8002abc:	4959      	ldr	r1, [pc, #356]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
 8002ac2:	e05f      	b.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
 8002ac4:	4b57      	ldr	r3, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	03db      	lsls	r3, r3, #15
 8002ad2:	4954      	ldr	r1, [pc, #336]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
 8002ad8:	e054      	b.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002ada:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae4:	6093      	str	r3, [r2, #8]
 8002ae6:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	494c      	ldr	r1, [pc, #304]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002b00:	d309      	bcc.n	8002b16 <HAL_RCC_OscConfig+0x17e>
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 021f 	bic.w	r2, r3, #31
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4945      	ldr	r1, [pc, #276]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
 8002b14:	e028      	b.n	8002b68 <HAL_RCC_OscConfig+0x1d0>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da0a      	bge.n	8002b34 <HAL_RCC_OscConfig+0x19c>
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	015b      	lsls	r3, r3, #5
 8002b2c:	493d      	ldr	r1, [pc, #244]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
 8002b32:	e019      	b.n	8002b68 <HAL_RCC_OscConfig+0x1d0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d30a      	bcc.n	8002b54 <HAL_RCC_OscConfig+0x1bc>
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
 8002b52:	e009      	b.n	8002b68 <HAL_RCC_OscConfig+0x1d0>
 8002b54:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	03db      	lsls	r3, r3, #15
 8002b62:	4930      	ldr	r1, [pc, #192]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 f936 	bl	8003de4 <RCC_SetFlashLatencyFromMSIRange>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bdda 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002b84:	f001 f8d8 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <HAL_RCC_OscConfig+0x290>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fbbd 	bl	800130c <HAL_InitTick>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8002b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 808a 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8002ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ba6:	f000 bdc7 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d066      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002bbe:	f7fe fbef 	bl	80013a0 <HAL_GetTick>
 8002bc2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fbeb 	bl	80013a0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d902      	bls.n	8002bda <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f000 bdaf 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ef      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf0:	6093      	str	r3, [r2, #8]
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	4909      	ldr	r1, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002c0c:	d30e      	bcc.n	8002c2c <HAL_RCC_OscConfig+0x294>
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 021f 	bic.w	r2, r3, #31
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4902      	ldr	r1, [pc, #8]	; (8002c24 <HAL_RCC_OscConfig+0x28c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e04a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x320>
 8002c22:	bf00      	nop
 8002c24:	46020c00 	.word	0x46020c00
 8002c28:	20000018 	.word	0x20000018
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da0a      	bge.n	8002c4a <HAL_RCC_OscConfig+0x2b2>
 8002c34:	4b9b      	ldr	r3, [pc, #620]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	015b      	lsls	r3, r3, #5
 8002c42:	4998      	ldr	r1, [pc, #608]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
 8002c48:	e036      	b.n	8002cb8 <HAL_RCC_OscConfig+0x320>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d30a      	bcc.n	8002c6a <HAL_RCC_OscConfig+0x2d2>
 8002c54:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	4990      	ldr	r1, [pc, #576]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
 8002c68:	e026      	b.n	8002cb8 <HAL_RCC_OscConfig+0x320>
 8002c6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	03db      	lsls	r3, r3, #15
 8002c78:	498a      	ldr	r1, [pc, #552]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60cb      	str	r3, [r1, #12]
 8002c7e:	e01b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a87      	ldr	r2, [pc, #540]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c8c:	f7fe fb88 	bl	80013a0 <HAL_GetTick>
 8002c90:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002c92:	e009      	b.n	8002ca8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c94:	f7fe fb84 	bl	80013a0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	f000 bd48 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002ca8:	4b7e      	ldr	r3, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ef      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8094 	beq.w	8002dee <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x340>
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d110      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b72      	ldr	r3, [pc, #456]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8083 	beq.w	8002dec <HAL_RCC_OscConfig+0x454>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d17e      	bne.n	8002dec <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 bd22 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x374>
 8002cfe:	4b69      	ldr	r3, [pc, #420]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a68      	ldr	r2, [pc, #416]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e041      	b.n	8002d90 <HAL_RCC_OscConfig+0x3f8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3a4>
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a62      	ldr	r2, [pc, #392]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5f      	ldr	r2, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e029      	b.n	8002d90 <HAL_RCC_OscConfig+0x3f8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3d4>
 8002d46:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a56      	ldr	r2, [pc, #344]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e011      	b.n	8002d90 <HAL_RCC_OscConfig+0x3f8>
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a46      	ldr	r2, [pc, #280]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002d8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb02 	bl	80013a0 <HAL_GetTick>
 8002d9c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9e:	e009      	b.n	8002db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fafe 	bl	80013a0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d902      	bls.n	8002db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f000 bcc2 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db4:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ef      	beq.n	8002da0 <HAL_RCC_OscConfig+0x408>
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002dc2:	f7fe faed 	bl	80013a0 <HAL_GetTick>
 8002dc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc8:	e009      	b.n	8002dde <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dca:	f7fe fae9 	bl	80013a0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	; 0x64
 8002dd6:	d902      	bls.n	8002dde <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	f000 bcad 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ef      	bne.n	8002dca <HAL_RCC_OscConfig+0x432>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d066      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_OscConfig+0x474>
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d117      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_RCC_OscConfig+0x48e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f000 bc89 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3a:	e045      	b.n	8002ec8 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d024      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e50:	f7fe faa6 	bl	80013a0 <HAL_GetTick>
 8002e54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e56:	e009      	b.n	8002e6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe faa2 	bl	80013a0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	f000 bc66 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ef      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	610b      	str	r3, [r1, #16]
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCC_OscConfig+0x50c>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e9a:	f7fe fa81 	bl	80013a0 <HAL_GetTick>
 8002e9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea0:	e00c      	b.n	8002ebc <HAL_RCC_OscConfig+0x524>
 8002ea2:	bf00      	nop
 8002ea4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fa7a 	bl	80013a0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	f000 bc3e 	b.w	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ebc:	4baf      	ldr	r3, [pc, #700]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ef      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80c7 	beq.w	8003064 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002edc:	4ba7      	ldr	r3, [pc, #668]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d111      	bne.n	8002f0e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4ba4      	ldr	r3, [pc, #656]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef0:	4aa2      	ldr	r2, [pc, #648]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002efa:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f0e:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f1a:	4b99      	ldr	r3, [pc, #612]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	4a98      	ldr	r2, [pc, #608]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fe fa3b 	bl	80013a0 <HAL_GetTick>
 8002f2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fe fa37 	bl	80013a0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e3fb      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f40:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05f      	beq.n	8003014 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002f54:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f5a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d037      	beq.n	8002fda <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e3da      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b7b      	ldr	r3, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f92:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002f94:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8002f98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8002f9c:	f7fe fa00 	bl	80013a0 <HAL_GetTick>
 8002fa0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe f9fc 	bl	80013a0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e3c0      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fb6:	4b71      	ldr	r3, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ef      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	496a      	ldr	r1, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe0:	4a66      	ldr	r2, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8002fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8002fea:	f7fe f9d9 	bl	80013a0 <HAL_GetTick>
 8002fee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe f9d5 	bl	80013a0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e399      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003004:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ef      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x65a>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800301a:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800301c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003020:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003024:	f7fe f9bc 	bl	80013a0 <HAL_GetTick>
 8003028:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe f9b8 	bl	80013a0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e37c      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800303e:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ef      	bne.n	800302c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	4a48      	ldr	r2, [pc, #288]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8112 	beq.w	8003296 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003078:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d111      	bne.n	80030aa <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	4a3b      	ldr	r2, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030aa:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80030b6:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe f96d 	bl	80013a0 <HAL_GetTick>
 80030c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe f969 	bl	80013a0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e32d      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_RCC_OscConfig+0x7e8>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01f      	beq.n	8003134 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003106:	4a1d      	ldr	r2, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003120:	e018      	b.n	8003154 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003132:	e00f      	b.n	8003154 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 8003146:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800314a:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_RCC_OscConfig+0x7e4>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d058      	beq.n	800320e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800315c:	f7fe f920 	bl	80013a0 <HAL_GetTick>
 8003160:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003162:	e00f      	b.n	8003184 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe f91c 	bl	80013a0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d906      	bls.n	8003184 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e2de      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
 800317a:	bf00      	nop
 800317c:	46020c00 	.word	0x46020c00
 8003180:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003184:	4b9c      	ldr	r3, [pc, #624]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0e8      	beq.n	8003164 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800319e:	4b96      	ldr	r3, [pc, #600]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80031a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031a4:	4a94      	ldr	r2, [pc, #592]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80031a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe f8f6 	bl	80013a0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e2b8      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ed      	beq.n	80031b0 <HAL_RCC_OscConfig+0x818>
 80031d4:	e053      	b.n	800327e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031d6:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80031d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031dc:	4a86      	ldr	r2, [pc, #536]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe f8da 	bl	80013a0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e29c      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031fe:	4b7e      	ldr	r3, [pc, #504]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ed      	bne.n	80031e8 <HAL_RCC_OscConfig+0x850>
 800320c:	e037      	b.n	800327e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800320e:	f7fe f8c7 	bl	80013a0 <HAL_GetTick>
 8003212:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe f8c3 	bl	80013a0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e285      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800322c:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800322e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ed      	bne.n	8003216 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800323c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01a      	beq.n	800327e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003248:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800324a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800324e:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe f8a1 	bl	80013a0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e263      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003270:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ed      	bne.n	800325a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800327e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328c:	4a5a      	ldr	r2, [pc, #360]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d036      	beq.n	8003310 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80032b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032b6:	f7fe f873 	bl	80013a0 <HAL_GetTick>
 80032ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032be:	f7fe f86f 	bl	80013a0 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e233      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x926>
 80032dc:	e018      	b.n	8003310 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80032ea:	f7fe f859 	bl	80013a0 <HAL_GetTick>
 80032ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f2:	f7fe f855 	bl	80013a0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e219      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003304:	4b3c      	ldr	r3, [pc, #240]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d036      	beq.n	800338a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	2b00      	cmp	r3, #0
 8003322:	d019      	beq.n	8003358 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a33      	ldr	r2, [pc, #204]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003330:	f7fe f836 	bl	80013a0 <HAL_GetTick>
 8003334:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003338:	f7fe f832 	bl	80013a0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e1f6      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800334a:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x9a0>
 8003356:	e018      	b.n	800338a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 800335e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003362:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003364:	f7fe f81c 	bl	80013a0 <HAL_GetTick>
 8003368:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800336c:	f7fe f818 	bl	80013a0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1dc      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d07f      	beq.n	8003496 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2b00      	cmp	r3, #0
 800339c:	d062      	beq.n	8003464 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033a8:	6093      	str	r3, [r2, #8]
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	4910      	ldr	r1, [pc, #64]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033c4:	d309      	bcc.n	80033da <HAL_RCC_OscConfig+0xa42>
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 021f 	bic.w	r2, r3, #31
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4909      	ldr	r1, [pc, #36]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
 80033d8:	e02a      	b.n	8003430 <HAL_RCC_OscConfig+0xa98>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da0c      	bge.n	80033fc <HAL_RCC_OscConfig+0xa64>
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	4901      	ldr	r1, [pc, #4]	; (80033f8 <HAL_RCC_OscConfig+0xa60>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60cb      	str	r3, [r1, #12]
 80033f6:	e01b      	b.n	8003430 <HAL_RCC_OscConfig+0xa98>
 80033f8:	46020c00 	.word	0x46020c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003404:	d30a      	bcc.n	800341c <HAL_RCC_OscConfig+0xa84>
 8003406:	4ba5      	ldr	r3, [pc, #660]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	49a1      	ldr	r1, [pc, #644]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003416:	4313      	orrs	r3, r2
 8003418:	60cb      	str	r3, [r1, #12]
 800341a:	e009      	b.n	8003430 <HAL_RCC_OscConfig+0xa98>
 800341c:	4b9f      	ldr	r3, [pc, #636]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	03db      	lsls	r3, r3, #15
 800342a:	499c      	ldr	r1, [pc, #624]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800342c:	4313      	orrs	r3, r2
 800342e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003430:	4b9a      	ldr	r3, [pc, #616]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a99      	ldr	r2, [pc, #612]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003436:	f043 0310 	orr.w	r3, r3, #16
 800343a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800343c:	f7fd ffb0 	bl	80013a0 <HAL_GetTick>
 8003440:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003444:	f7fd ffac 	bl	80013a0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e170      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003456:	4b91      	ldr	r3, [pc, #580]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0xaac>
 8003462:	e018      	b.n	8003496 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003464:	4b8d      	ldr	r3, [pc, #564]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a8c      	ldr	r2, [pc, #560]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003470:	f7fd ff96 	bl	80013a0 <HAL_GetTick>
 8003474:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003478:	f7fd ff92 	bl	80013a0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e156      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800348a:	4b84      	ldr	r3, [pc, #528]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 814b 	beq.w	8003736 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a6:	4b7d      	ldr	r3, [pc, #500]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	f000 80fa 	beq.w	80036a8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f040 80cc 	bne.w	8003656 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b77      	ldr	r3, [pc, #476]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a76      	ldr	r2, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80034c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034ca:	f7fd ff69 	bl	80013a0 <HAL_GetTick>
 80034ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fd ff65 	bl	80013a0 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e129      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80034e4:	4b6d      	ldr	r3, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d111      	bne.n	8003522 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_RCC_OscConfig+0xd08>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003536:	4b5a      	ldr	r3, [pc, #360]	; (80036a0 <HAL_RCC_OscConfig+0xd08>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a59      	ldr	r2, [pc, #356]	; (80036a0 <HAL_RCC_OscConfig+0xd08>)
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003556:	3a01      	subs	r2, #1
 8003558:	0212      	lsls	r2, r2, #8
 800355a:	4311      	orrs	r1, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003560:	430a      	orrs	r2, r1
 8003562:	494e      	ldr	r1, [pc, #312]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003564:	4313      	orrs	r3, r2
 8003566:	628b      	str	r3, [r1, #40]	; 0x28
 8003568:	4b4c      	ldr	r3, [pc, #304]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	4b4d      	ldr	r3, [pc, #308]	; (80036a4 <HAL_RCC_OscConfig+0xd0c>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003574:	3a01      	subs	r2, #1
 8003576:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800357e:	3a01      	subs	r2, #1
 8003580:	0252      	lsls	r2, r2, #9
 8003582:	b292      	uxth	r2, r2
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800358a:	3a01      	subs	r2, #1
 800358c:	0412      	lsls	r2, r2, #16
 800358e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003598:	3a01      	subs	r2, #1
 800359a:	0612      	lsls	r2, r2, #24
 800359c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80035a0:	430a      	orrs	r2, r1
 80035a2:	493e      	ldr	r1, [pc, #248]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035a8:	4b3c      	ldr	r3, [pc, #240]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	4a3b      	ldr	r2, [pc, #236]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035c4:	00d2      	lsls	r2, r2, #3
 80035c6:	4935      	ldr	r1, [pc, #212]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035cc:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035d2:	f043 0310 	orr.w	r3, r3, #16
 80035d6:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80035d8:	4b30      	ldr	r3, [pc, #192]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f023 020c 	bic.w	r2, r3, #12
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	492d      	ldr	r1, [pc, #180]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80035ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCC_OscConfig+0xd08>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_RCC_OscConfig+0xd08>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80035fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800360e:	f023 0304 	bic.w	r3, r3, #4
 8003612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003616:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	4a20      	ldr	r2, [pc, #128]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003620:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800362e:	f7fd feb7 	bl	80013a0 <HAL_GetTick>
 8003632:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fd feb3 	bl	80013a0 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e077      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0xc9e>
 8003654:	e06f      	b.n	8003736 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800365c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003660:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003662:	f7fd fe9d 	bl	80013a0 <HAL_GetTick>
 8003666:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7fd fe99 	bl	80013a0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e05d      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	4a03      	ldr	r2, [pc, #12]	; (800369c <HAL_RCC_OscConfig+0xd04>)
 800368e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	6293      	str	r3, [r2, #40]	; 0x28
 8003698:	e04d      	b.n	8003736 <HAL_RCC_OscConfig+0xd9e>
 800369a:	bf00      	nop
 800369c:	46020c00 	.word	0x46020c00
 80036a0:	46020800 	.word	0x46020800
 80036a4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_OscConfig+0xda8>)
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_OscConfig+0xda8>)
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d03a      	beq.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d133      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d12a      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	0b1b      	lsrs	r3, r3, #12
 80036e0:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d122      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d11a      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	0a5b      	lsrs	r3, r3, #9
 8003700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003708:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d111      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d108      	bne.n	8003732 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	0e1b      	lsrs	r3, r3, #24
 8003724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3738      	adds	r7, #56	; 0x38
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	46020c00 	.word	0x46020c00

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e1d9      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b9b      	ldr	r3, [pc, #620]	; (80039c8 <HAL_RCC_ClockConfig+0x284>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b98      	ldr	r3, [pc, #608]	; (80039c8 <HAL_RCC_ClockConfig+0x284>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 020f 	bic.w	r2, r3, #15
 800376e:	4996      	ldr	r1, [pc, #600]	; (80039c8 <HAL_RCC_ClockConfig+0x284>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b94      	ldr	r3, [pc, #592]	; (80039c8 <HAL_RCC_ClockConfig+0x284>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e1c1      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	4b8c      	ldr	r3, [pc, #560]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d908      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80037a4:	4b89      	ldr	r3, [pc, #548]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4986      	ldr	r1, [pc, #536]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d909      	bls.n	80037e8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80037d4:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	497a      	ldr	r1, [pc, #488]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b74      	ldr	r3, [pc, #464]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003800:	429a      	cmp	r2, r3
 8003802:	d908      	bls.n	8003816 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b71      	ldr	r3, [pc, #452]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	496e      	ldr	r1, [pc, #440]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003812:	4313      	orrs	r3, r2
 8003814:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d010      	beq.n	8003844 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	4b69      	ldr	r3, [pc, #420]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	429a      	cmp	r2, r3
 8003830:	d908      	bls.n	8003844 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003832:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 020f 	bic.w	r2, r3, #15
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4963      	ldr	r1, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003840:	4313      	orrs	r3, r2
 8003842:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80d2 	beq.w	80039f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d143      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d110      	bne.n	800388e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800386c:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	4a56      	ldr	r2, [pc, #344]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800388e:	f7fd fd87 	bl	80013a0 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003894:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <HAL_RCC_ClockConfig+0x28c>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00f      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80038a2:	f7fd fd7d 	bl	80013a0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e12b      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <HAL_RCC_ClockConfig+0x28c>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e112      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e106      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0fa      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0f2      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4926      	ldr	r1, [pc, #152]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003938:	f7fd fd32 	bl	80013a0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d112      	bne.n	800396c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd fd2a 	bl	80013a0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0d6      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d1ee      	bne.n	8003948 <HAL_RCC_ClockConfig+0x204>
 800396a:	e044      	b.n	80039f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d112      	bne.n	800399a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003974:	e00a      	b.n	800398c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003976:	f7fd fd13 	bl	80013a0 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0bf      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_ClockConfig+0x232>
 8003998:	e02d      	b.n	80039f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d123      	bne.n	80039ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a4:	f7fd fcfc 	bl	80013a0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0a8      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_RCC_ClockConfig+0x288>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ee      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x260>
 80039c6:	e016      	b.n	80039f6 <HAL_RCC_ClockConfig+0x2b2>
 80039c8:	40022000 	.word	0x40022000
 80039cc:	46020c00 	.word	0x46020c00
 80039d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fce4 	bl	80013a0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e090      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d1ee      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d010      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d208      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	493d      	ldr	r1, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <HAL_RCC_ClockConfig+0x3d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d210      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_ClockConfig+0x3d4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 020f 	bic.w	r2, r3, #15
 8003a3a:	4937      	ldr	r1, [pc, #220]	; (8003b18 <HAL_RCC_ClockConfig+0x3d4>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCC_ClockConfig+0x3d4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e05b      	b.n	8003b0c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d208      	bcs.n	8003a82 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4925      	ldr	r1, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d012      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d209      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4919      	ldr	r1, [pc, #100]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d208      	bcs.n	8003ae2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	490d      	ldr	r1, [pc, #52]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x3d0>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x3d8>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x3dc>)
 8003afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x3e0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fc03 	bl	800130c <HAL_InitTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	46020c00 	.word	0x46020c00
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	08007ef8 	.word	0x08007ef8
 8003b20:	20000014 	.word	0x20000014
 8003b24:	20000018 	.word	0x20000018

08003b28 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b08b      	sub	sp, #44	; 0x2c
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b36:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d121      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11e      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003b5c:	4b71      	ldr	r3, [pc, #452]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003b68:	4b6e      	ldr	r3, [pc, #440]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b6e:	0b1b      	lsrs	r3, r3, #12
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e005      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003b78:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	0f1b      	lsrs	r3, r3, #28
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b84:	4a68      	ldr	r2, [pc, #416]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d110      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b98:	e00d      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d102      	bne.n	8003bac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	e004      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	f040 80ac 	bne.w	8003d16 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003bc8:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bd6:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8086 	beq.w	8003d12 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d003      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0xec>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d022      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x130>
 8003c12:	e043      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003d30 <HAL_RCC_GetSysClockFreq+0x208>
 8003c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c36:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c3a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x20c>
 8003c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003c56:	e046      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003d30 <HAL_RCC_GetSysClockFreq+0x208>
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c7a:	ed97 6a01 	vldr	s12, [r7, #4]
 8003c7e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x20c>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003c9a:	e024      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003cc4:	ed97 6a01 	vldr	s12, [r7, #4]
 8003cc8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003d34 <HAL_RCC_GetSysClockFreq+0x20c>
 8003ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8003ce4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0a:	ee17 3a90 	vmov	r3, s15
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	e001      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	372c      	adds	r7, #44	; 0x2c
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	46020c00 	.word	0x46020c00
 8003d28:	08007f10 	.word	0x08007f10
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	4b742400 	.word	0x4b742400
 8003d34:	46000000 	.word	0x46000000

08003d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d3c:	f7ff fef4 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x28>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	4906      	ldr	r1, [pc, #24]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x30>)
 8003d54:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x30>)
 8003d58:	681b      	ldr	r3, [r3, #0]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	46020c00 	.word	0x46020c00
 8003d64:	08007ef8 	.word	0x08007ef8
 8003d68:	20000014 	.word	0x20000014

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003d70:	f7ff ffe2 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	46020c00 	.word	0x46020c00
 8003d90:	08007f08 	.word	0x08007f08

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003d98:	f7ff ffce 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	46020c00 	.word	0x46020c00
 8003db8:	08007f08 	.word	0x08007f08

08003dbc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003dc0:	f7ff ffba 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK3Freq+0x20>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	46020c00 	.word	0x46020c00
 8003de0:	08007f08 	.word	0x08007f08

08003de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dfa:	f7fe fdaf 	bl	800295c <HAL_PWREx_GetVoltageRange>
 8003dfe:	6178      	str	r0, [r7, #20]
 8003e00:	e019      	b.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e08:	4a37      	ldr	r2, [pc, #220]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e20:	f7fe fd9c 	bl	800295c <HAL_PWREx_GetVoltageRange>
 8003e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2c:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e3c:	d003      	beq.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e44:	d109      	bne.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4c:	d202      	bcs.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e52:	e033      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003e58:	e030      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e60:	d208      	bcs.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d102      	bne.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e025      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e035      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7a:	d90f      	bls.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e88:	d902      	bls.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e015      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003e90:	2301      	movs	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e012      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	e00f      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea2:	d109      	bne.n	8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eaa:	d102      	bne.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e004      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e001      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003eb8:	2301      	movs	r3, #1
 8003eba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 020f 	bic.w	r2, r3, #15
 8003ec4:	4909      	ldr	r1, [pc, #36]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003ecc:	4b07      	ldr	r3, [pc, #28]	; (8003eec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d001      	beq.n	8003ede <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	46020c00 	.word	0x46020c00
 8003eec:	40022000 	.word	0x40022000

08003ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b0ba      	sub	sp, #232	; 0xe8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f002 0401 	and.w	r4, r2, #1
 8003f14:	2500      	movs	r5, #0
 8003f16:	ea54 0305 	orrs.w	r3, r4, r5
 8003f1a:	d00b      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f1c:	4bcb      	ldr	r3, [pc, #812]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f22:	f023 0103 	bic.w	r1, r3, #3
 8003f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2c:	4ac7      	ldr	r2, [pc, #796]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f002 0802 	and.w	r8, r2, #2
 8003f40:	f04f 0900 	mov.w	r9, #0
 8003f44:	ea58 0309 	orrs.w	r3, r8, r9
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003f4a:	4bc0      	ldr	r3, [pc, #768]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f50:	f023 010c 	bic.w	r1, r3, #12
 8003f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	4abc      	ldr	r2, [pc, #752]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f002 0a04 	and.w	sl, r2, #4
 8003f6e:	f04f 0b00 	mov.w	fp, #0
 8003f72:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f76:	d00b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003f78:	4bb4      	ldr	r3, [pc, #720]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f7e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	4ab0      	ldr	r2, [pc, #704]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0308 	and.w	r3, r2, #8
 8003f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003fb0:	4ba6      	ldr	r3, [pc, #664]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	4aa2      	ldr	r2, [pc, #648]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f002 0310 	and.w	r3, r2, #16
 8003fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003fe8:	4b98      	ldr	r3, [pc, #608]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff8:	4a94      	ldr	r2, [pc, #592]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f002 0320 	and.w	r3, r2, #32
 800400c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004010:	2300      	movs	r3, #0
 8004012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004016:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004020:	4b8a      	ldr	r3, [pc, #552]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004026:	f023 0107 	bic.w	r1, r3, #7
 800402a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800402e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004030:	4a86      	ldr	r2, [pc, #536]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004032:	430b      	orrs	r3, r1
 8004034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800404e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	d00b      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004058:	4b7c      	ldr	r3, [pc, #496]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004068:	4a78      	ldr	r2, [pc, #480]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406a:	430b      	orrs	r3, r1
 800406c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800407c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004086:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d00b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004090:	4b6e      	ldr	r3, [pc, #440]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800409a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	4a6a      	ldr	r2, [pc, #424]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a2:	430b      	orrs	r3, r1
 80040a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80040b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040be:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4313      	orrs	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80040c8:	4b60      	ldr	r3, [pc, #384]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040da:	430b      	orrs	r3, r1
 80040dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d00b      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004100:	4b52      	ldr	r3, [pc, #328]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004106:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800410e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004110:	4a4e      	ldr	r2, [pc, #312]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004112:	430b      	orrs	r3, r1
 8004114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800412e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d00b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004138:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800413e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004148:	4a40      	ldr	r2, [pc, #256]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414a:	430b      	orrs	r3, r1
 800414c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800415c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004166:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d00b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004176:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800417a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800417e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004180:	4a32      	ldr	r2, [pc, #200]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004182:	430b      	orrs	r3, r1
 8004184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800419e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d00c      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ba:	4a24      	ldr	r2, [pc, #144]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80041ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d0:	2300      	movs	r3, #0
 80041d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d04f      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80041de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d02d      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d827      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041ee:	2b60      	cmp	r3, #96	; 0x60
 80041f0:	d02e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80041f2:	2b60      	cmp	r3, #96	; 0x60
 80041f4:	d823      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d006      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d81f      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004206:	e01a      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004214:	e01d      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800421a:	3308      	adds	r3, #8
 800421c:	4618      	mov	r0, r3
 800421e:	f002 f981 	bl	8006524 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004228:	e013      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800422a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800422e:	332c      	adds	r3, #44	; 0x2c
 8004230:	4618      	mov	r0, r3
 8004232:	f002 fa0f 	bl	8006654 <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800423c:	e009      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004244:	e005      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004246:	bf00      	nop
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800424a:	bf00      	nop
 800424c:	46020c00 	.word	0x46020c00
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800425a:	4bb6      	ldr	r3, [pc, #728]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800425c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004260:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	4ab1      	ldr	r2, [pc, #708]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800427a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800427e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800428a:	673b      	str	r3, [r7, #112]	; 0x70
 800428c:	2300      	movs	r3, #0
 800428e:	677b      	str	r3, [r7, #116]	; 0x74
 8004290:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d053      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d033      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	d82c      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b2:	d02f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80042b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b8:	d826      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042be:	d008      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d820      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d011      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80042d0:	e01a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042d2:	4b98      	ldr	r3, [pc, #608]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	4a97      	ldr	r2, [pc, #604]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042de:	e01a      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042e4:	3308      	adds	r3, #8
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 f91c 	bl	8006524 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042f2:	e010      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042f8:	332c      	adds	r3, #44	; 0x2c
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 f9aa 	bl	8006654 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800431e:	4b85      	ldr	r3, [pc, #532]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004320:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004324:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004332:	430b      	orrs	r3, r1
 8004334:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800433e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004350:	2300      	movs	r3, #0
 8004352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004354:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d046      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800435e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004366:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800436a:	d028      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800436c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004370:	d821      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004376:	d022      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437c:	d81b      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800437e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004382:	d01c      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004384:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004388:	d815      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d80f      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d00e      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80043a0:	e009      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a6:	3308      	adds	r3, #8
 80043a8:	4618      	mov	r0, r3
 80043aa:	f002 f8bb 	bl	8006524 <RCCEx_PLL2_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80043c8:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80043ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ce:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80043d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043da:	4a56      	ldr	r2, [pc, #344]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80043e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80043ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043f8:	663b      	str	r3, [r7, #96]	; 0x60
 80043fa:	2300      	movs	r3, #0
 80043fc:	667b      	str	r3, [r7, #100]	; 0x64
 80043fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d03f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	2b04      	cmp	r3, #4
 8004412:	d81e      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800445b 	.word	0x0800445b
 8004420:	08004431 	.word	0x08004431
 8004424:	0800443f 	.word	0x0800443f
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004430:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	4a3f      	ldr	r2, [pc, #252]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800443c:	e00e      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800443e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004442:	332c      	adds	r3, #44	; 0x2c
 8004444:	4618      	mov	r0, r3
 8004446:	f002 f905 	bl	8006654 <RCCEx_PLL3_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004450:	e004      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004458:	e000      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800445a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800445c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004464:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800446a:	f023 0107 	bic.w	r1, r3, #7
 800446e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004478:	430b      	orrs	r3, r1
 800447a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800447e:	e003      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004484:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004494:	65bb      	str	r3, [r7, #88]	; 0x58
 8004496:	2300      	movs	r3, #0
 8004498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800449a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d04d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80044a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b0:	d028      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80044b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b6:	d821      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80044b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044bc:	d024      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80044be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044c2:	d81b      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80044c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c8:	d00e      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80044ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ce:	d815      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d110      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80044e6:	e012      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ec:	332c      	adds	r3, #44	; 0x2c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 f8b0 	bl	8006654 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004502:	e004      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004504:	bf00      	nop
 8004506:	e002      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004508:	bf00      	nop
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800450c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800450e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d110      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800451c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004528:	4a02      	ldr	r2, [pc, #8]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800452a:	430b      	orrs	r3, r1
 800452c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004532:	bf00      	nop
 8004534:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800453c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800454c:	653b      	str	r3, [r7, #80]	; 0x50
 800454e:	2300      	movs	r3, #0
 8004550:	657b      	str	r3, [r7, #84]	; 0x54
 8004552:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	f000 80b5 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004564:	4b9d      	ldr	r3, [pc, #628]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	4b9a      	ldr	r3, [pc, #616]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004578:	4a98      	ldr	r2, [pc, #608]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004582:	4b96      	ldr	r3, [pc, #600]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800459a:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	4a90      	ldr	r2, [pc, #576]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045a6:	f7fc fefb 	bl	80013a0 <HAL_GetTick>
 80045aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045ae:	e00b      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b0:	f7fc fef6 	bl	80013a0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d903      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80045c6:	e005      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045c8:	4b85      	ldr	r3, [pc, #532]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ed      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80045d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d165      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045dc:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80045de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d023      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80045f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004602:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004610:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004616:	4a71      	ldr	r2, [pc, #452]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004620:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004626:	4a6d      	ldr	r2, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fc feab 	bl	80013a0 <HAL_GetTick>
 800464a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464e:	e00d      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004650:	f7fc fea6 	bl	80013a0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004660:	429a      	cmp	r2, r3
 8004662:	d903      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800466a:	e006      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466c:	4b5b      	ldr	r3, [pc, #364]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800466e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ea      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800467a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004688:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800468c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004690:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004694:	4a51      	ldr	r2, [pc, #324]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004696:	430b      	orrs	r3, r1
 8004698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800469c:	e008      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800469e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046a2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80046a6:	e003      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80046ac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b48      	ldr	r3, [pc, #288]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	4a47      	ldr	r2, [pc, #284]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80046c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80046d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d6:	2300      	movs	r3, #0
 80046d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d042      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80046e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046f0:	d022      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80046f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046f6:	d81b      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fc:	d011      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80046fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004702:	d815      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d019      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8004708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800470c:	d110      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004712:	3308      	adds	r3, #8
 8004714:	4618      	mov	r0, r3
 8004716:	f001 ff05 	bl	8006524 <RCCEx_PLL2_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004720:	e00d      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800473c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800473e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800475a:	430b      	orrs	r3, r1
 800475c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004766:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800476a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004776:	643b      	str	r3, [r7, #64]	; 0x40
 8004778:	2300      	movs	r3, #0
 800477a:	647b      	str	r3, [r7, #68]	; 0x44
 800477c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d032      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800478a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	d00b      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d804      	bhi.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d007      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80047aa:	e004      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80047b4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80047b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d112      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d0:	4a02      	ldr	r2, [pc, #8]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80047d8:	e008      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80047da:	bf00      	nop
 80047dc:	46020c00 	.word	0x46020c00
 80047e0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80047e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80047ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80047fa:	2300      	movs	r3, #0
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004802:	460b      	mov	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	d00c      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004808:	4b98      	ldr	r3, [pc, #608]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800480a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800480e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8004812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800481a:	4a94      	ldr	r2, [pc, #592]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800481c:	430b      	orrs	r3, r1
 800481e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
 8004834:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d019      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484a:	d105      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800484c:	4b87      	ldr	r3, [pc, #540]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	4a86      	ldr	r2, [pc, #536]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004856:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004858:	4b84      	ldr	r3, [pc, #528]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800485a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800485e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800486a:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800486c:	430b      	orrs	r3, r1
 800486e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004880:	2300      	movs	r3, #0
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004884:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d00c      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048a0:	4972      	ldr	r1, [pc, #456]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80048a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048be:	460b      	mov	r3, r1
 80048c0:	4313      	orrs	r3, r2
 80048c2:	d00c      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80048d6:	4965      	ldr	r1, [pc, #404]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80048de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d00c      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80048fa:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80048fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004900:	f023 0218 	bic.w	r2, r3, #24
 8004904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004908:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800490c:	4957      	ldr	r1, [pc, #348]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800492a:	460b      	mov	r3, r1
 800492c:	4313      	orrs	r3, r2
 800492e:	d032      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493c:	d105      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	4a4a      	ldr	r2, [pc, #296]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004948:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800494a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800494e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004952:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004956:	d108      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495c:	3308      	adds	r3, #8
 800495e:	4618      	mov	r0, r3
 8004960:	f001 fde0 	bl	8006524 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800496a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004974:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004984:	4939      	ldr	r1, [pc, #228]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800498c:	e003      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004992:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049ac:	460b      	mov	r3, r1
 80049ae:	4313      	orrs	r3, r2
 80049b0:	d03a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80049b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049be:	d00e      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80049c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c4:	d815      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80049ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ce:	d110      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049dc:	e00e      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049e2:	3308      	adds	r3, #8
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fd9d 	bl	8006524 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80049fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80049fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10d      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a16:	4915      	ldr	r1, [pc, #84]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004a1e:	e003      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004a24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d00c      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a56:	4905      	ldr	r1, [pc, #20]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004a5e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	37e8      	adds	r7, #232	; 0xe8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6c:	46020c00 	.word	0x46020c00

08004a70 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004a78:	4bac      	ldr	r3, [pc, #688]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004a82:	4baa      	ldr	r3, [pc, #680]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004a8c:	4ba7      	ldr	r3, [pc, #668]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	3301      	adds	r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004a9a:	4ba4      	ldr	r3, [pc, #656]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aa4:	4ba1      	ldr	r3, [pc, #644]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	08db      	lsrs	r3, r3, #3
 8004aaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8123 	beq.w	8004d0e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d062      	beq.n	8004b94 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	f200 8081 	bhi.w	8004bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d024      	beq.n	8004b26 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d17a      	bne.n	8004bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aec:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af4:	4b8d      	ldr	r3, [pc, #564]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b04:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b08:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b24:	e08f      	b.n	8004c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b26:	4b81      	ldr	r3, [pc, #516]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8004b32:	4b7e      	ldr	r3, [pc, #504]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0f1b      	lsrs	r3, r3, #28
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	e006      	b.n	8004b4c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8004b3e:	4b7b      	ldr	r3, [pc, #492]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	4a7a      	ldr	r2, [pc, #488]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b76:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b92:	e058      	b.n	8004c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004d30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd6:	e036      	b.n	8004c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004bd8:	4b54      	ldr	r3, [pc, #336]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8004be4:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	0f1b      	lsrs	r3, r3, #28
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	e006      	b.n	8004bfe <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8004bf0:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004bf6:	041b      	lsls	r3, r3, #16
 8004bf8:	0f1b      	lsrs	r3, r3, #28
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c28:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8004c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c44:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004c46:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d017      	beq.n	8004c82 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	0a5b      	lsrs	r3, r3, #9
 8004c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8004c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c68:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c78:	ee17 2a90 	vmov	r2, s15
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c94:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004caa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e002      	b.n	8004cca <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 2a90 	vmov	r2, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d04:	e00c      	b.n	8004d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	e008      	b.n	8004d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	3724      	adds	r7, #36	; 0x24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	46020c00 	.word	0x46020c00
 8004d30:	4b742400 	.word	0x4b742400
 8004d34:	46000000 	.word	0x46000000
 8004d38:	08007f10 	.word	0x08007f10

08004d3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d44:	4bac      	ldr	r3, [pc, #688]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d4e:	4baa      	ldr	r3, [pc, #680]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004d58:	4ba7      	ldr	r3, [pc, #668]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	3301      	adds	r3, #1
 8004d64:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004d66:	4ba4      	ldr	r3, [pc, #656]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004d70:	4ba1      	ldr	r3, [pc, #644]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d88:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8123 	beq.w	8004fda <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d062      	beq.n	8004e60 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	f200 8081 	bhi.w	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d024      	beq.n	8004df2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d17a      	bne.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc0:	4b8d      	ldr	r3, [pc, #564]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dd4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004dd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004ddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004de0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004de4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df0:	e08f      	b.n	8004f12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004df2:	4b81      	ldr	r3, [pc, #516]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8004dfe:	4b7e      	ldr	r3, [pc, #504]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	e006      	b.n	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8004e0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	4a7a      	ldr	r2, [pc, #488]	; (8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e42:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5e:	e058      	b.n	8004f12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e86:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea2:	e036      	b.n	8004f12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004ea4:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8004eb0:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0f1b      	lsrs	r3, r3, #28
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	e006      	b.n	8004eca <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8004ebc:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	0f1b      	lsrs	r3, r3, #28
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a4e      	ldr	r2, [pc, #312]	; (8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8004ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f10:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004f12:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f44:	ee17 2a90 	vmov	r2, s15
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e002      	b.n	8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f76:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f86:	ee17 2a90 	vmov	r2, s15
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	e002      	b.n	8004f96 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004f96:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	0e1b      	lsrs	r3, r3, #24
 8004fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc8:	ee17 2a90 	vmov	r2, s15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fd0:	e00c      	b.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	609a      	str	r2, [r3, #8]
}
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	3724      	adds	r7, #36	; 0x24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	46020c00 	.word	0x46020c00
 8004ffc:	4b742400 	.word	0x4b742400
 8005000:	46000000 	.word	0x46000000
 8005004:	08007f10 	.word	0x08007f10

08005008 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005010:	4bac      	ldr	r3, [pc, #688]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005018:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800501a:	4baa      	ldr	r3, [pc, #680]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005024:	4ba7      	ldr	r3, [pc, #668]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	3301      	adds	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005032:	4ba4      	ldr	r3, [pc, #656]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800503c:	4ba1      	ldr	r3, [pc, #644]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800503e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	fb02 f303 	mul.w	r3, r2, r3
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005054:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8123 	beq.w	80052a6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d062      	beq.n	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b03      	cmp	r3, #3
 800506a:	f200 8081 	bhi.w	8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d024      	beq.n	80050be <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d17a      	bne.n	8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005084:	eddf 6a90 	vldr	s13, [pc, #576]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508c:	4b8d      	ldr	r3, [pc, #564]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800509c:	ed97 6a02 	vldr	s12, [r7, #8]
 80050a0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80050a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80050ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80050b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80050bc:	e08f      	b.n	80051de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80050be:	4b81      	ldr	r3, [pc, #516]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80050ca:	4b7e      	ldr	r3, [pc, #504]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0f1b      	lsrs	r3, r3, #28
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80050d6:	4b7b      	ldr	r3, [pc, #492]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80050d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	0f1b      	lsrs	r3, r3, #28
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	4a7a      	ldr	r2, [pc, #488]	; (80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a02 	vldr	s12, [r7, #8]
 800510e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800512a:	e058      	b.n	80051de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	eddf 6a64 	vldr	s13, [pc, #400]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800513a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513e:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800514e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005152:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005156:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800515a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800515e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005162:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800516e:	e036      	b.n	80051de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005170:	4b54      	ldr	r3, [pc, #336]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800517c:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	0f1b      	lsrs	r3, r3, #28
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	e006      	b.n	8005196 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005188:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800518a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	0f1b      	lsrs	r3, r3, #28
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	4a4e      	ldr	r2, [pc, #312]	; (80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80051c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80051d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051dc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80051de:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80051fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005200:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005204:	edd7 6a07 	vldr	s13, [r7, #28]
 8005208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005210:	ee17 2a90 	vmov	r2, s15
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	e002      	b.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d017      	beq.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800522c:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005242:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005246:	edd7 6a07 	vldr	s13, [r7, #28]
 800524a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005262:	4b18      	ldr	r3, [pc, #96]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	0e1b      	lsrs	r3, r3, #24
 8005274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005278:	ee07 3a90 	vmov	s15, r3
 800527c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005284:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005288:	edd7 6a07 	vldr	s13, [r7, #28]
 800528c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005294:	ee17 2a90 	vmov	r2, s15
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800529c:	e00c      	b.n	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	e008      	b.n	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	3724      	adds	r7, #36	; 0x24
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	46020c00 	.word	0x46020c00
 80052c8:	4b742400 	.word	0x4b742400
 80052cc:	46000000 	.word	0x46000000
 80052d0:	08007f10 	.word	0x08007f10

080052d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	; 0x38
 80052d8:	af00      	add	r7, sp, #0
 80052da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80052de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80052e6:	430b      	orrs	r3, r1
 80052e8:	d145      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80052ea:	4ba7      	ldr	r3, [pc, #668]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80052ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80052f6:	4ba4      	ldr	r3, [pc, #656]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80052f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d108      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530a:	d104      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800530c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	f001 b8fc 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005316:	4b9c      	ldr	r3, [pc, #624]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005324:	d114      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532c:	d110      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800532e:	4b96      	ldr	r3, [pc, #600]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533c:	d103      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800533e:	23fa      	movs	r3, #250	; 0xfa
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005342:	f001 b8e4 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005346:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800534c:	f001 b8df 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005350:	4b8d      	ldr	r3, [pc, #564]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535c:	d107      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005364:	d103      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	f001 b8d0 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f001 b8cc 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800537a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800537e:	430b      	orrs	r3, r1
 8005380:	d151      	bne.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005382:	4b81      	ldr	r3, [pc, #516]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005388:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800538c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d035      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d841      	bhi.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2b60      	cmp	r3, #96	; 0x60
 800539e:	d02a      	beq.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2b60      	cmp	r3, #96	; 0x60
 80053a4:	d83b      	bhi.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d009      	beq.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d835      	bhi.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d012      	beq.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80053be:	e02e      	b.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fb53 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ce:	f001 b89e 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053d2:	f107 0318 	add.w	r3, r7, #24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fcb0 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053e0:	f001 b895 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fe0d 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f2:	f001 b88c 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80053f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053fc:	f001 b887 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005400:	4b61      	ldr	r3, [pc, #388]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d103      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800540e:	4b60      	ldr	r3, [pc, #384]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005412:	f001 b87c 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800541a:	f001 b878 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005422:	f001 b874 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800542a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800542e:	430b      	orrs	r3, r1
 8005430:	d158      	bne.n	80054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005432:	4b55      	ldr	r3, [pc, #340]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005434:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800543c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005444:	d03b      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d846      	bhi.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005454:	d02e      	beq.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545c:	d83e      	bhi.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d00b      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d836      	bhi.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d012      	beq.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800547c:	e02e      	b.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800547e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff faf4 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800548c:	f001 b83f 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005490:	f107 0318 	add.w	r3, r7, #24
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fc51 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800549e:	f001 b836 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fdae 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054b0:	f001 b82d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80054b4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054ba:	f001 b828 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ca:	d103      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80054cc:	4b30      	ldr	r3, [pc, #192]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054d0:	f001 b81d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054d8:	f001 b819 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e0:	f001 b815 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80054e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80054ec:	430b      	orrs	r3, r1
 80054ee:	d126      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005508:	d106      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	f000 bffb 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d107      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552c:	d103      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800552e:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	f000 bfec 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
 800553a:	f000 bfe8 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800553e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005542:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005546:	430b      	orrs	r3, r1
 8005548:	d164      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800554c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005550:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005554:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800555c:	d03d      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005564:	d852      	bhi.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556c:	d014      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005574:	d84a      	bhi.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005582:	d012      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005584:	e042      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005586:	bf00      	nop
 8005588:	46020c00 	.word	0x46020c00
 800558c:	0007a120 	.word	0x0007a120
 8005590:	00f42400 	.word	0x00f42400
 8005594:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fa67 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055a6:	f000 bfb2 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055aa:	f107 0318 	add.w	r3, r7, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fbc4 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055b8:	f000 bfa9 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80055bc:	4bab      	ldr	r3, [pc, #684]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c8:	d103      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80055ca:	4ba9      	ldr	r3, [pc, #676]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80055ce:	f000 bf9e 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055d6:	f000 bf9a 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055da:	4ba4      	ldr	r3, [pc, #656]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80055e6:	4ba1      	ldr	r3, [pc, #644]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	0e1b      	lsrs	r3, r3, #24
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	e006      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80055f2:	4b9e      	ldr	r3, [pc, #632]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80055f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	4a9c      	ldr	r2, [pc, #624]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005608:	f000 bf81 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005610:	f000 bf7d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005618:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800561c:	430b      	orrs	r3, r1
 800561e:	d175      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005620:	4b92      	ldr	r3, [pc, #584]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2b00      	cmp	r3, #0
 8005630:	d15b      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005632:	4b8e      	ldr	r3, [pc, #568]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005638:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800563c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005644:	d034      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800564c:	d849      	bhi.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005654:	d00b      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565c:	d841      	bhi.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d016      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800566a:	d009      	beq.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800566c:	e039      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800566e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff f9fc 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800567c:	f000 bf47 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005680:	f107 0318 	add.w	r3, r7, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fb59 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800568e:	f000 bf3e 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005692:	4b76      	ldr	r3, [pc, #472]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569e:	d103      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80056a0:	4b73      	ldr	r3, [pc, #460]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80056a4:	f000 bf33 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056ac:	f000 bf2f 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056b0:	4b6e      	ldr	r3, [pc, #440]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80056bc:	4b6b      	ldr	r3, [pc, #428]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	0e1b      	lsrs	r3, r3, #24
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	e006      	b.n	80056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80056c8:	4b68      	ldr	r3, [pc, #416]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80056ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	0e1b      	lsrs	r3, r3, #24
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	4a67      	ldr	r2, [pc, #412]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80056d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056de:	f000 bf16 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80056e6:	f000 bf12 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f0:	d108      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff f9ba 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005700:	f000 bf05 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
 8005708:	f000 bf01 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800570c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005710:	1e51      	subs	r1, r2, #1
 8005712:	430b      	orrs	r3, r1
 8005714:	d136      	bne.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005716:	4b55      	ldr	r3, [pc, #340]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005728:	f7fe fb34 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 800572c:	6378      	str	r0, [r7, #52]	; 0x34
 800572e:	f000 beee 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	d104      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005738:	f7fe f9f6 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800573c:	6378      	str	r0, [r7, #52]	; 0x34
 800573e:	f000 bee6 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005742:	4b4a      	ldr	r3, [pc, #296]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	d106      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	2b02      	cmp	r3, #2
 8005754:	d103      	bne.n	800575e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8005756:	4b48      	ldr	r3, [pc, #288]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
 800575a:	f000 bed8 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800575e:	4b43      	ldr	r3, [pc, #268]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b02      	cmp	r3, #2
 800576a:	d107      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2b03      	cmp	r3, #3
 8005770:	d104      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	f000 bec9 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
 8005780:	f000 bec5 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005788:	1e91      	subs	r1, r2, #2
 800578a:	430b      	orrs	r3, r1
 800578c:	d136      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80057a0:	f7fe fae4 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80057a4:	6378      	str	r0, [r7, #52]	; 0x34
 80057a6:	f000 beb2 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d104      	bne.n	80057ba <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80057b0:	f7fe f9ba 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80057b4:	6378      	str	r0, [r7, #52]	; 0x34
 80057b6:	f000 beaa 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d106      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d103      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80057ce:	4b2a      	ldr	r3, [pc, #168]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	f000 be9c 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80057d6:	4b25      	ldr	r3, [pc, #148]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80057d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d107      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	d104      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80057ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	f000 be8d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
 80057f8:	f000 be89 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80057fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005800:	1f11      	subs	r1, r2, #4
 8005802:	430b      	orrs	r3, r1
 8005804:	d13e      	bne.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005806:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005810:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fe faa8 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 800581c:	6378      	str	r0, [r7, #52]	; 0x34
 800581e:	f000 be76 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b10      	cmp	r3, #16
 8005826:	d104      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005828:	f7fe f97e 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800582c:	6378      	str	r0, [r7, #52]	; 0x34
 800582e:	f000 be6e 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2b20      	cmp	r3, #32
 8005844:	d103      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	f000 be60 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d10f      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	2b30      	cmp	r3, #48	; 0x30
 8005860:	d10c      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
 8005868:	f000 be51 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800586c:	46020c00 	.word	0x46020c00
 8005870:	02dc6c00 	.word	0x02dc6c00
 8005874:	08007f10 	.word	0x08007f10
 8005878:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
 8005880:	f000 be45 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005888:	f1a2 0108 	sub.w	r1, r2, #8
 800588c:	430b      	orrs	r3, r1
 800588e:	d136      	bne.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005890:	4b9f      	ldr	r3, [pc, #636]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800589a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80058a2:	f7fe fa63 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80058a6:	6378      	str	r0, [r7, #52]	; 0x34
 80058a8:	f000 be31 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d104      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80058b2:	f7fe f939 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80058b6:	6378      	str	r0, [r7, #52]	; 0x34
 80058b8:	f000 be29 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80058bc:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c8:	d106      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d103      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80058d0:	4b90      	ldr	r3, [pc, #576]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
 80058d4:	f000 be1b 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80058d8:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80058da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d107      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2bc0      	cmp	r3, #192	; 0xc0
 80058ea:	d104      	bne.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80058ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
 80058f2:	f000 be0c 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
 80058fa:	f000 be08 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80058fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005902:	f1a2 0110 	sub.w	r1, r2, #16
 8005906:	430b      	orrs	r3, r1
 8005908:	d139      	bne.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800590a:	4b81      	ldr	r3, [pc, #516]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800590c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005914:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fe fa26 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005920:	6378      	str	r0, [r7, #52]	; 0x34
 8005922:	f000 bdf4 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800592c:	d104      	bne.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe f8fb 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005932:	6378      	str	r0, [r7, #52]	; 0x34
 8005934:	f000 bdeb 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005944:	d107      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d103      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800594e:	4b71      	ldr	r3, [pc, #452]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	f000 bddc 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005956:	4b6e      	ldr	r3, [pc, #440]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d108      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800596a:	d104      	bne.n	8005976 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800596c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	f000 bdcc 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	f000 bdc8 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800597e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005982:	f1a2 0120 	sub.w	r1, r2, #32
 8005986:	430b      	orrs	r3, r1
 8005988:	d158      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800598a:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800598c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800599c:	f7fe fa0e 	bl	8003dbc <HAL_RCC_GetPCLK3Freq>
 80059a0:	6378      	str	r0, [r7, #52]	; 0x34
 80059a2:	f000 bdb4 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d104      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80059ac:	f7fe f8bc 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80059b0:	6378      	str	r0, [r7, #52]	; 0x34
 80059b2:	f000 bdac 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80059b6:	4b56      	ldr	r3, [pc, #344]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c2:	d106      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80059ca:	4b52      	ldr	r3, [pc, #328]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
 80059ce:	f000 bd9e 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80059d2:	4b4f      	ldr	r3, [pc, #316]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d107      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d104      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80059e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
 80059ec:	f000 bd8f 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80059f0:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d11b      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d118      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005a02:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005a0e:	4b40      	ldr	r3, [pc, #256]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	0e1b      	lsrs	r3, r3, #24
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	4a3b      	ldr	r2, [pc, #236]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a30:	f000 bd6d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	637b      	str	r3, [r7, #52]	; 0x34
 8005a38:	f000 bd69 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a40:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005a44:	430b      	orrs	r3, r1
 8005a46:	d169      	bne.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005a48:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a4e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5a:	d104      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005a5c:	f7fe f864 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005a60:	6378      	str	r0, [r7, #52]	; 0x34
 8005a62:	f000 bd54 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f962 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7c:	f000 bd47 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005a86:	f7fe f957 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8005a8a:	6378      	str	r0, [r7, #52]	; 0x34
 8005a8c:	f000 bd3f 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005a96:	d118      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005a98:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005aa4:	4b1a      	ldr	r3, [pc, #104]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	0f1b      	lsrs	r3, r3, #28
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ab6:	041b      	lsls	r3, r3, #16
 8005ab8:	0f1b      	lsrs	r3, r3, #28
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac6:	f000 bd22 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ade:	d103      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	f000 bd13 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005ae8:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d107      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005afc:	d103      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
 8005b02:	f000 bd04 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	f000 bd00 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005b0e:	bf00      	nop
 8005b10:	46020c00 	.word	0x46020c00
 8005b14:	00f42400 	.word	0x00f42400
 8005b18:	08007f10 	.word	0x08007f10
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b20:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005b24:	430b      	orrs	r3, r1
 8005b26:	d14e      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8005b28:	4ba8      	ldr	r3, [pc, #672]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d841      	bhi.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b67 	.word	0x08005b67
 8005b4c:	08005b83 	.word	0x08005b83
 8005b50:	08005b8d 	.word	0x08005b8d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe ff89 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b62:	f000 bcd4 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fa4c 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b74:	f000 bccb 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005b78:	f7fe f8de 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8005b7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005b7e:	f000 bcc6 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005b82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b88:	f000 bcc1 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b8c:	4b8f      	ldr	r3, [pc, #572]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8005b98:	4b8c      	ldr	r3, [pc, #560]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	0e1b      	lsrs	r3, r3, #24
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	e006      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005ba4:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	0e1b      	lsrs	r3, r3, #24
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	4a87      	ldr	r2, [pc, #540]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bba:	f000 bca8 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc2:	f000 bca4 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	d15d      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005bd2:	4b7e      	ldr	r3, [pc, #504]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bd8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005be4:	d036      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bec:	d84b      	bhi.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf4:	d029      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bfc:	d843      	bhi.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c04:	d013      	beq.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c0c:	d83b      	bhi.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1a:	d134      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe ff25 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c2a:	f000 bc70 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f9e8 	bl	8005008 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c3c:	f000 bc67 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005c40:	f7fe f87a 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8005c44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005c46:	f000 bc62 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005c4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c50:	f000 bc5d 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c54:	4b5d      	ldr	r3, [pc, #372]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005c60:	4b5a      	ldr	r3, [pc, #360]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	0e1b      	lsrs	r3, r3, #24
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	e006      	b.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c72:	041b      	lsls	r3, r3, #16
 8005c74:	0e1b      	lsrs	r3, r3, #24
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	4a55      	ldr	r2, [pc, #340]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	f000 bc44 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c8a:	f000 bc40 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c92:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005c96:	430b      	orrs	r3, r1
 8005c98:	d14a      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005c9a:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7fe f85e 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005cb0:	6378      	str	r0, [r7, #52]	; 0x34
 8005cb2:	f000 bc2c 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d104      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005cbe:	f7fd ff33 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005cc2:	6378      	str	r0, [r7, #52]	; 0x34
 8005cc4:	f000 bc23 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005cc8:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cdc:	d103      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8005cde:	4b3d      	ldr	r3, [pc, #244]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce2:	f000 bc14 	b.w	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005ce6:	4b39      	ldr	r3, [pc, #228]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d11b      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cf8:	d117      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005cfa:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8005d06:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0e1b      	lsrs	r3, r3, #24
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	e006      	b.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	0e1b      	lsrs	r3, r3, #24
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
 8005d28:	e3f1      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	e3ee      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d34:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	d14d      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005d3c:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d46:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d4e:	f7fe f80d 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005d52:	6378      	str	r0, [r7, #52]	; 0x34
 8005d54:	e3db      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5c:	d103      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7fd fee3 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005d62:	6378      	str	r0, [r7, #52]	; 0x34
 8005d64:	e3d3      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d72:	d106      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8005d7c:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d80:	e3c5      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d11b      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d94:	d117      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0e1b      	lsrs	r3, r3, #24
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	0e1b      	lsrs	r3, r3, #24
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	e3a3      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dca:	e3a0      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8005dcc:	46020c00 	.word	0x46020c00
 8005dd0:	08007f10 	.word	0x08007f10
 8005dd4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ddc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005de0:	430b      	orrs	r3, r1
 8005de2:	d148      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005de4:	4b9d      	ldr	r3, [pc, #628]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2bc0      	cmp	r3, #192	; 0xc0
 8005df4:	d024      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2bc0      	cmp	r3, #192	; 0xc0
 8005dfa:	d839      	bhi.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d00d      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d833      	bhi.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d011      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005e14:	e02c      	b.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005e16:	f7fd ffd1 	bl	8003dbc <HAL_RCC_GetPCLK3Freq>
 8005e1a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e1c:	e377      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2a:	d102      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8005e2c:	4b8c      	ldr	r3, [pc, #560]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e30:	e36d      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e36:	e36a      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005e38:	f7fd fe76 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005e3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005e3e:	e366      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8005e40:	4b86      	ldr	r3, [pc, #536]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8005e4c:	4b83      	ldr	r3, [pc, #524]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	0f1b      	lsrs	r3, r3, #28
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	e006      	b.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8005e58:	4b80      	ldr	r3, [pc, #512]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	0f1b      	lsrs	r3, r3, #28
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e6e:	e34e      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e74:	e34b      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e7a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	d147      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005e82:	4b76      	ldr	r3, [pc, #472]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fd ff6a 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8005e98:	6378      	str	r0, [r7, #52]	; 0x34
 8005e9a:	e338      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ea2:	d103      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ea4:	f7fd fe40 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8005ea8:	6378      	str	r0, [r7, #52]	; 0x34
 8005eaa:	e330      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005eac:	4b6b      	ldr	r3, [pc, #428]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec0:	d102      	bne.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8005ec2:	4b67      	ldr	r3, [pc, #412]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec6:	e322      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005ec8:	4b64      	ldr	r3, [pc, #400]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d11b      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eda:	d117      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005edc:	4b5f      	ldr	r3, [pc, #380]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8005ee8:	4b5c      	ldr	r3, [pc, #368]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	0e1b      	lsrs	r3, r3, #24
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	e006      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	0e1b      	lsrs	r3, r3, #24
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	4a58      	ldr	r2, [pc, #352]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	e300      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f10:	e2fd      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f16:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	d15b      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8005f1e:	4b4f      	ldr	r3, [pc, #316]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d117      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f30:	4b4a      	ldr	r3, [pc, #296]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8005f3c:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	0e1b      	lsrs	r3, r3, #24
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	e006      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8005f48:	4b44      	ldr	r3, [pc, #272]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	0e1b      	lsrs	r3, r3, #24
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	4a43      	ldr	r2, [pc, #268]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8005f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5e:	e2d6      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005f60:	4b3e      	ldr	r3, [pc, #248]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6e:	d112      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f76:	d10e      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f78:	4b38      	ldr	r3, [pc, #224]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f86:	d102      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8005f88:	23fa      	movs	r3, #250	; 0xfa
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f8c:	e2bf      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f94:	e2bb      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005f96:	4b31      	ldr	r3, [pc, #196]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005faa:	d102      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8005fac:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	e2ad      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc6:	d103      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8005fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	e29e      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	e29b      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fda:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	d162      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005fe2:	4b1e      	ldr	r3, [pc, #120]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d117      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006000:	4b16      	ldr	r3, [pc, #88]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	0e1b      	lsrs	r3, r3, #24
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	e006      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800600e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006012:	041b      	lsls	r3, r3, #16
 8006014:	0e1b      	lsrs	r3, r3, #24
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a12      	ldr	r2, [pc, #72]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	e274      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800602a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800602e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006032:	d119      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603a:	d115      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800603e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800604a:	d102      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800604c:	23fa      	movs	r3, #250	; 0xfa
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006050:	e25d      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006052:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006058:	e259      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800605a:	bf00      	nop
 800605c:	46020c00 	.word	0x46020c00
 8006060:	00f42400 	.word	0x00f42400
 8006064:	08007f10 	.word	0x08007f10
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006068:	4b9d      	ldr	r3, [pc, #628]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006074:	d106      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607c:	d102      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800607e:	4b99      	ldr	r3, [pc, #612]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	e244      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006084:	4b96      	ldr	r3, [pc, #600]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d107      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006098:	d103      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	e235      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
 80060a6:	e232      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80060a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80060b0:	430b      	orrs	r3, r1
 80060b2:	d147      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060b4:	4b8a      	ldr	r3, [pc, #552]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fd fe51 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80060ca:	6378      	str	r0, [r7, #52]	; 0x34
 80060cc:	e21f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80060ce:	4b84      	ldr	r3, [pc, #528]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060dc:	d112      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e4:	d10e      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80060e6:	4b7e      	ldr	r3, [pc, #504]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80060e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060f4:	d102      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80060f6:	23fa      	movs	r3, #250	; 0xfa
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80060fa:	e208      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80060fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006100:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006102:	e204      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006104:	4b76      	ldr	r3, [pc, #472]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006110:	d106      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006118:	d102      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800611a:	4b72      	ldr	r3, [pc, #456]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	e1f6      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006120:	4b6f      	ldr	r3, [pc, #444]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b02      	cmp	r3, #2
 800612c:	d107      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006134:	d103      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
 800613c:	e1e7      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
 8006142:	e1e4      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006148:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800614c:	430b      	orrs	r3, r1
 800614e:	d12d      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006150:	4b63      	ldr	r3, [pc, #396]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006156:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800615a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800615c:	4b60      	ldr	r3, [pc, #384]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006168:	d105      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006170:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
 8006174:	e1cb      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800617e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fc74 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e1bf      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006194:	d107      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006196:	f107 0318 	add.w	r3, r7, #24
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fdce 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
 80061a4:	e1b3      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
 80061aa:	e1b0      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80061ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80061b4:	430b      	orrs	r3, r1
 80061b6:	d14d      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80061b8:	4b49      	ldr	r3, [pc, #292]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80061ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061ca:	d028      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d2:	d83c      	bhi.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061da:	d013      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e2:	d834      	bhi.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f0:	d004      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80061f2:	e02c      	b.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fd fdce 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 80061f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80061fa:	e188      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80061fc:	f7fd fc94 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8006200:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006202:	e184      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006204:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006210:	d102      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8006212:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006216:	e17a      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800621c:	e177      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800621e:	4b30      	ldr	r3, [pc, #192]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800622a:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	0e1b      	lsrs	r3, r3, #24
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	0e1b      	lsrs	r3, r3, #24
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	4a28      	ldr	r2, [pc, #160]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800624c:	e15f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006252:	e15c      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006258:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800625c:	430b      	orrs	r3, r1
 800625e:	d154      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006260:	4b1f      	ldr	r3, [pc, #124]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006272:	d028      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800627a:	d843      	bhi.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006282:	d013      	beq.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800628a:	d83b      	bhi.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d004      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800629a:	e033      	b.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fd fd66 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80062a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062a2:	e134      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80062a4:	f7fd fc40 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80062a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80062aa:	e130      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b8:	d102      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062be:	e126      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062c4:	e123      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00c      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0e1b      	lsrs	r3, r3, #24
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	e00d      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80062de:	bf00      	nop
 80062e0:	46020c00 	.word	0x46020c00
 80062e4:	00f42400 	.word	0x00f42400
 80062e8:	08007f10 	.word	0x08007f10
 80062ec:	4b8a      	ldr	r3, [pc, #552]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80062ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	4a88      	ldr	r2, [pc, #544]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006302:	e104      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006308:	e101      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006312:	430b      	orrs	r3, r1
 8006314:	d16e      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006316:	4b80      	ldr	r3, [pc, #512]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800631c:	f003 0318 	and.w	r3, r3, #24
 8006320:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2b18      	cmp	r3, #24
 8006326:	d862      	bhi.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006395 	.word	0x08006395
 8006334:	080063ef 	.word	0x080063ef
 8006338:	080063ef 	.word	0x080063ef
 800633c:	080063ef 	.word	0x080063ef
 8006340:	080063ef 	.word	0x080063ef
 8006344:	080063ef 	.word	0x080063ef
 8006348:	080063ef 	.word	0x080063ef
 800634c:	080063ef 	.word	0x080063ef
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063ef 	.word	0x080063ef
 8006358:	080063ef 	.word	0x080063ef
 800635c:	080063ef 	.word	0x080063ef
 8006360:	080063ef 	.word	0x080063ef
 8006364:	080063ef 	.word	0x080063ef
 8006368:	080063ef 	.word	0x080063ef
 800636c:	080063ef 	.word	0x080063ef
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063ef 	.word	0x080063ef
 8006378:	080063ef 	.word	0x080063ef
 800637c:	080063ef 	.word	0x080063ef
 8006380:	080063ef 	.word	0x080063ef
 8006384:	080063ef 	.word	0x080063ef
 8006388:	080063ef 	.word	0x080063ef
 800638c:	080063ef 	.word	0x080063ef
 8006390:	080063bf 	.word	0x080063bf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006394:	f7fd fd12 	bl	8003dbc <HAL_RCC_GetPCLK3Freq>
 8006398:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800639a:	e0b8      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800639c:	f7fd fbc4 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 80063a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80063a2:	e0b4      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063a4:	4b5c      	ldr	r3, [pc, #368]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b0:	d102      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80063b2:	4b5b      	ldr	r3, [pc, #364]	; (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063b6:	e0aa      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063bc:	e0a7      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063be:	4b56      	ldr	r3, [pc, #344]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80063ca:	4b53      	ldr	r3, [pc, #332]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0e1b      	lsrs	r3, r3, #24
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	e006      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80063d6:	4b50      	ldr	r3, [pc, #320]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80063d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063dc:	041b      	lsls	r3, r3, #16
 80063de:	0e1b      	lsrs	r3, r3, #24
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	4a4d      	ldr	r2, [pc, #308]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80063e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ec:	e08f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063f2:	e08c      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80063f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80063fc:	430b      	orrs	r3, r1
 80063fe:	d14c      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006400:	4b45      	ldr	r3, [pc, #276]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006402:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006406:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800640a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006412:	d013      	beq.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800641a:	d83b      	bhi.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006422:	d013      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800642a:	d833      	bhi.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d014      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006438:	d014      	beq.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800643a:	e02b      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643c:	f107 0318 	add.w	r3, r7, #24
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fc7b 	bl	8004d3c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800644a:	e060      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800644c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fb0d 	bl	8004a70 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800645a:	e058      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800645c:	f7fd fb64 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8006460:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006462:	e054      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006464:	4b2c      	ldr	r3, [pc, #176]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006470:	4b29      	ldr	r3, [pc, #164]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0e1b      	lsrs	r3, r3, #24
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	e006      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800647c:	4b26      	ldr	r3, [pc, #152]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800647e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800648c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006492:	e03c      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006498:	e039      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800649a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80064a2:	430b      	orrs	r3, r1
 80064a4:	d131      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80064a6:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80064b2:	4b19      	ldr	r3, [pc, #100]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d106      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
 80064cc:	e01f      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80064ce:	4b12      	ldr	r3, [pc, #72]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064dc:	d112      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	d10e      	bne.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064e6:	4b0c      	ldr	r3, [pc, #48]	; (8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80064e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f4:	d102      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80064f6:	23fa      	movs	r3, #250	; 0xfa
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80064fa:	e008      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80064fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006502:	e004      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
 8006508:	e001      	b.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006510:	4618      	mov	r0, r3
 8006512:	3738      	adds	r7, #56	; 0x38
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	46020c00 	.word	0x46020c00
 800651c:	08007f10 	.word	0x08007f10
 8006520:	00f42400 	.word	0x00f42400

08006524 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800652c:	4b47      	ldr	r3, [pc, #284]	; (800664c <RCCEx_PLL2_Config+0x128>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a46      	ldr	r2, [pc, #280]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006536:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006538:	f7fa ff32 	bl	80013a0 <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800653e:	e008      	b.n	8006552 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006540:	f7fa ff2e 	bl	80013a0 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e077      	b.n	8006642 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800655e:	4b3b      	ldr	r3, [pc, #236]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6811      	ldr	r1, [r2, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6852      	ldr	r2, [r2, #4]
 8006572:	3a01      	subs	r2, #1
 8006574:	0212      	lsls	r2, r2, #8
 8006576:	430a      	orrs	r2, r1
 8006578:	4934      	ldr	r1, [pc, #208]	; (800664c <RCCEx_PLL2_Config+0x128>)
 800657a:	4313      	orrs	r3, r2
 800657c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800657e:	4b33      	ldr	r3, [pc, #204]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006582:	4b33      	ldr	r3, [pc, #204]	; (8006650 <RCCEx_PLL2_Config+0x12c>)
 8006584:	4013      	ands	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6892      	ldr	r2, [r2, #8]
 800658a:	3a01      	subs	r2, #1
 800658c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68d2      	ldr	r2, [r2, #12]
 8006594:	3a01      	subs	r2, #1
 8006596:	0252      	lsls	r2, r2, #9
 8006598:	b292      	uxth	r2, r2
 800659a:	4311      	orrs	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6912      	ldr	r2, [r2, #16]
 80065a0:	3a01      	subs	r2, #1
 80065a2:	0412      	lsls	r2, r2, #16
 80065a4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80065a8:	4311      	orrs	r1, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6952      	ldr	r2, [r2, #20]
 80065ae:	3a01      	subs	r2, #1
 80065b0:	0612      	lsls	r2, r2, #24
 80065b2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80065b6:	430a      	orrs	r2, r1
 80065b8:	4924      	ldr	r1, [pc, #144]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80065be:	4b23      	ldr	r3, [pc, #140]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	f023 020c 	bic.w	r2, r3, #12
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	4920      	ldr	r1, [pc, #128]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80065d0:	4b1e      	ldr	r3, [pc, #120]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	491c      	ldr	r1, [pc, #112]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80065de:	4b1b      	ldr	r3, [pc, #108]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	4a1a      	ldr	r2, [pc, #104]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065e4:	f023 0310 	bic.w	r3, r3, #16
 80065e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	69d2      	ldr	r2, [r2, #28]
 80065fa:	00d2      	lsls	r2, r2, #3
 80065fc:	4913      	ldr	r1, [pc, #76]	; (800664c <RCCEx_PLL2_Config+0x128>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006602:	4b12      	ldr	r3, [pc, #72]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006608:	f043 0310 	orr.w	r3, r3, #16
 800660c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a0e      	ldr	r2, [pc, #56]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006618:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800661a:	f7fa fec1 	bl	80013a0 <HAL_GetTick>
 800661e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006620:	e008      	b.n	8006634 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006622:	f7fa febd 	bl	80013a0 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e006      	b.n	8006642 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <RCCEx_PLL2_Config+0x128>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006640:	2300      	movs	r3, #0

}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	46020c00 	.word	0x46020c00
 8006650:	80800000 	.word	0x80800000

08006654 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800665c:	4b47      	ldr	r3, [pc, #284]	; (800677c <RCCEx_PLL3_Config+0x128>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a46      	ldr	r2, [pc, #280]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006666:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006668:	f7fa fe9a 	bl	80013a0 <HAL_GetTick>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800666e:	e008      	b.n	8006682 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006670:	f7fa fe96 	bl	80013a0 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e077      	b.n	8006772 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006682:	4b3e      	ldr	r3, [pc, #248]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800668e:	4b3b      	ldr	r3, [pc, #236]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6852      	ldr	r2, [r2, #4]
 80066a2:	3a01      	subs	r2, #1
 80066a4:	0212      	lsls	r2, r2, #8
 80066a6:	430a      	orrs	r2, r1
 80066a8:	4934      	ldr	r1, [pc, #208]	; (800677c <RCCEx_PLL3_Config+0x128>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	630b      	str	r3, [r1, #48]	; 0x30
 80066ae:	4b33      	ldr	r3, [pc, #204]	; (800677c <RCCEx_PLL3_Config+0x128>)
 80066b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066b2:	4b33      	ldr	r3, [pc, #204]	; (8006780 <RCCEx_PLL3_Config+0x12c>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	3a01      	subs	r2, #1
 80066bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68d2      	ldr	r2, [r2, #12]
 80066c4:	3a01      	subs	r2, #1
 80066c6:	0252      	lsls	r2, r2, #9
 80066c8:	b292      	uxth	r2, r2
 80066ca:	4311      	orrs	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6912      	ldr	r2, [r2, #16]
 80066d0:	3a01      	subs	r2, #1
 80066d2:	0412      	lsls	r2, r2, #16
 80066d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80066d8:	4311      	orrs	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6952      	ldr	r2, [r2, #20]
 80066de:	3a01      	subs	r2, #1
 80066e0:	0612      	lsls	r2, r2, #24
 80066e2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80066e6:	430a      	orrs	r2, r1
 80066e8:	4924      	ldr	r1, [pc, #144]	; (800677c <RCCEx_PLL3_Config+0x128>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80066ee:	4b23      	ldr	r3, [pc, #140]	; (800677c <RCCEx_PLL3_Config+0x128>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f023 020c 	bic.w	r2, r3, #12
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	4920      	ldr	r1, [pc, #128]	; (800677c <RCCEx_PLL3_Config+0x128>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	491c      	ldr	r1, [pc, #112]	; (800677c <RCCEx_PLL3_Config+0x128>)
 800670a:	4313      	orrs	r3, r2
 800670c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800670e:	4b1b      	ldr	r3, [pc, #108]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a1a      	ldr	r2, [pc, #104]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006714:	f023 0310 	bic.w	r3, r3, #16
 8006718:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <RCCEx_PLL3_Config+0x128>)
 800671c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	69d2      	ldr	r2, [r2, #28]
 800672a:	00d2      	lsls	r2, r2, #3
 800672c:	4913      	ldr	r1, [pc, #76]	; (800677c <RCCEx_PLL3_Config+0x128>)
 800672e:	4313      	orrs	r3, r2
 8006730:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006738:	f043 0310 	orr.w	r3, r3, #16
 800673c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a0e      	ldr	r2, [pc, #56]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006748:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800674a:	f7fa fe29 	bl	80013a0 <HAL_GetTick>
 800674e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006750:	e008      	b.n	8006764 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006752:	f7fa fe25 	bl	80013a0 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e006      	b.n	8006772 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <RCCEx_PLL3_Config+0x128>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	46020c00 	.word	0x46020c00
 8006780:	80800000 	.word	0x80800000

08006784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e042      	b.n	800681c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679c:	2b00      	cmp	r3, #0
 800679e:	d106      	bne.n	80067ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fa fcef 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2224      	movs	r2, #36	; 0x24
 80067b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9b4 	bl	8006b34 <UART_SetConfig>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e022      	b.n	800681c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb4a 	bl	8006e78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fbd1 	bl	8006fbc <UART_CheckIdleState>
 800681a:	4603      	mov	r3, r0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683a:	2b20      	cmp	r3, #32
 800683c:	f040 8092 	bne.w	8006964 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_UART_Transmit+0x28>
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e08a      	b.n	8006966 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_UART_Transmit+0x3a>
 800685a:	2302      	movs	r3, #2
 800685c:	e083      	b.n	8006966 <HAL_UART_Transmit+0x142>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006870:	2b80      	cmp	r3, #128	; 0x80
 8006872:	d107      	bne.n	8006884 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006882:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2221      	movs	r2, #33	; 0x21
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006894:	f7fa fd84 	bl	80013a0 <HAL_GetTick>
 8006898:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d108      	bne.n	80068c6 <HAL_UART_Transmit+0xa2>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e003      	b.n	80068ce <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068d6:	e02c      	b.n	8006932 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2200      	movs	r2, #0
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fbb5 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e039      	b.n	8006966 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3302      	adds	r3, #2
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e007      	b.n	8006920 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3301      	adds	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1cc      	bne.n	80068d8 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb82 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b08a      	sub	sp, #40	; 0x28
 8006972:	af02      	add	r7, sp, #8
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	2b20      	cmp	r3, #32
 8006986:	f040 80cf 	bne.w	8006b28 <HAL_UART_Receive+0x1ba>
  {
    if ((pData == NULL) || (Size == 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_UART_Receive+0x28>
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e0c7      	b.n	8006b2a <HAL_UART_Receive+0x1bc>
    }

    __HAL_LOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Receive+0x3a>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0c0      	b.n	8006b2a <HAL_UART_Receive+0x1bc>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d107      	bne.n	80069ce <HAL_UART_Receive+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069cc:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2222      	movs	r2, #34	; 0x22
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e4:	f7fa fcdc 	bl	80013a0 <HAL_GetTick>
 80069e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	88fa      	ldrh	r2, [r7, #6]
 80069ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d10e      	bne.n	8006a22 <HAL_UART_Receive+0xb4>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <HAL_UART_Receive+0xaa>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a16:	e02d      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	22ff      	movs	r2, #255	; 0xff
 8006a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a20:	e028      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <HAL_UART_Receive+0xd8>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d104      	bne.n	8006a3c <HAL_UART_Receive+0xce>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	22ff      	movs	r2, #255	; 0xff
 8006a36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a3a:	e01b      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	227f      	movs	r2, #127	; 0x7f
 8006a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a44:	e016      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a4e:	d10d      	bne.n	8006a6c <HAL_UART_Receive+0xfe>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_UART_Receive+0xf4>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	227f      	movs	r2, #127	; 0x7f
 8006a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a60:	e008      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	223f      	movs	r2, #63	; 0x3f
 8006a66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a6a:	e003      	b.n	8006a74 <HAL_UART_Receive+0x106>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a84:	d108      	bne.n	8006a98 <HAL_UART_Receive+0x12a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <HAL_UART_Receive+0x12a>
    {
      pdata8bits  = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e003      	b.n	8006aa0 <HAL_UART_Receive+0x132>
    }
    else
    {
      pdata8bits  = pData;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006aa8:	e032      	b.n	8006b10 <HAL_UART_Receive+0x1a2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2120      	movs	r1, #32
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 facc 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_UART_Receive+0x156>
      {
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e032      	b.n	8006b2a <HAL_UART_Receive+0x1bc>
      }
      if (pdata8bits == NULL)
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	8a7b      	ldrh	r3, [r7, #18]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	3302      	adds	r3, #2
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e00c      	b.n	8006afe <HAL_UART_Receive+0x190>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	8a7b      	ldrh	r3, [r7, #18]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	4013      	ands	r3, r2
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	3301      	adds	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1c6      	bne.n	8006aaa <HAL_UART_Receive+0x13c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e000      	b.n	8006b2a <HAL_UART_Receive+0x1bc>
  }
  else
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
  }
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b38:	b094      	sub	sp, #80	; 0x50
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b7e      	ldr	r3, [pc, #504]	; (8006d44 <UART_SetConfig+0x210>)
 8006b4a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4977      	ldr	r1, [pc, #476]	; (8006d48 <UART_SetConfig+0x214>)
 8006b6c:	4019      	ands	r1, r3
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	68d9      	ldr	r1, [r3, #12]
 8006b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	ea40 0301 	orr.w	r3, r0, r1
 8006b8e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b6a      	ldr	r3, [pc, #424]	; (8006d44 <UART_SetConfig+0x210>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d009      	beq.n	8006bb4 <UART_SetConfig+0x80>
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b69      	ldr	r3, [pc, #420]	; (8006d4c <UART_SetConfig+0x218>)
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d004      	beq.n	8006bb4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8006bbe:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	f023 000f 	bic.w	r0, r3, #15
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	ea40 0301 	orr.w	r3, r0, r1
 8006be2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <UART_SetConfig+0x21c>)
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d102      	bne.n	8006bf4 <UART_SetConfig+0xc0>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bf2:	e029      	b.n	8006c48 <UART_SetConfig+0x114>
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b56      	ldr	r3, [pc, #344]	; (8006d54 <UART_SetConfig+0x220>)
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d102      	bne.n	8006c04 <UART_SetConfig+0xd0>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c02:	e021      	b.n	8006c48 <UART_SetConfig+0x114>
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <UART_SetConfig+0x224>)
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d102      	bne.n	8006c14 <UART_SetConfig+0xe0>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c12:	e019      	b.n	8006c48 <UART_SetConfig+0x114>
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b50      	ldr	r3, [pc, #320]	; (8006d5c <UART_SetConfig+0x228>)
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d102      	bne.n	8006c24 <UART_SetConfig+0xf0>
 8006c1e:	2308      	movs	r3, #8
 8006c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c22:	e011      	b.n	8006c48 <UART_SetConfig+0x114>
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b4d      	ldr	r3, [pc, #308]	; (8006d60 <UART_SetConfig+0x22c>)
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d102      	bne.n	8006c34 <UART_SetConfig+0x100>
 8006c2e:	2310      	movs	r3, #16
 8006c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c32:	e009      	b.n	8006c48 <UART_SetConfig+0x114>
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <UART_SetConfig+0x210>)
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d102      	bne.n	8006c44 <UART_SetConfig+0x110>
 8006c3e:	2320      	movs	r3, #32
 8006c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c42:	e001      	b.n	8006c48 <UART_SetConfig+0x114>
 8006c44:	2300      	movs	r3, #0
 8006c46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <UART_SetConfig+0x210>)
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d005      	beq.n	8006c5e <UART_SetConfig+0x12a>
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <UART_SetConfig+0x218>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f040 8085 	bne.w	8006d68 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c60:	2200      	movs	r2, #0
 8006c62:	623b      	str	r3, [r7, #32]
 8006c64:	627a      	str	r2, [r7, #36]	; 0x24
 8006c66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c6a:	f7fe fb33 	bl	80052d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c6e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80e8 	beq.w	8006e48 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	4a39      	ldr	r2, [pc, #228]	; (8006d64 <UART_SetConfig+0x230>)
 8006c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d305      	bcc.n	8006ca8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d903      	bls.n	8006cb0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006cae:	e048      	b.n	8006d42 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	61fa      	str	r2, [r7, #28]
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <UART_SetConfig+0x230>)
 8006cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	617a      	str	r2, [r7, #20]
 8006cca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cd2:	f7f9 facf 	bl	8000274 <__aeabi_uldivmod>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	020b      	lsls	r3, r1, #8
 8006ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cec:	0202      	lsls	r2, r0, #8
 8006cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf0:	6849      	ldr	r1, [r1, #4]
 8006cf2:	0849      	lsrs	r1, r1, #1
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	eb12 0804 	adds.w	r8, r2, r4
 8006cfe:	eb43 0905 	adc.w	r9, r3, r5
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	60fa      	str	r2, [r7, #12]
 8006d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 faae 	bl	8000274 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d26:	d308      	bcc.n	8006d3a <UART_SetConfig+0x206>
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2e:	d204      	bcs.n	8006d3a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d36:	60da      	str	r2, [r3, #12]
 8006d38:	e003      	b.n	8006d42 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8006d40:	e082      	b.n	8006e48 <UART_SetConfig+0x314>
 8006d42:	e081      	b.n	8006e48 <UART_SetConfig+0x314>
 8006d44:	46002400 	.word	0x46002400
 8006d48:	cfff69f3 	.word	0xcfff69f3
 8006d4c:	56002400 	.word	0x56002400
 8006d50:	40013800 	.word	0x40013800
 8006d54:	40004400 	.word	0x40004400
 8006d58:	40004800 	.word	0x40004800
 8006d5c:	40004c00 	.word	0x40004c00
 8006d60:	40005000 	.word	0x40005000
 8006d64:	08007fd0 	.word	0x08007fd0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d70:	d13c      	bne.n	8006dec <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d74:	2200      	movs	r2, #0
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	607a      	str	r2, [r7, #4]
 8006d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d7e:	f7fe faa9 	bl	80052d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d82:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d05e      	beq.n	8006e48 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	4a39      	ldr	r2, [pc, #228]	; (8006e74 <UART_SetConfig+0x340>)
 8006d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d94:	461a      	mov	r2, r3
 8006d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d9c:	005a      	lsls	r2, r3, #1
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	441a      	add	r2, r3
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	2b0f      	cmp	r3, #15
 8006db4:	d916      	bls.n	8006de4 <UART_SetConfig+0x2b0>
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbc:	d212      	bcs.n	8006de4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f023 030f 	bic.w	r3, r3, #15
 8006dc6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	e031      	b.n	8006e48 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006dea:	e02d      	b.n	8006e48 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dee:	2200      	movs	r2, #0
 8006df0:	469a      	mov	sl, r3
 8006df2:	4693      	mov	fp, r2
 8006df4:	4650      	mov	r0, sl
 8006df6:	4659      	mov	r1, fp
 8006df8:	f7fe fa6c 	bl	80052d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dfc:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d021      	beq.n	8006e48 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <UART_SetConfig+0x340>)
 8006e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	441a      	add	r2, r3
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2a:	2b0f      	cmp	r3, #15
 8006e2c:	d909      	bls.n	8006e42 <UART_SetConfig+0x30e>
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e34:	d205      	bcs.n	8006e42 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	e002      	b.n	8006e48 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	2200      	movs	r2, #0
 8006e62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3750      	adds	r7, #80	; 0x50
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e72:	bf00      	nop
 8006e74:	08007fd0 	.word	0x08007fd0

08006e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f76:	d10a      	bne.n	8006f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fcc:	f7fa f9e8 	bl	80013a0 <HAL_GetTick>
 8006fd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0308 	and.w	r3, r3, #8
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d10e      	bne.n	8006ffe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f82f 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e025      	b.n	800704a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b04      	cmp	r3, #4
 800700a:	d10e      	bne.n	800702a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800700c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f819 	bl	8007052 <UART_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e00f      	b.n	800704a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2220      	movs	r2, #32
 800702e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b09c      	sub	sp, #112	; 0x70
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007062:	e0a9      	b.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	f000 80a5 	beq.w	80071b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fa f997 	bl	80013a0 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <UART_WaitOnFlagUntilTimeout+0x32>
 800707e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007080:	2b00      	cmp	r3, #0
 8007082:	d140      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007094:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007098:	667b      	str	r3, [r7, #100]	; 0x64
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	663b      	str	r3, [r7, #96]	; 0x60
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3308      	adds	r3, #8
 80070d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e069      	b.n	80071da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d051      	beq.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800711e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007122:	d149      	bne.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800712c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e6      	bne.n	800712e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	613b      	str	r3, [r7, #16]
   return(result);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	66bb      	str	r3, [r7, #104]	; 0x68
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007180:	623a      	str	r2, [r7, #32]
 8007182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	69f9      	ldr	r1, [r7, #28]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	61bb      	str	r3, [r7, #24]
   return(result);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e5      	bne.n	8007160 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e010      	b.n	80071da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4013      	ands	r3, r2
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	bf0c      	ite	eq
 80071c8:	2301      	moveq	r3, #1
 80071ca:	2300      	movne	r3, #0
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	f43f af46 	beq.w	8007064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3770      	adds	r7, #112	; 0x70
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e027      	b.n	8007248 <HAL_UARTEx_DisableFifoMode+0x66>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2224      	movs	r2, #36	; 0x24
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007226:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007268:	2302      	movs	r3, #2
 800726a:	e02d      	b.n	80072c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2224      	movs	r2, #36	; 0x24
 8007278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f84f 	bl	800734c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e02d      	b.n	8007344 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f811 	bl	800734c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007358:	2b00      	cmp	r3, #0
 800735a:	d108      	bne.n	800736e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800736c:	e031      	b.n	80073d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800736e:	2308      	movs	r3, #8
 8007370:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007372:	2308      	movs	r3, #8
 8007374:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0e5b      	lsrs	r3, r3, #25
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	0f5b      	lsrs	r3, r3, #29
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	7b3a      	ldrb	r2, [r7, #12]
 800739a:	4911      	ldr	r1, [pc, #68]	; (80073e0 <UARTEx_SetNbDataToProcess+0x94>)
 800739c:	5c8a      	ldrb	r2, [r1, r2]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073a2:	7b3a      	ldrb	r2, [r7, #12]
 80073a4:	490f      	ldr	r1, [pc, #60]	; (80073e4 <UARTEx_SetNbDataToProcess+0x98>)
 80073a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	7b7a      	ldrb	r2, [r7, #13]
 80073b8:	4909      	ldr	r1, [pc, #36]	; (80073e0 <UARTEx_SetNbDataToProcess+0x94>)
 80073ba:	5c8a      	ldrb	r2, [r1, r2]
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073c0:	7b7a      	ldrb	r2, [r7, #13]
 80073c2:	4908      	ldr	r1, [pc, #32]	; (80073e4 <UARTEx_SetNbDataToProcess+0x98>)
 80073c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	08007fe8 	.word	0x08007fe8
 80073e4:	08007ff0 	.word	0x08007ff0

080073e8 <__errno>:
 80073e8:	4b01      	ldr	r3, [pc, #4]	; (80073f0 <__errno+0x8>)
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	20000020 	.word	0x20000020

080073f4 <__libc_init_array>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4d0d      	ldr	r5, [pc, #52]	; (800742c <__libc_init_array+0x38>)
 80073f8:	2600      	movs	r6, #0
 80073fa:	4c0d      	ldr	r4, [pc, #52]	; (8007430 <__libc_init_array+0x3c>)
 80073fc:	1b64      	subs	r4, r4, r5
 80073fe:	10a4      	asrs	r4, r4, #2
 8007400:	42a6      	cmp	r6, r4
 8007402:	d109      	bne.n	8007418 <__libc_init_array+0x24>
 8007404:	4d0b      	ldr	r5, [pc, #44]	; (8007434 <__libc_init_array+0x40>)
 8007406:	2600      	movs	r6, #0
 8007408:	4c0b      	ldr	r4, [pc, #44]	; (8007438 <__libc_init_array+0x44>)
 800740a:	f000 fd1b 	bl	8007e44 <_init>
 800740e:	1b64      	subs	r4, r4, r5
 8007410:	10a4      	asrs	r4, r4, #2
 8007412:	42a6      	cmp	r6, r4
 8007414:	d105      	bne.n	8007422 <__libc_init_array+0x2e>
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	f855 3b04 	ldr.w	r3, [r5], #4
 800741c:	3601      	adds	r6, #1
 800741e:	4798      	blx	r3
 8007420:	e7ee      	b.n	8007400 <__libc_init_array+0xc>
 8007422:	f855 3b04 	ldr.w	r3, [r5], #4
 8007426:	3601      	adds	r6, #1
 8007428:	4798      	blx	r3
 800742a:	e7f2      	b.n	8007412 <__libc_init_array+0x1e>
 800742c:	08008064 	.word	0x08008064
 8007430:	08008064 	.word	0x08008064
 8007434:	08008064 	.word	0x08008064
 8007438:	08008068 	.word	0x08008068

0800743c <memset>:
 800743c:	4402      	add	r2, r0
 800743e:	4603      	mov	r3, r0
 8007440:	4293      	cmp	r3, r2
 8007442:	d100      	bne.n	8007446 <memset+0xa>
 8007444:	4770      	bx	lr
 8007446:	f803 1b01 	strb.w	r1, [r3], #1
 800744a:	e7f9      	b.n	8007440 <memset+0x4>

0800744c <_puts_r>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	460e      	mov	r6, r1
 8007450:	4605      	mov	r5, r0
 8007452:	b118      	cbz	r0, 800745c <_puts_r+0x10>
 8007454:	6983      	ldr	r3, [r0, #24]
 8007456:	b90b      	cbnz	r3, 800745c <_puts_r+0x10>
 8007458:	f000 fa46 	bl	80078e8 <__sinit>
 800745c:	69ab      	ldr	r3, [r5, #24]
 800745e:	68ac      	ldr	r4, [r5, #8]
 8007460:	b913      	cbnz	r3, 8007468 <_puts_r+0x1c>
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fa40 	bl	80078e8 <__sinit>
 8007468:	4b2c      	ldr	r3, [pc, #176]	; (800751c <_puts_r+0xd0>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d120      	bne.n	80074b0 <_puts_r+0x64>
 800746e:	686c      	ldr	r4, [r5, #4]
 8007470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d405      	bmi.n	8007482 <_puts_r+0x36>
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	0598      	lsls	r0, r3, #22
 800747a:	d402      	bmi.n	8007482 <_puts_r+0x36>
 800747c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800747e:	f000 fad1 	bl	8007a24 <__retarget_lock_acquire_recursive>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	d51d      	bpl.n	80074c4 <_puts_r+0x78>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	b1db      	cbz	r3, 80074c4 <_puts_r+0x78>
 800748c:	3e01      	subs	r6, #1
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007494:	3b01      	subs	r3, #1
 8007496:	60a3      	str	r3, [r4, #8]
 8007498:	bb39      	cbnz	r1, 80074ea <_puts_r+0x9e>
 800749a:	2b00      	cmp	r3, #0
 800749c:	da38      	bge.n	8007510 <_puts_r+0xc4>
 800749e:	4622      	mov	r2, r4
 80074a0:	210a      	movs	r1, #10
 80074a2:	4628      	mov	r0, r5
 80074a4:	f000 f848 	bl	8007538 <__swbuf_r>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d011      	beq.n	80074d0 <_puts_r+0x84>
 80074ac:	250a      	movs	r5, #10
 80074ae:	e011      	b.n	80074d4 <_puts_r+0x88>
 80074b0:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <_puts_r+0xd4>)
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d101      	bne.n	80074ba <_puts_r+0x6e>
 80074b6:	68ac      	ldr	r4, [r5, #8]
 80074b8:	e7da      	b.n	8007470 <_puts_r+0x24>
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <_puts_r+0xd8>)
 80074bc:	429c      	cmp	r4, r3
 80074be:	bf08      	it	eq
 80074c0:	68ec      	ldreq	r4, [r5, #12]
 80074c2:	e7d5      	b.n	8007470 <_puts_r+0x24>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f888 	bl	80075dc <__swsetup_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d0dd      	beq.n	800748c <_puts_r+0x40>
 80074d0:	f04f 35ff 	mov.w	r5, #4294967295
 80074d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	d405      	bmi.n	80074e6 <_puts_r+0x9a>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	059b      	lsls	r3, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_puts_r+0x9a>
 80074e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e2:	f000 faa0 	bl	8007a26 <__retarget_lock_release_recursive>
 80074e6:	4628      	mov	r0, r5
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da04      	bge.n	80074f8 <_puts_r+0xac>
 80074ee:	69a2      	ldr	r2, [r4, #24]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	dc06      	bgt.n	8007502 <_puts_r+0xb6>
 80074f4:	290a      	cmp	r1, #10
 80074f6:	d004      	beq.n	8007502 <_puts_r+0xb6>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	6022      	str	r2, [r4, #0]
 80074fe:	7019      	strb	r1, [r3, #0]
 8007500:	e7c5      	b.n	800748e <_puts_r+0x42>
 8007502:	4622      	mov	r2, r4
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f817 	bl	8007538 <__swbuf_r>
 800750a:	3001      	adds	r0, #1
 800750c:	d1bf      	bne.n	800748e <_puts_r+0x42>
 800750e:	e7df      	b.n	80074d0 <_puts_r+0x84>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	250a      	movs	r5, #10
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	6022      	str	r2, [r4, #0]
 8007518:	701d      	strb	r5, [r3, #0]
 800751a:	e7db      	b.n	80074d4 <_puts_r+0x88>
 800751c:	0800801c 	.word	0x0800801c
 8007520:	0800803c 	.word	0x0800803c
 8007524:	08007ffc 	.word	0x08007ffc

08007528 <puts>:
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <puts+0xc>)
 800752a:	4601      	mov	r1, r0
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	f7ff bf8d 	b.w	800744c <_puts_r>
 8007532:	bf00      	nop
 8007534:	20000020 	.word	0x20000020

08007538 <__swbuf_r>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	460e      	mov	r6, r1
 800753c:	4614      	mov	r4, r2
 800753e:	4605      	mov	r5, r0
 8007540:	b118      	cbz	r0, 800754a <__swbuf_r+0x12>
 8007542:	6983      	ldr	r3, [r0, #24]
 8007544:	b90b      	cbnz	r3, 800754a <__swbuf_r+0x12>
 8007546:	f000 f9cf 	bl	80078e8 <__sinit>
 800754a:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <__swbuf_r+0x98>)
 800754c:	429c      	cmp	r4, r3
 800754e:	d12b      	bne.n	80075a8 <__swbuf_r+0x70>
 8007550:	686c      	ldr	r4, [r5, #4]
 8007552:	69a3      	ldr	r3, [r4, #24]
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	071a      	lsls	r2, r3, #28
 800755a:	d52f      	bpl.n	80075bc <__swbuf_r+0x84>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b36b      	cbz	r3, 80075bc <__swbuf_r+0x84>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	b2f6      	uxtb	r6, r6
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	4637      	mov	r7, r6
 8007568:	1ac0      	subs	r0, r0, r3
 800756a:	6963      	ldr	r3, [r4, #20]
 800756c:	4283      	cmp	r3, r0
 800756e:	dc04      	bgt.n	800757a <__swbuf_r+0x42>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f924 	bl	80077c0 <_fflush_r>
 8007578:	bb30      	cbnz	r0, 80075c8 <__swbuf_r+0x90>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	3001      	adds	r0, #1
 800757e:	3b01      	subs	r3, #1
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	701e      	strb	r6, [r3, #0]
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	4283      	cmp	r3, r0
 800758e:	d004      	beq.n	800759a <__swbuf_r+0x62>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d506      	bpl.n	80075a4 <__swbuf_r+0x6c>
 8007596:	2e0a      	cmp	r6, #10
 8007598:	d104      	bne.n	80075a4 <__swbuf_r+0x6c>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f90f 	bl	80077c0 <_fflush_r>
 80075a2:	b988      	cbnz	r0, 80075c8 <__swbuf_r+0x90>
 80075a4:	4638      	mov	r0, r7
 80075a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <__swbuf_r+0x9c>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d101      	bne.n	80075b2 <__swbuf_r+0x7a>
 80075ae:	68ac      	ldr	r4, [r5, #8]
 80075b0:	e7cf      	b.n	8007552 <__swbuf_r+0x1a>
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <__swbuf_r+0xa0>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	bf08      	it	eq
 80075b8:	68ec      	ldreq	r4, [r5, #12]
 80075ba:	e7ca      	b.n	8007552 <__swbuf_r+0x1a>
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f80c 	bl	80075dc <__swsetup_r>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d0cb      	beq.n	8007560 <__swbuf_r+0x28>
 80075c8:	f04f 37ff 	mov.w	r7, #4294967295
 80075cc:	e7ea      	b.n	80075a4 <__swbuf_r+0x6c>
 80075ce:	bf00      	nop
 80075d0:	0800801c 	.word	0x0800801c
 80075d4:	0800803c 	.word	0x0800803c
 80075d8:	08007ffc 	.word	0x08007ffc

080075dc <__swsetup_r>:
 80075dc:	4b32      	ldr	r3, [pc, #200]	; (80076a8 <__swsetup_r+0xcc>)
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	4606      	mov	r6, r0
 80075e4:	460c      	mov	r4, r1
 80075e6:	b125      	cbz	r5, 80075f2 <__swsetup_r+0x16>
 80075e8:	69ab      	ldr	r3, [r5, #24]
 80075ea:	b913      	cbnz	r3, 80075f2 <__swsetup_r+0x16>
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 f97b 	bl	80078e8 <__sinit>
 80075f2:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <__swsetup_r+0xd0>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	d10f      	bne.n	8007618 <__swsetup_r+0x3c>
 80075f8:	686c      	ldr	r4, [r5, #4]
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007600:	0719      	lsls	r1, r3, #28
 8007602:	d42c      	bmi.n	800765e <__swsetup_r+0x82>
 8007604:	06dd      	lsls	r5, r3, #27
 8007606:	d411      	bmi.n	800762c <__swsetup_r+0x50>
 8007608:	2309      	movs	r3, #9
 800760a:	6033      	str	r3, [r6, #0]
 800760c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	81a3      	strh	r3, [r4, #12]
 8007616:	e03e      	b.n	8007696 <__swsetup_r+0xba>
 8007618:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <__swsetup_r+0xd4>)
 800761a:	429c      	cmp	r4, r3
 800761c:	d101      	bne.n	8007622 <__swsetup_r+0x46>
 800761e:	68ac      	ldr	r4, [r5, #8]
 8007620:	e7eb      	b.n	80075fa <__swsetup_r+0x1e>
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <__swsetup_r+0xd8>)
 8007624:	429c      	cmp	r4, r3
 8007626:	bf08      	it	eq
 8007628:	68ec      	ldreq	r4, [r5, #12]
 800762a:	e7e6      	b.n	80075fa <__swsetup_r+0x1e>
 800762c:	0758      	lsls	r0, r3, #29
 800762e:	d512      	bpl.n	8007656 <__swsetup_r+0x7a>
 8007630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007632:	b141      	cbz	r1, 8007646 <__swsetup_r+0x6a>
 8007634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007638:	4299      	cmp	r1, r3
 800763a:	d002      	beq.n	8007642 <__swsetup_r+0x66>
 800763c:	4630      	mov	r0, r6
 800763e:	f000 fa59 	bl	8007af4 <_free_r>
 8007642:	2300      	movs	r3, #0
 8007644:	6363      	str	r3, [r4, #52]	; 0x34
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	2300      	movs	r3, #0
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	b94b      	cbnz	r3, 8007676 <__swsetup_r+0x9a>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766c:	d003      	beq.n	8007676 <__swsetup_r+0x9a>
 800766e:	4621      	mov	r1, r4
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f9ff 	bl	8007a74 <__smakebuf_r>
 8007676:	89a0      	ldrh	r0, [r4, #12]
 8007678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800767c:	f010 0301 	ands.w	r3, r0, #1
 8007680:	d00a      	beq.n	8007698 <__swsetup_r+0xbc>
 8007682:	2300      	movs	r3, #0
 8007684:	60a3      	str	r3, [r4, #8]
 8007686:	6963      	ldr	r3, [r4, #20]
 8007688:	425b      	negs	r3, r3
 800768a:	61a3      	str	r3, [r4, #24]
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	b943      	cbnz	r3, 80076a2 <__swsetup_r+0xc6>
 8007690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007694:	d1ba      	bne.n	800760c <__swsetup_r+0x30>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	0781      	lsls	r1, r0, #30
 800769a:	bf58      	it	pl
 800769c:	6963      	ldrpl	r3, [r4, #20]
 800769e:	60a3      	str	r3, [r4, #8]
 80076a0:	e7f4      	b.n	800768c <__swsetup_r+0xb0>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7f7      	b.n	8007696 <__swsetup_r+0xba>
 80076a6:	bf00      	nop
 80076a8:	20000020 	.word	0x20000020
 80076ac:	0800801c 	.word	0x0800801c
 80076b0:	0800803c 	.word	0x0800803c
 80076b4:	08007ffc 	.word	0x08007ffc

080076b8 <__sflush_r>:
 80076b8:	898a      	ldrh	r2, [r1, #12]
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	4605      	mov	r5, r0
 80076c0:	0710      	lsls	r0, r2, #28
 80076c2:	460c      	mov	r4, r1
 80076c4:	d458      	bmi.n	8007778 <__sflush_r+0xc0>
 80076c6:	684b      	ldr	r3, [r1, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dc05      	bgt.n	80076d8 <__sflush_r+0x20>
 80076cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc02      	bgt.n	80076d8 <__sflush_r+0x20>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d0f9      	beq.n	80076d2 <__sflush_r+0x1a>
 80076de:	2300      	movs	r3, #0
 80076e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e4:	682f      	ldr	r7, [r5, #0]
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	d032      	beq.n	8007750 <__sflush_r+0x98>
 80076ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	075a      	lsls	r2, r3, #29
 80076f0:	d505      	bpl.n	80076fe <__sflush_r+0x46>
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	1ac0      	subs	r0, r0, r3
 80076f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076f8:	b10b      	cbz	r3, 80076fe <__sflush_r+0x46>
 80076fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076fc:	1ac0      	subs	r0, r0, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	4602      	mov	r2, r0
 8007702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007704:	4628      	mov	r0, r5
 8007706:	6a21      	ldr	r1, [r4, #32]
 8007708:	47b0      	blx	r6
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	d106      	bne.n	800771e <__sflush_r+0x66>
 8007710:	6829      	ldr	r1, [r5, #0]
 8007712:	291d      	cmp	r1, #29
 8007714:	d82c      	bhi.n	8007770 <__sflush_r+0xb8>
 8007716:	4a29      	ldr	r2, [pc, #164]	; (80077bc <__sflush_r+0x104>)
 8007718:	40ca      	lsrs	r2, r1
 800771a:	07d6      	lsls	r6, r2, #31
 800771c:	d528      	bpl.n	8007770 <__sflush_r+0xb8>
 800771e:	2200      	movs	r2, #0
 8007720:	04d9      	lsls	r1, r3, #19
 8007722:	6062      	str	r2, [r4, #4]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	d504      	bpl.n	8007734 <__sflush_r+0x7c>
 800772a:	1c42      	adds	r2, r0, #1
 800772c:	d101      	bne.n	8007732 <__sflush_r+0x7a>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b903      	cbnz	r3, 8007734 <__sflush_r+0x7c>
 8007732:	6560      	str	r0, [r4, #84]	; 0x54
 8007734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007736:	602f      	str	r7, [r5, #0]
 8007738:	2900      	cmp	r1, #0
 800773a:	d0ca      	beq.n	80076d2 <__sflush_r+0x1a>
 800773c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007740:	4299      	cmp	r1, r3
 8007742:	d002      	beq.n	800774a <__sflush_r+0x92>
 8007744:	4628      	mov	r0, r5
 8007746:	f000 f9d5 	bl	8007af4 <_free_r>
 800774a:	2000      	movs	r0, #0
 800774c:	6360      	str	r0, [r4, #52]	; 0x34
 800774e:	e7c1      	b.n	80076d4 <__sflush_r+0x1c>
 8007750:	6a21      	ldr	r1, [r4, #32]
 8007752:	2301      	movs	r3, #1
 8007754:	4628      	mov	r0, r5
 8007756:	47b0      	blx	r6
 8007758:	1c41      	adds	r1, r0, #1
 800775a:	d1c7      	bne.n	80076ec <__sflush_r+0x34>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0c4      	beq.n	80076ec <__sflush_r+0x34>
 8007762:	2b1d      	cmp	r3, #29
 8007764:	d001      	beq.n	800776a <__sflush_r+0xb2>
 8007766:	2b16      	cmp	r3, #22
 8007768:	d101      	bne.n	800776e <__sflush_r+0xb6>
 800776a:	602f      	str	r7, [r5, #0]
 800776c:	e7b1      	b.n	80076d2 <__sflush_r+0x1a>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	e7ad      	b.n	80076d4 <__sflush_r+0x1c>
 8007778:	690f      	ldr	r7, [r1, #16]
 800777a:	2f00      	cmp	r7, #0
 800777c:	d0a9      	beq.n	80076d2 <__sflush_r+0x1a>
 800777e:	0793      	lsls	r3, r2, #30
 8007780:	680e      	ldr	r6, [r1, #0]
 8007782:	600f      	str	r7, [r1, #0]
 8007784:	bf0c      	ite	eq
 8007786:	694b      	ldreq	r3, [r1, #20]
 8007788:	2300      	movne	r3, #0
 800778a:	eba6 0807 	sub.w	r8, r6, r7
 800778e:	608b      	str	r3, [r1, #8]
 8007790:	f1b8 0f00 	cmp.w	r8, #0
 8007794:	dd9d      	ble.n	80076d2 <__sflush_r+0x1a>
 8007796:	4643      	mov	r3, r8
 8007798:	463a      	mov	r2, r7
 800779a:	6a21      	ldr	r1, [r4, #32]
 800779c:	4628      	mov	r0, r5
 800779e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a0:	47b0      	blx	r6
 80077a2:	2800      	cmp	r0, #0
 80077a4:	dc06      	bgt.n	80077b4 <__sflush_r+0xfc>
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	e78f      	b.n	80076d4 <__sflush_r+0x1c>
 80077b4:	4407      	add	r7, r0
 80077b6:	eba8 0800 	sub.w	r8, r8, r0
 80077ba:	e7e9      	b.n	8007790 <__sflush_r+0xd8>
 80077bc:	20400001 	.word	0x20400001

080077c0 <_fflush_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	690b      	ldr	r3, [r1, #16]
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b913      	cbnz	r3, 80077d0 <_fflush_r+0x10>
 80077ca:	2500      	movs	r5, #0
 80077cc:	4628      	mov	r0, r5
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	b118      	cbz	r0, 80077da <_fflush_r+0x1a>
 80077d2:	6983      	ldr	r3, [r0, #24]
 80077d4:	b90b      	cbnz	r3, 80077da <_fflush_r+0x1a>
 80077d6:	f000 f887 	bl	80078e8 <__sinit>
 80077da:	4b14      	ldr	r3, [pc, #80]	; (800782c <_fflush_r+0x6c>)
 80077dc:	429c      	cmp	r4, r3
 80077de:	d11b      	bne.n	8007818 <_fflush_r+0x58>
 80077e0:	686c      	ldr	r4, [r5, #4]
 80077e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ef      	beq.n	80077ca <_fflush_r+0xa>
 80077ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077ec:	07d0      	lsls	r0, r2, #31
 80077ee:	d404      	bmi.n	80077fa <_fflush_r+0x3a>
 80077f0:	0599      	lsls	r1, r3, #22
 80077f2:	d402      	bmi.n	80077fa <_fflush_r+0x3a>
 80077f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f6:	f000 f915 	bl	8007a24 <__retarget_lock_acquire_recursive>
 80077fa:	4628      	mov	r0, r5
 80077fc:	4621      	mov	r1, r4
 80077fe:	f7ff ff5b 	bl	80076b8 <__sflush_r>
 8007802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007804:	4605      	mov	r5, r0
 8007806:	07da      	lsls	r2, r3, #31
 8007808:	d4e0      	bmi.n	80077cc <_fflush_r+0xc>
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	059b      	lsls	r3, r3, #22
 800780e:	d4dd      	bmi.n	80077cc <_fflush_r+0xc>
 8007810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007812:	f000 f908 	bl	8007a26 <__retarget_lock_release_recursive>
 8007816:	e7d9      	b.n	80077cc <_fflush_r+0xc>
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <_fflush_r+0x70>)
 800781a:	429c      	cmp	r4, r3
 800781c:	d101      	bne.n	8007822 <_fflush_r+0x62>
 800781e:	68ac      	ldr	r4, [r5, #8]
 8007820:	e7df      	b.n	80077e2 <_fflush_r+0x22>
 8007822:	4b04      	ldr	r3, [pc, #16]	; (8007834 <_fflush_r+0x74>)
 8007824:	429c      	cmp	r4, r3
 8007826:	bf08      	it	eq
 8007828:	68ec      	ldreq	r4, [r5, #12]
 800782a:	e7da      	b.n	80077e2 <_fflush_r+0x22>
 800782c:	0800801c 	.word	0x0800801c
 8007830:	0800803c 	.word	0x0800803c
 8007834:	08007ffc 	.word	0x08007ffc

08007838 <std>:
 8007838:	2300      	movs	r3, #0
 800783a:	b510      	push	{r4, lr}
 800783c:	4604      	mov	r4, r0
 800783e:	6083      	str	r3, [r0, #8]
 8007840:	8181      	strh	r1, [r0, #12]
 8007842:	4619      	mov	r1, r3
 8007844:	6643      	str	r3, [r0, #100]	; 0x64
 8007846:	81c2      	strh	r2, [r0, #14]
 8007848:	2208      	movs	r2, #8
 800784a:	6183      	str	r3, [r0, #24]
 800784c:	e9c0 3300 	strd	r3, r3, [r0]
 8007850:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007854:	305c      	adds	r0, #92	; 0x5c
 8007856:	f7ff fdf1 	bl	800743c <memset>
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <std+0x38>)
 800785c:	6224      	str	r4, [r4, #32]
 800785e:	6263      	str	r3, [r4, #36]	; 0x24
 8007860:	4b04      	ldr	r3, [pc, #16]	; (8007874 <std+0x3c>)
 8007862:	62a3      	str	r3, [r4, #40]	; 0x28
 8007864:	4b04      	ldr	r3, [pc, #16]	; (8007878 <std+0x40>)
 8007866:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <std+0x44>)
 800786a:	6323      	str	r3, [r4, #48]	; 0x30
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	08007cd5 	.word	0x08007cd5
 8007874:	08007cf7 	.word	0x08007cf7
 8007878:	08007d2f 	.word	0x08007d2f
 800787c:	08007d53 	.word	0x08007d53

08007880 <_cleanup_r>:
 8007880:	4901      	ldr	r1, [pc, #4]	; (8007888 <_cleanup_r+0x8>)
 8007882:	f000 b8af 	b.w	80079e4 <_fwalk_reent>
 8007886:	bf00      	nop
 8007888:	080077c1 	.word	0x080077c1

0800788c <__sfmoreglue>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	2268      	movs	r2, #104	; 0x68
 8007890:	1e4d      	subs	r5, r1, #1
 8007892:	460e      	mov	r6, r1
 8007894:	4355      	muls	r5, r2
 8007896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800789a:	f000 f997 	bl	8007bcc <_malloc_r>
 800789e:	4604      	mov	r4, r0
 80078a0:	b140      	cbz	r0, 80078b4 <__sfmoreglue+0x28>
 80078a2:	2100      	movs	r1, #0
 80078a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a8:	e9c0 1600 	strd	r1, r6, [r0]
 80078ac:	300c      	adds	r0, #12
 80078ae:	60a0      	str	r0, [r4, #8]
 80078b0:	f7ff fdc4 	bl	800743c <memset>
 80078b4:	4620      	mov	r0, r4
 80078b6:	bd70      	pop	{r4, r5, r6, pc}

080078b8 <__sfp_lock_acquire>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__sfp_lock_acquire+0x8>)
 80078ba:	f000 b8b3 	b.w	8007a24 <__retarget_lock_acquire_recursive>
 80078be:	bf00      	nop
 80078c0:	2000a5c5 	.word	0x2000a5c5

080078c4 <__sfp_lock_release>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sfp_lock_release+0x8>)
 80078c6:	f000 b8ae 	b.w	8007a26 <__retarget_lock_release_recursive>
 80078ca:	bf00      	nop
 80078cc:	2000a5c5 	.word	0x2000a5c5

080078d0 <__sinit_lock_acquire>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sinit_lock_acquire+0x8>)
 80078d2:	f000 b8a7 	b.w	8007a24 <__retarget_lock_acquire_recursive>
 80078d6:	bf00      	nop
 80078d8:	2000a5c6 	.word	0x2000a5c6

080078dc <__sinit_lock_release>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__sinit_lock_release+0x8>)
 80078de:	f000 b8a2 	b.w	8007a26 <__retarget_lock_release_recursive>
 80078e2:	bf00      	nop
 80078e4:	2000a5c6 	.word	0x2000a5c6

080078e8 <__sinit>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4604      	mov	r4, r0
 80078ec:	f7ff fff0 	bl	80078d0 <__sinit_lock_acquire>
 80078f0:	69a3      	ldr	r3, [r4, #24]
 80078f2:	b11b      	cbz	r3, 80078fc <__sinit+0x14>
 80078f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f8:	f7ff bff0 	b.w	80078dc <__sinit_lock_release>
 80078fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007900:	6523      	str	r3, [r4, #80]	; 0x50
 8007902:	4620      	mov	r0, r4
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <__sinit+0x68>)
 8007906:	4a13      	ldr	r2, [pc, #76]	; (8007954 <__sinit+0x6c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	62a2      	str	r2, [r4, #40]	; 0x28
 800790c:	42a3      	cmp	r3, r4
 800790e:	bf04      	itt	eq
 8007910:	2301      	moveq	r3, #1
 8007912:	61a3      	streq	r3, [r4, #24]
 8007914:	f000 f820 	bl	8007958 <__sfp>
 8007918:	6060      	str	r0, [r4, #4]
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f81c 	bl	8007958 <__sfp>
 8007920:	60a0      	str	r0, [r4, #8]
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f818 	bl	8007958 <__sfp>
 8007928:	2200      	movs	r2, #0
 800792a:	2104      	movs	r1, #4
 800792c:	60e0      	str	r0, [r4, #12]
 800792e:	6860      	ldr	r0, [r4, #4]
 8007930:	f7ff ff82 	bl	8007838 <std>
 8007934:	2201      	movs	r2, #1
 8007936:	2109      	movs	r1, #9
 8007938:	68a0      	ldr	r0, [r4, #8]
 800793a:	f7ff ff7d 	bl	8007838 <std>
 800793e:	2202      	movs	r2, #2
 8007940:	2112      	movs	r1, #18
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	f7ff ff78 	bl	8007838 <std>
 8007948:	2301      	movs	r3, #1
 800794a:	61a3      	str	r3, [r4, #24]
 800794c:	e7d2      	b.n	80078f4 <__sinit+0xc>
 800794e:	bf00      	nop
 8007950:	08007ff8 	.word	0x08007ff8
 8007954:	08007881 	.word	0x08007881

08007958 <__sfp>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4607      	mov	r7, r0
 800795c:	f7ff ffac 	bl	80078b8 <__sfp_lock_acquire>
 8007960:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <__sfp+0x84>)
 8007962:	681e      	ldr	r6, [r3, #0]
 8007964:	69b3      	ldr	r3, [r6, #24]
 8007966:	b913      	cbnz	r3, 800796e <__sfp+0x16>
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff ffbd 	bl	80078e8 <__sinit>
 800796e:	3648      	adds	r6, #72	; 0x48
 8007970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007974:	3b01      	subs	r3, #1
 8007976:	d503      	bpl.n	8007980 <__sfp+0x28>
 8007978:	6833      	ldr	r3, [r6, #0]
 800797a:	b30b      	cbz	r3, 80079c0 <__sfp+0x68>
 800797c:	6836      	ldr	r6, [r6, #0]
 800797e:	e7f7      	b.n	8007970 <__sfp+0x18>
 8007980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007984:	b9d5      	cbnz	r5, 80079bc <__sfp+0x64>
 8007986:	4b16      	ldr	r3, [pc, #88]	; (80079e0 <__sfp+0x88>)
 8007988:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800798c:	6665      	str	r5, [r4, #100]	; 0x64
 800798e:	60e3      	str	r3, [r4, #12]
 8007990:	f000 f847 	bl	8007a22 <__retarget_lock_init_recursive>
 8007994:	f7ff ff96 	bl	80078c4 <__sfp_lock_release>
 8007998:	2208      	movs	r2, #8
 800799a:	4629      	mov	r1, r5
 800799c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a0:	6025      	str	r5, [r4, #0]
 80079a2:	61a5      	str	r5, [r4, #24]
 80079a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079ac:	f7ff fd46 	bl	800743c <memset>
 80079b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079b8:	4620      	mov	r0, r4
 80079ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079bc:	3468      	adds	r4, #104	; 0x68
 80079be:	e7d9      	b.n	8007974 <__sfp+0x1c>
 80079c0:	2104      	movs	r1, #4
 80079c2:	4638      	mov	r0, r7
 80079c4:	f7ff ff62 	bl	800788c <__sfmoreglue>
 80079c8:	4604      	mov	r4, r0
 80079ca:	6030      	str	r0, [r6, #0]
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d1d5      	bne.n	800797c <__sfp+0x24>
 80079d0:	f7ff ff78 	bl	80078c4 <__sfp_lock_release>
 80079d4:	230c      	movs	r3, #12
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	e7ee      	b.n	80079b8 <__sfp+0x60>
 80079da:	bf00      	nop
 80079dc:	08007ff8 	.word	0x08007ff8
 80079e0:	ffff0001 	.word	0xffff0001

080079e4 <_fwalk_reent>:
 80079e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e8:	4606      	mov	r6, r0
 80079ea:	4688      	mov	r8, r1
 80079ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079f0:	2700      	movs	r7, #0
 80079f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079f6:	f1b9 0901 	subs.w	r9, r9, #1
 80079fa:	d505      	bpl.n	8007a08 <_fwalk_reent+0x24>
 80079fc:	6824      	ldr	r4, [r4, #0]
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	d1f7      	bne.n	80079f2 <_fwalk_reent+0xe>
 8007a02:	4638      	mov	r0, r7
 8007a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a08:	89ab      	ldrh	r3, [r5, #12]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d907      	bls.n	8007a1e <_fwalk_reent+0x3a>
 8007a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a12:	3301      	adds	r3, #1
 8007a14:	d003      	beq.n	8007a1e <_fwalk_reent+0x3a>
 8007a16:	4629      	mov	r1, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	47c0      	blx	r8
 8007a1c:	4307      	orrs	r7, r0
 8007a1e:	3568      	adds	r5, #104	; 0x68
 8007a20:	e7e9      	b.n	80079f6 <_fwalk_reent+0x12>

08007a22 <__retarget_lock_init_recursive>:
 8007a22:	4770      	bx	lr

08007a24 <__retarget_lock_acquire_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <__retarget_lock_release_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <__swhatbuf_r>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	460e      	mov	r6, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	b096      	sub	sp, #88	; 0x58
 8007a32:	4614      	mov	r4, r2
 8007a34:	2900      	cmp	r1, #0
 8007a36:	461d      	mov	r5, r3
 8007a38:	da08      	bge.n	8007a4c <__swhatbuf_r+0x24>
 8007a3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	602a      	str	r2, [r5, #0]
 8007a42:	061a      	lsls	r2, r3, #24
 8007a44:	d410      	bmi.n	8007a68 <__swhatbuf_r+0x40>
 8007a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a4a:	e00e      	b.n	8007a6a <__swhatbuf_r+0x42>
 8007a4c:	466a      	mov	r2, sp
 8007a4e:	f000 f9a7 	bl	8007da0 <_fstat_r>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	dbf1      	blt.n	8007a3a <__swhatbuf_r+0x12>
 8007a56:	9a01      	ldr	r2, [sp, #4]
 8007a58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a60:	425a      	negs	r2, r3
 8007a62:	415a      	adcs	r2, r3
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	e7ee      	b.n	8007a46 <__swhatbuf_r+0x1e>
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	b016      	add	sp, #88	; 0x58
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a74 <__smakebuf_r>:
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a78:	079d      	lsls	r5, r3, #30
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d507      	bpl.n	8007a90 <__smakebuf_r+0x1c>
 8007a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6163      	str	r3, [r4, #20]
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	ab01      	add	r3, sp, #4
 8007a92:	466a      	mov	r2, sp
 8007a94:	f7ff ffc8 	bl	8007a28 <__swhatbuf_r>
 8007a98:	9900      	ldr	r1, [sp, #0]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 f895 	bl	8007bcc <_malloc_r>
 8007aa2:	b948      	cbnz	r0, 8007ab8 <__smakebuf_r+0x44>
 8007aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa8:	059a      	lsls	r2, r3, #22
 8007aaa:	d4ef      	bmi.n	8007a8c <__smakebuf_r+0x18>
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	e7e3      	b.n	8007a80 <__smakebuf_r+0xc>
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <__smakebuf_r+0x7c>)
 8007aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac4:	6120      	str	r0, [r4, #16]
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	9b00      	ldr	r3, [sp, #0]
 8007aca:	6163      	str	r3, [r4, #20]
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	b15b      	cbz	r3, 8007ae8 <__smakebuf_r+0x74>
 8007ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f975 	bl	8007dc4 <_isatty_r>
 8007ada:	b128      	cbz	r0, 8007ae8 <__smakebuf_r+0x74>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	89a0      	ldrh	r0, [r4, #12]
 8007aea:	4305      	orrs	r5, r0
 8007aec:	81a5      	strh	r5, [r4, #12]
 8007aee:	e7cd      	b.n	8007a8c <__smakebuf_r+0x18>
 8007af0:	08007881 	.word	0x08007881

08007af4 <_free_r>:
 8007af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007af6:	2900      	cmp	r1, #0
 8007af8:	d043      	beq.n	8007b82 <_free_r+0x8e>
 8007afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007afe:	1f0c      	subs	r4, r1, #4
 8007b00:	9001      	str	r0, [sp, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bfb8      	it	lt
 8007b06:	18e4      	addlt	r4, r4, r3
 8007b08:	f000 f97e 	bl	8007e08 <__malloc_lock>
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <_free_r+0x94>)
 8007b0e:	9801      	ldr	r0, [sp, #4]
 8007b10:	6813      	ldr	r3, [r2, #0]
 8007b12:	b933      	cbnz	r3, 8007b22 <_free_r+0x2e>
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	6014      	str	r4, [r2, #0]
 8007b18:	b003      	add	sp, #12
 8007b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b1e:	f000 b979 	b.w	8007e14 <__malloc_unlock>
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	d908      	bls.n	8007b38 <_free_r+0x44>
 8007b26:	6825      	ldr	r5, [r4, #0]
 8007b28:	1961      	adds	r1, r4, r5
 8007b2a:	428b      	cmp	r3, r1
 8007b2c:	bf01      	itttt	eq
 8007b2e:	6819      	ldreq	r1, [r3, #0]
 8007b30:	685b      	ldreq	r3, [r3, #4]
 8007b32:	1949      	addeq	r1, r1, r5
 8007b34:	6021      	streq	r1, [r4, #0]
 8007b36:	e7ed      	b.n	8007b14 <_free_r+0x20>
 8007b38:	461a      	mov	r2, r3
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	b10b      	cbz	r3, 8007b42 <_free_r+0x4e>
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	d9fa      	bls.n	8007b38 <_free_r+0x44>
 8007b42:	6811      	ldr	r1, [r2, #0]
 8007b44:	1855      	adds	r5, r2, r1
 8007b46:	42a5      	cmp	r5, r4
 8007b48:	d10b      	bne.n	8007b62 <_free_r+0x6e>
 8007b4a:	6824      	ldr	r4, [r4, #0]
 8007b4c:	4421      	add	r1, r4
 8007b4e:	1854      	adds	r4, r2, r1
 8007b50:	6011      	str	r1, [r2, #0]
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	d1e0      	bne.n	8007b18 <_free_r+0x24>
 8007b56:	681c      	ldr	r4, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4421      	add	r1, r4
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	e7da      	b.n	8007b18 <_free_r+0x24>
 8007b62:	d902      	bls.n	8007b6a <_free_r+0x76>
 8007b64:	230c      	movs	r3, #12
 8007b66:	6003      	str	r3, [r0, #0]
 8007b68:	e7d6      	b.n	8007b18 <_free_r+0x24>
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	1961      	adds	r1, r4, r5
 8007b6e:	428b      	cmp	r3, r1
 8007b70:	bf02      	ittt	eq
 8007b72:	6819      	ldreq	r1, [r3, #0]
 8007b74:	685b      	ldreq	r3, [r3, #4]
 8007b76:	1949      	addeq	r1, r1, r5
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf08      	it	eq
 8007b7c:	6021      	streq	r1, [r4, #0]
 8007b7e:	6054      	str	r4, [r2, #4]
 8007b80:	e7ca      	b.n	8007b18 <_free_r+0x24>
 8007b82:	b003      	add	sp, #12
 8007b84:	bd30      	pop	{r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	2000a5c8 	.word	0x2000a5c8

08007b8c <sbrk_aligned>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	4e0e      	ldr	r6, [pc, #56]	; (8007bc8 <sbrk_aligned+0x3c>)
 8007b90:	460c      	mov	r4, r1
 8007b92:	4605      	mov	r5, r0
 8007b94:	6831      	ldr	r1, [r6, #0]
 8007b96:	b911      	cbnz	r1, 8007b9e <sbrk_aligned+0x12>
 8007b98:	f000 f88c 	bl	8007cb4 <_sbrk_r>
 8007b9c:	6030      	str	r0, [r6, #0]
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f887 	bl	8007cb4 <_sbrk_r>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d00a      	beq.n	8007bc0 <sbrk_aligned+0x34>
 8007baa:	1cc4      	adds	r4, r0, #3
 8007bac:	f024 0403 	bic.w	r4, r4, #3
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d007      	beq.n	8007bc4 <sbrk_aligned+0x38>
 8007bb4:	1a21      	subs	r1, r4, r0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f87c 	bl	8007cb4 <_sbrk_r>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d101      	bne.n	8007bc4 <sbrk_aligned+0x38>
 8007bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	2000a5cc 	.word	0x2000a5cc

08007bcc <_malloc_r>:
 8007bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd0:	1ccd      	adds	r5, r1, #3
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	f025 0503 	bic.w	r5, r5, #3
 8007bd8:	3508      	adds	r5, #8
 8007bda:	2d0c      	cmp	r5, #12
 8007bdc:	bf38      	it	cc
 8007bde:	250c      	movcc	r5, #12
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	db01      	blt.n	8007be8 <_malloc_r+0x1c>
 8007be4:	42a9      	cmp	r1, r5
 8007be6:	d905      	bls.n	8007bf4 <_malloc_r+0x28>
 8007be8:	230c      	movs	r3, #12
 8007bea:	2600      	movs	r6, #0
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4630      	mov	r0, r6
 8007bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf4:	4e2e      	ldr	r6, [pc, #184]	; (8007cb0 <_malloc_r+0xe4>)
 8007bf6:	f000 f907 	bl	8007e08 <__malloc_lock>
 8007bfa:	6833      	ldr	r3, [r6, #0]
 8007bfc:	461c      	mov	r4, r3
 8007bfe:	bb34      	cbnz	r4, 8007c4e <_malloc_r+0x82>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff ffc2 	bl	8007b8c <sbrk_aligned>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	d14d      	bne.n	8007caa <_malloc_r+0xde>
 8007c0e:	6834      	ldr	r4, [r6, #0]
 8007c10:	4626      	mov	r6, r4
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d140      	bne.n	8007c98 <_malloc_r+0xcc>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	eb04 0803 	add.w	r8, r4, r3
 8007c20:	f000 f848 	bl	8007cb4 <_sbrk_r>
 8007c24:	4580      	cmp	r8, r0
 8007c26:	d13a      	bne.n	8007c9e <_malloc_r+0xd2>
 8007c28:	6821      	ldr	r1, [r4, #0]
 8007c2a:	3503      	adds	r5, #3
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	1a6d      	subs	r5, r5, r1
 8007c30:	f025 0503 	bic.w	r5, r5, #3
 8007c34:	3508      	adds	r5, #8
 8007c36:	2d0c      	cmp	r5, #12
 8007c38:	bf38      	it	cc
 8007c3a:	250c      	movcc	r5, #12
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7ff ffa5 	bl	8007b8c <sbrk_aligned>
 8007c42:	3001      	adds	r0, #1
 8007c44:	d02b      	beq.n	8007c9e <_malloc_r+0xd2>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	442b      	add	r3, r5
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	e00e      	b.n	8007c6c <_malloc_r+0xa0>
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	1b52      	subs	r2, r2, r5
 8007c52:	d41e      	bmi.n	8007c92 <_malloc_r+0xc6>
 8007c54:	2a0b      	cmp	r2, #11
 8007c56:	d916      	bls.n	8007c86 <_malloc_r+0xba>
 8007c58:	1961      	adds	r1, r4, r5
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	6025      	str	r5, [r4, #0]
 8007c5e:	bf18      	it	ne
 8007c60:	6059      	strne	r1, [r3, #4]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	bf08      	it	eq
 8007c66:	6031      	streq	r1, [r6, #0]
 8007c68:	5162      	str	r2, [r4, r5]
 8007c6a:	604b      	str	r3, [r1, #4]
 8007c6c:	f104 060b 	add.w	r6, r4, #11
 8007c70:	4638      	mov	r0, r7
 8007c72:	f000 f8cf 	bl	8007e14 <__malloc_unlock>
 8007c76:	1d23      	adds	r3, r4, #4
 8007c78:	f026 0607 	bic.w	r6, r6, #7
 8007c7c:	1af2      	subs	r2, r6, r3
 8007c7e:	d0b6      	beq.n	8007bee <_malloc_r+0x22>
 8007c80:	1b9b      	subs	r3, r3, r6
 8007c82:	50a3      	str	r3, [r4, r2]
 8007c84:	e7b3      	b.n	8007bee <_malloc_r+0x22>
 8007c86:	6862      	ldr	r2, [r4, #4]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	bf0c      	ite	eq
 8007c8c:	6032      	streq	r2, [r6, #0]
 8007c8e:	605a      	strne	r2, [r3, #4]
 8007c90:	e7ec      	b.n	8007c6c <_malloc_r+0xa0>
 8007c92:	4623      	mov	r3, r4
 8007c94:	6864      	ldr	r4, [r4, #4]
 8007c96:	e7b2      	b.n	8007bfe <_malloc_r+0x32>
 8007c98:	4634      	mov	r4, r6
 8007c9a:	6876      	ldr	r6, [r6, #4]
 8007c9c:	e7b9      	b.n	8007c12 <_malloc_r+0x46>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	f000 f8b6 	bl	8007e14 <__malloc_unlock>
 8007ca8:	e7a1      	b.n	8007bee <_malloc_r+0x22>
 8007caa:	6025      	str	r5, [r4, #0]
 8007cac:	e7de      	b.n	8007c6c <_malloc_r+0xa0>
 8007cae:	bf00      	nop
 8007cb0:	2000a5c8 	.word	0x2000a5c8

08007cb4 <_sbrk_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4d05      	ldr	r5, [pc, #20]	; (8007cd0 <_sbrk_r+0x1c>)
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7f9 f9aa 	bl	8001018 <_sbrk>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_sbrk_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_sbrk_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	2000a5d0 	.word	0x2000a5d0

08007cd4 <__sread>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cdc:	f000 f8a0 	bl	8007e20 <_read_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	bfab      	itete	ge
 8007ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ce8:	181b      	addge	r3, r3, r0
 8007cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cee:	bfac      	ite	ge
 8007cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cf2:	81a3      	strhlt	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__swrite>:
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	898b      	ldrh	r3, [r1, #12]
 8007cfe:	4605      	mov	r5, r0
 8007d00:	460c      	mov	r4, r1
 8007d02:	05db      	lsls	r3, r3, #23
 8007d04:	4616      	mov	r6, r2
 8007d06:	d505      	bpl.n	8007d14 <__swrite+0x1e>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	f000 f868 	bl	8007de4 <_lseek_r>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	4632      	mov	r2, r6
 8007d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	463b      	mov	r3, r7
 8007d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2a:	f000 b817 	b.w	8007d5c <_write_r>

08007d2e <__sseek>:
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	460c      	mov	r4, r1
 8007d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d36:	f000 f855 	bl	8007de4 <_lseek_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	bf15      	itete	ne
 8007d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d4a:	81a3      	strheq	r3, [r4, #12]
 8007d4c:	bf18      	it	ne
 8007d4e:	81a3      	strhne	r3, [r4, #12]
 8007d50:	bd10      	pop	{r4, pc}

08007d52 <__sclose>:
 8007d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d56:	f000 b813 	b.w	8007d80 <_close_r>
	...

08007d5c <_write_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4d06      	ldr	r5, [pc, #24]	; (8007d7c <_write_r+0x20>)
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f9 f903 	bl	8000f76 <_write>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_write_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_write_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	2000a5d0 	.word	0x2000a5d0

08007d80 <_close_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	2300      	movs	r3, #0
 8007d84:	4d05      	ldr	r5, [pc, #20]	; (8007d9c <_close_r+0x1c>)
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7f9 f90f 	bl	8000fae <_close>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_close_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_close_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000a5d0 	.word	0x2000a5d0

08007da0 <_fstat_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	2300      	movs	r3, #0
 8007da4:	4d06      	ldr	r5, [pc, #24]	; (8007dc0 <_fstat_r+0x20>)
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f7f9 f90a 	bl	8000fc6 <_fstat>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d102      	bne.n	8007dbc <_fstat_r+0x1c>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	b103      	cbz	r3, 8007dbc <_fstat_r+0x1c>
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000a5d0 	.word	0x2000a5d0

08007dc4 <_isatty_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	4d05      	ldr	r5, [pc, #20]	; (8007de0 <_isatty_r+0x1c>)
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7f9 f909 	bl	8000fe6 <_isatty>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_isatty_r+0x1a>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_isatty_r+0x1a>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	2000a5d0 	.word	0x2000a5d0

08007de4 <_lseek_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	4d06      	ldr	r5, [pc, #24]	; (8007e04 <_lseek_r+0x20>)
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f9 f902 	bl	8000ffc <_lseek>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_lseek_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_lseek_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	2000a5d0 	.word	0x2000a5d0

08007e08 <__malloc_lock>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__malloc_lock+0x8>)
 8007e0a:	f7ff be0b 	b.w	8007a24 <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	2000a5c4 	.word	0x2000a5c4

08007e14 <__malloc_unlock>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__malloc_unlock+0x8>)
 8007e16:	f7ff be06 	b.w	8007a26 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	2000a5c4 	.word	0x2000a5c4

08007e20 <_read_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	4d06      	ldr	r5, [pc, #24]	; (8007e40 <_read_r+0x20>)
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7f9 f884 	bl	8000f3c <_read>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_read_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_read_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	2000a5d0 	.word	0x2000a5d0

08007e44 <_init>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr

08007e50 <_fini>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr
