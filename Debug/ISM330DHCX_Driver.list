
ISM330DHCX_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08009b18  08009b18  00019b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08009fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000eb9c  20000084  0800a04c  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ec20  0800a04c  0002ec20  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001754a  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030aa  00000000  00000000  00037604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001098  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f40  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000349cf  00000000  00000000  0003c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017571  00000000  00000000  00071057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013e38a  00000000  00000000  000885c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c6952  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f40  00000000  00000000  001c69a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000084 	.word	0x20000084
 8000254:	00000000 	.word	0x00000000
 8000258:	08009b00 	.word	0x08009b00

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000088 	.word	0x20000088
 8000274:	08009b00 	.word	0x08009b00

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_uldivmod>:
 8000bf0:	b953      	cbnz	r3, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf2:	b94a      	cbnz	r2, 8000c08 <__aeabi_uldivmod+0x18>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	bf08      	it	eq
 8000bf8:	2800      	cmpeq	r0, #0
 8000bfa:	bf1c      	itt	ne
 8000bfc:	f04f 31ff 	movne.w	r1, #4294967295
 8000c00:	f04f 30ff 	movne.w	r0, #4294967295
 8000c04:	f000 b982 	b.w	8000f0c <__aeabi_idiv0>
 8000c08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c10:	f000 f806 	bl	8000c20 <__udivmoddi4>
 8000c14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1c:	b004      	add	sp, #16
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c26:	4604      	mov	r4, r0
 8000c28:	460f      	mov	r7, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d148      	bne.n	8000cc0 <__udivmoddi4+0xa0>
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	4694      	mov	ip, r2
 8000c32:	d961      	bls.n	8000cf8 <__udivmoddi4+0xd8>
 8000c34:	fab2 f382 	clz	r3, r2
 8000c38:	b143      	cbz	r3, 8000c4c <__udivmoddi4+0x2c>
 8000c3a:	f1c3 0120 	rsb	r1, r3, #32
 8000c3e:	409f      	lsls	r7, r3
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	409c      	lsls	r4, r3
 8000c46:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4a:	430f      	orrs	r7, r1
 8000c4c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c50:	fa1f fe8c 	uxth.w	lr, ip
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c5a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c5e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c62:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c66:	4290      	cmp	r0, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x5c>
 8000c6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c6e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x5a>
 8000c74:	4290      	cmp	r0, r2
 8000c76:	f200 8137 	bhi.w	8000ee8 <__udivmoddi4+0x2c8>
 8000c7a:	463e      	mov	r6, r7
 8000c7c:	1a12      	subs	r2, r2, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c84:	fb01 2210 	mls	r2, r1, r0, r2
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x86>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x84>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	f200 811c 	bhi.w	8000edc <__udivmoddi4+0x2bc>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	eba4 040e 	sub.w	r4, r4, lr
 8000cae:	2600      	movs	r6, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0x9a>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c5 4300 	strd	r4, r3, [r5]
 8000cba:	4631      	mov	r1, r6
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0xb8>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	f000 80fd 	beq.w	8000ec4 <__udivmoddi4+0x2a4>
 8000cca:	2600      	movs	r6, #0
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd8:	fab3 f683 	clz	r6, r3
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d14b      	bne.n	8000d78 <__udivmoddi4+0x158>
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	f0c0 80f2 	bcc.w	8000eca <__udivmoddi4+0x2aa>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f240 80ef 	bls.w	8000eca <__udivmoddi4+0x2aa>
 8000cec:	4630      	mov	r0, r6
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e3      	beq.n	8000cba <__udivmoddi4+0x9a>
 8000cf2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cf6:	e7e0      	b.n	8000cba <__udivmoddi4+0x9a>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xdc>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f382 	clz	r3, r2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 809d 	bne.w	8000e40 <__udivmoddi4+0x220>
 8000d06:	1a89      	subs	r1, r1, r2
 8000d08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d0c:	b297      	uxth	r7, r2
 8000d0e:	2601      	movs	r6, #1
 8000d10:	0c20      	lsrs	r0, r4, #16
 8000d12:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d16:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1e:	fb07 f002 	mul.w	r0, r7, r2
 8000d22:	4288      	cmp	r0, r1
 8000d24:	d90f      	bls.n	8000d46 <__udivmoddi4+0x126>
 8000d26:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d2e:	bf2c      	ite	cs
 8000d30:	f04f 0901 	movcs.w	r9, #1
 8000d34:	f04f 0900 	movcc.w	r9, #0
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	d903      	bls.n	8000d44 <__udivmoddi4+0x124>
 8000d3c:	f1b9 0f00 	cmp.w	r9, #0
 8000d40:	f000 80cf 	beq.w	8000ee2 <__udivmoddi4+0x2c2>
 8000d44:	4642      	mov	r2, r8
 8000d46:	1a09      	subs	r1, r1, r0
 8000d48:	b2a4      	uxth	r4, r4
 8000d4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d5a:	42a7      	cmp	r7, r4
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x150>
 8000d5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d62:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x14e>
 8000d68:	42a7      	cmp	r7, r4
 8000d6a:	f200 80b4 	bhi.w	8000ed6 <__udivmoddi4+0x2b6>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	1be4      	subs	r4, r4, r7
 8000d72:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d76:	e79b      	b.n	8000cb0 <__udivmoddi4+0x90>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	40f9      	lsrs	r1, r7
 8000d88:	40b2      	lsls	r2, r6
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	431c      	orrs	r4, r3
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	0c20      	lsrs	r0, r4, #16
 8000da2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da6:	fb09 1118 	mls	r1, r9, r8, r1
 8000daa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dae:	fb08 f00e 	mul.w	r0, r8, lr
 8000db2:	4288      	cmp	r0, r1
 8000db4:	d90f      	bls.n	8000dd6 <__udivmoddi4+0x1b6>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dbe:	bf2c      	ite	cs
 8000dc0:	f04f 0b01 	movcs.w	fp, #1
 8000dc4:	f04f 0b00 	movcc.w	fp, #0
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	d903      	bls.n	8000dd4 <__udivmoddi4+0x1b4>
 8000dcc:	f1bb 0f00 	cmp.w	fp, #0
 8000dd0:	f000 808d 	beq.w	8000eee <__udivmoddi4+0x2ce>
 8000dd4:	46d0      	mov	r8, sl
 8000dd6:	1a09      	subs	r1, r1, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dde:	fb09 1110 	mls	r1, r9, r0, r1
 8000de2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1de>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d201      	bcs.n	8000dfc <__udivmoddi4+0x1dc>
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	d87f      	bhi.n	8000efc <__udivmoddi4+0x2dc>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	fba0 9802 	umull	r9, r8, r0, r2
 8000e0a:	4541      	cmp	r1, r8
 8000e0c:	464c      	mov	r4, r9
 8000e0e:	46c6      	mov	lr, r8
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x1f8>
 8000e12:	d106      	bne.n	8000e22 <__udivmoddi4+0x202>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d204      	bcs.n	8000e22 <__udivmoddi4+0x202>
 8000e18:	3801      	subs	r0, #1
 8000e1a:	ebb9 0402 	subs.w	r4, r9, r2
 8000e1e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d070      	beq.n	8000f08 <__udivmoddi4+0x2e8>
 8000e26:	1b1a      	subs	r2, r3, r4
 8000e28:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2c:	fa22 f306 	lsr.w	r3, r2, r6
 8000e30:	fa01 f707 	lsl.w	r7, r1, r7
 8000e34:	40f1      	lsrs	r1, r6
 8000e36:	2600      	movs	r6, #0
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3e:	e73c      	b.n	8000cba <__udivmoddi4+0x9a>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0020 	rsb	r0, r3, #32
 8000e48:	fa01 f203 	lsl.w	r2, r1, r3
 8000e4c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e50:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e54:	fa24 f100 	lsr.w	r1, r4, r0
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	409c      	lsls	r4, r3
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e64:	0c0a      	lsrs	r2, r1, #16
 8000e66:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e6a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e6e:	fb00 f607 	mul.w	r6, r0, r7
 8000e72:	4296      	cmp	r6, r2
 8000e74:	d90e      	bls.n	8000e94 <__udivmoddi4+0x274>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	bf2c      	ite	cs
 8000e80:	f04f 0901 	movcs.w	r9, #1
 8000e84:	f04f 0900 	movcc.w	r9, #0
 8000e88:	4296      	cmp	r6, r2
 8000e8a:	d902      	bls.n	8000e92 <__udivmoddi4+0x272>
 8000e8c:	f1b9 0f00 	cmp.w	r9, #0
 8000e90:	d031      	beq.n	8000ef6 <__udivmoddi4+0x2d6>
 8000e92:	4640      	mov	r0, r8
 8000e94:	1b92      	subs	r2, r2, r6
 8000e96:	b289      	uxth	r1, r1
 8000e98:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e9c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ea4:	fb06 f207 	mul.w	r2, r6, r7
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0x29c>
 8000eac:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb4:	d201      	bcs.n	8000eba <__udivmoddi4+0x29a>
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	d823      	bhi.n	8000f02 <__udivmoddi4+0x2e2>
 8000eba:	4646      	mov	r6, r8
 8000ebc:	1a89      	subs	r1, r1, r2
 8000ebe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec2:	e725      	b.n	8000d10 <__udivmoddi4+0xf0>
 8000ec4:	462e      	mov	r6, r5
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	e6f7      	b.n	8000cba <__udivmoddi4+0x9a>
 8000eca:	1a84      	subs	r4, r0, r2
 8000ecc:	eb61 0303 	sbc.w	r3, r1, r3
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	e70b      	b.n	8000cee <__udivmoddi4+0xce>
 8000ed6:	4464      	add	r4, ip
 8000ed8:	3802      	subs	r0, #2
 8000eda:	e749      	b.n	8000d70 <__udivmoddi4+0x150>
 8000edc:	4464      	add	r4, ip
 8000ede:	3802      	subs	r0, #2
 8000ee0:	e6e1      	b.n	8000ca6 <__udivmoddi4+0x86>
 8000ee2:	3a02      	subs	r2, #2
 8000ee4:	4461      	add	r1, ip
 8000ee6:	e72e      	b.n	8000d46 <__udivmoddi4+0x126>
 8000ee8:	3e02      	subs	r6, #2
 8000eea:	4462      	add	r2, ip
 8000eec:	e6c6      	b.n	8000c7c <__udivmoddi4+0x5c>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4461      	add	r1, ip
 8000ef4:	e76f      	b.n	8000dd6 <__udivmoddi4+0x1b6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	e7cb      	b.n	8000e94 <__udivmoddi4+0x274>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e77d      	b.n	8000dfe <__udivmoddi4+0x1de>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	e7d9      	b.n	8000ebc <__udivmoddi4+0x29c>
 8000f08:	462e      	mov	r6, r5
 8000f0a:	e6d6      	b.n	8000cba <__udivmoddi4+0x9a>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <ISM330DHCX_Init>:
 **************************************//**************************************//**************************************/
/********************************************************************************************************
 * Brief: Constructs and intializes an ISM330DHCX Device and links it to its low level drivers
 * Params: Settings: Desired user settings for device, Dev: Device to be initialized, ISM330DHCX_IO_Drv_t low level IO driver
 ********************************************************************************************************/
void ISM330DHCX_Init(ISM330DHCX_Init_Struct_t Settings, ISM330DHCX_Handle_t *Dev, ISM330DHCX_IO_Drv_t LowLevelDrivers){
 8000f10:	b082      	sub	sp, #8
 8000f12:	b590      	push	{r4, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	f107 0408 	add.w	r4, r7, #8
 8000f1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
	Dev->ISM330DHCX_IO.Init = LowLevelDrivers.Init;
 8000f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
	Dev->ISM330DHCX_IO.DeInit = LowLevelDrivers.DeInit;
 8000f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	61da      	str	r2, [r3, #28]
	Dev->ISM330DHCX_IO.WriteReg = LowLevelDrivers.WriteReg;
 8000f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	621a      	str	r2, [r3, #32]
	Dev->ISM330DHCX_IO.ReadReg = LowLevelDrivers.ReadReg;
 8000f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
	Dev->ISM330DHCX_IO.ioctl = LowLevelDrivers.ioctl;
 8000f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28

	if(Settings.Int1 != 0 || Settings.Int2 != 0){
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <ISM330DHCX_Init+0x3e>
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <ISM330DHCX_Init+0x46>
		Dev->ISM330DHCX_IO.ioctl(ISM330DHCX_IRQDisable);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	2001      	movs	r0, #1
 8000f54:	4798      	blx	r3
	}

	Dev->ISM330DHCX_IO.Init();
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4798      	blx	r3

	uint8_t DeviceID = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75fb      	strb	r3, [r7, #23]
	if(Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_WHO_AM_I, &DeviceID, 1) != ISM330DHCX_OK){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f107 0117 	add.w	r1, r7, #23
 8000f68:	2201      	movs	r2, #1
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	4798      	blx	r3
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <ISM330DHCX_Init+0x6c>
		_log(log_ism330dhcx, "Initialization: Read Device ID Reg Failed.");
 8000f74:	495f      	ldr	r1, [pc, #380]	; (80010f4 <ISM330DHCX_Init+0x1e4>)
 8000f76:	2004      	movs	r0, #4
 8000f78:	f000 fb62 	bl	8001640 <_log>
	}
	if(DeviceID != ISM330DHCX_DEVICE_ID){
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b6b      	cmp	r3, #107	; 0x6b
 8000f80:	d004      	beq.n	8000f8c <ISM330DHCX_Init+0x7c>
		_log(log_ism330dhcx, "Initialization: Device ID Mismatch");
 8000f82:	495d      	ldr	r1, [pc, #372]	; (80010f8 <ISM330DHCX_Init+0x1e8>)
 8000f84:	2004      	movs	r0, #4
 8000f86:	f000 fb5b 	bl	8001640 <_log>
		return;
 8000f8a:	e0ad      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
	}

	uint8_t settings_reg;

	if(Settings.Filter != LPF_Div2){
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d030      	beq.n	8000ff4 <ISM330DHCX_Init+0xe4>

		/*Configure the low pass filter*/
		settings_reg = (Settings.Filter - 1) << 5;
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL8_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	f107 0116 	add.w	r1, r7, #22
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2017      	movs	r0, #23
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <ISM330DHCX_Init+0xac>
			_log(log_ism330dhcx, "Initialization: Write Ctrl8 XL failed");
 8000fb2:	4952      	ldr	r1, [pc, #328]	; (80010fc <ISM330DHCX_Init+0x1ec>)
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 fb43 	bl	8001640 <_log>
			return;
 8000fba:	e095      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
		}

		/*Configure the ODR and Sensitivity*/
		settings_reg = (Settings.AccelMode << 4) | (Settings.XL_Sense << 2) | (1 << 1);
 8000fbc:	7a3b      	ldrb	r3, [r7, #8]
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	7abb      	ldrb	r3, [r7, #10]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL1_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	f107 0116 	add.w	r1, r7, #22
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2010      	movs	r0, #16
 8000fe2:	4798      	blx	r3
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01d      	beq.n	8001026 <ISM330DHCX_Init+0x116>
			_log(log_ism330dhcx, "Initialization: Write Ctrl1 XL failed");
 8000fea:	4945      	ldr	r1, [pc, #276]	; (8001100 <ISM330DHCX_Init+0x1f0>)
 8000fec:	2004      	movs	r0, #4
 8000fee:	f000 fb27 	bl	8001640 <_log>
			return;
 8000ff2:	e079      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
		}

	} else {

		/*Configure the ODR and Sensitivity*/
		settings_reg = (Settings.AccelMode << 4) | (Settings.XL_Sense << 2);
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	b25a      	sxtb	r2, r3
 8000ffa:	7abb      	ldrb	r3, [r7, #10]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b25b      	sxtb	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	75bb      	strb	r3, [r7, #22]
		if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL1_XL, &settings_reg, 1) != ISM330DHCX_OK){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	f107 0116 	add.w	r1, r7, #22
 8001010:	2201      	movs	r2, #1
 8001012:	2010      	movs	r0, #16
 8001014:	4798      	blx	r3
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <ISM330DHCX_Init+0x116>
			_log(log_ism330dhcx, "Initialization: Write Ctrl1 XL failed");
 800101c:	4938      	ldr	r1, [pc, #224]	; (8001100 <ISM330DHCX_Init+0x1f0>)
 800101e:	2004      	movs	r0, #4
 8001020:	f000 fb0e 	bl	8001640 <_log>
			return;
 8001024:	e060      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
		return;
	}
	*/


	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_INT1_CTRL, &Settings.Int1, 1) != ISM330DHCX_OK){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f107 0208 	add.w	r2, r7, #8
 800102e:	1d11      	adds	r1, r2, #4
 8001030:	2201      	movs	r2, #1
 8001032:	200d      	movs	r0, #13
 8001034:	4798      	blx	r3
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <ISM330DHCX_Init+0x136>
		_log(log_ism330dhcx, "Initialization: Write INT1 Ctrl failed");
 800103c:	4931      	ldr	r1, [pc, #196]	; (8001104 <ISM330DHCX_Init+0x1f4>)
 800103e:	2004      	movs	r0, #4
 8001040:	f000 fafe 	bl	8001640 <_log>
		return;
 8001044:	e050      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
	}

	settings_reg = (Settings.GyroMode << 4) | (Settings.G_Sense << 2);
 8001046:	7a7b      	ldrb	r3, [r7, #9]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b25a      	sxtb	r2, r3
 800104c:	7afb      	ldrb	r3, [r7, #11]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	b25b      	sxtb	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	75bb      	strb	r3, [r7, #22]
	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_CTRL2_G, &settings_reg, 1) != ISM330DHCX_OK){
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	f107 0116 	add.w	r1, r7, #22
 8001062:	2201      	movs	r2, #1
 8001064:	2011      	movs	r0, #17
 8001066:	4798      	blx	r3
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <ISM330DHCX_Init+0x168>
		_log(log_ism330dhcx, "Initialization: Write Ctrl2 reg failed");
 800106e:	4926      	ldr	r1, [pc, #152]	; (8001108 <ISM330DHCX_Init+0x1f8>)
 8001070:	2004      	movs	r0, #4
 8001072:	f000 fae5 	bl	8001640 <_log>
		return;
 8001076:	e037      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
	}

	if(Dev->ISM330DHCX_IO.WriteReg(ISM330DHCX_REG_INT2_CTRL, &Settings.Int2, 1) != ISM330DHCX_OK){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	1d51      	adds	r1, r2, #5
 8001082:	2201      	movs	r2, #1
 8001084:	200e      	movs	r0, #14
 8001086:	4798      	blx	r3
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <ISM330DHCX_Init+0x188>
		_log(log_ism330dhcx, "Initialization: Write Int2 ctrl reg failed");
 800108e:	491f      	ldr	r1, [pc, #124]	; (800110c <ISM330DHCX_Init+0x1fc>)
 8001090:	2004      	movs	r0, #4
 8001092:	f000 fad5 	bl	8001640 <_log>
		return;
 8001096:	e027      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
	}

	Dev->G_Sensitivity = Settings.G_Sense;
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	edc3 7a04 	vstr	s15, [r3, #16]
	Dev->XL_Sensitivity = Settings.XL_Sense;
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edc3 7a03 	vstr	s15, [r3, #12]
	if(Settings.Int1 == 0 && Settings.Int2 == 0){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <ISM330DHCX_Init+0x1b4>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d010      	beq.n	80010e6 <ISM330DHCX_Init+0x1d6>
		return;
	}

	if(Settings.Int1 != 0 || Settings.Int2 != 0){
 80010c4:	7b3b      	ldrb	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <ISM330DHCX_Init+0x1c0>
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <ISM330DHCX_Init+0x1c8>
		Dev->ISM330DHCX_IO.ioctl(ISM330DHCX_IRQEnable);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	2000      	movs	r0, #0
 80010d6:	4798      	blx	r3
	}

	/*Ensure IRQ Line is cleared*/
	ISM330DHCX_ReadAcceleration(Dev);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f819 	bl	8001110 <ISM330DHCX_ReadAcceleration>
	ISM330DHCX_ReadAngularVelocity(Dev);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f856 	bl	8001190 <ISM330DHCX_ReadAngularVelocity>
 80010e4:	e000      	b.n	80010e8 <ISM330DHCX_Init+0x1d8>
		return;
 80010e6:	bf00      	nop
}
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010f0:	b002      	add	sp, #8
 80010f2:	4770      	bx	lr
 80010f4:	08009b18 	.word	0x08009b18
 80010f8:	08009b44 	.word	0x08009b44
 80010fc:	08009b68 	.word	0x08009b68
 8001100:	08009b90 	.word	0x08009b90
 8001104:	08009bb8 	.word	0x08009bb8
 8001108:	08009be0 	.word	0x08009be0
 800110c:	08009c08 	.word	0x08009c08

08001110 <ISM330DHCX_ReadAcceleration>:

/********************************************************************************************************
 * Brief: Reads Acceleration registers on ISM330DHCX and stores them in the device handle variables
 * Params: ISM330DHCX Device Handle
 ********************************************************************************************************/
ISM330DHCX_DataReadyStatus_t ISM330DHCX_ReadAcceleration(ISM330DHCX_Handle_t *Dev){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	int16_t *pData = Dev->Acceleration;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3306      	adds	r3, #6
 800111c:	60fb      	str	r3, [r7, #12]
	uint8_t status = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	72fb      	strb	r3, [r7, #11]
	if(Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_STATUS_REG,&status,1) != ISM330DHCX_OK){
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f107 010b 	add.w	r1, r7, #11
 800112a:	2201      	movs	r2, #1
 800112c:	201e      	movs	r0, #30
 800112e:	4798      	blx	r3
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <ISM330DHCX_ReadAcceleration+0x32>
		_log(log_ism330dhcx, "Read Status reg failed");
 8001136:	4914      	ldr	r1, [pc, #80]	; (8001188 <ISM330DHCX_ReadAcceleration+0x78>)
 8001138:	2004      	movs	r0, #4
 800113a:	f000 fa81 	bl	8001640 <_log>
		return ISM330DHCX_DataNotReady;
 800113e:	2301      	movs	r3, #1
 8001140:	e01d      	b.n	800117e <ISM330DHCX_ReadAcceleration+0x6e>
	} else if((status & 0x01) != 0x01){
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <ISM330DHCX_ReadAcceleration+0x46>
		Dev->DataReadyFlag = ISM330DHCX_DataNotReady;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	751a      	strb	r2, [r3, #20]
		return ISM330DHCX_DataNotReady;
 8001152:	2301      	movs	r3, #1
 8001154:	e013      	b.n	800117e <ISM330DHCX_ReadAcceleration+0x6e>
	}
	Dev->DataReadyFlag = ISM330DHCX_DataReady;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	751a      	strb	r2, [r3, #20]
	if (Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_OUTX_L_A, (uint8_t*)pData, 6) != ISM330DHCX_OK){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	2206      	movs	r2, #6
 8001162:	68f9      	ldr	r1, [r7, #12]
 8001164:	2028      	movs	r0, #40	; 0x28
 8001166:	4798      	blx	r3
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <ISM330DHCX_ReadAcceleration+0x66>
		_log(log_ism330dhcx, "Read Acceleration failed");
 800116e:	4907      	ldr	r1, [pc, #28]	; (800118c <ISM330DHCX_ReadAcceleration+0x7c>)
 8001170:	2004      	movs	r0, #4
 8001172:	f000 fa65 	bl	8001640 <_log>
	}
	Dev->DataReadyFlag = ISM330DHCX_DataNotReady;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	751a      	strb	r2, [r3, #20]
	return ISM330DHCX_DataReady;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08009c34 	.word	0x08009c34
 800118c:	08009c4c 	.word	0x08009c4c

08001190 <ISM330DHCX_ReadAngularVelocity>:

/********************************************************************************************************
 * Brief: Reads Gyro registers on ISM330DHCX and stores them in the device handle variables
 * Params: ISM330DHCX Device Handle
 ********************************************************************************************************/
ISM330DHCX_DataReadyStatus_t ISM330DHCX_ReadAngularVelocity(ISM330DHCX_Handle_t *Dev){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	int16_t *pData = Dev->AngularVelocity;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60fb      	str	r3, [r7, #12]
	uint8_t status = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	72fb      	strb	r3, [r7, #11]
	if(Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_STATUS_REG,&status,1) != ISM330DHCX_OK){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f107 010b 	add.w	r1, r7, #11
 80011a8:	2201      	movs	r2, #1
 80011aa:	201e      	movs	r0, #30
 80011ac:	4798      	blx	r3
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <ISM330DHCX_ReadAngularVelocity+0x30>
		_log(log_ism330dhcx, "Read Status reg failed");
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <ISM330DHCX_ReadAngularVelocity+0x74>)
 80011b6:	2004      	movs	r0, #4
 80011b8:	f000 fa42 	bl	8001640 <_log>
		return ISM330DHCX_DataNotReady;
 80011bc:	2301      	movs	r3, #1
 80011be:	e01d      	b.n	80011fc <ISM330DHCX_ReadAngularVelocity+0x6c>
	} else if((status & 0x02) != 0x02){
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <ISM330DHCX_ReadAngularVelocity+0x44>
		Dev->DataReadyFlag = ISM330DHCX_DataNotReady;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	751a      	strb	r2, [r3, #20]
		return ISM330DHCX_DataNotReady;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e013      	b.n	80011fc <ISM330DHCX_ReadAngularVelocity+0x6c>
	}
	Dev->DataReadyFlag = ISM330DHCX_DataReady;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	751a      	strb	r2, [r3, #20]
	if (Dev->ISM330DHCX_IO.ReadReg(ISM330DHCX_REG_OUTX_L_G, (uint8_t*)pData, 6) != ISM330DHCX_OK){
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	2206      	movs	r2, #6
 80011e0:	68f9      	ldr	r1, [r7, #12]
 80011e2:	2022      	movs	r0, #34	; 0x22
 80011e4:	4798      	blx	r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <ISM330DHCX_ReadAngularVelocity+0x64>
		_log(log_ism330dhcx, "Read Acceleration failed");
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <ISM330DHCX_ReadAngularVelocity+0x78>)
 80011ee:	2004      	movs	r0, #4
 80011f0:	f000 fa26 	bl	8001640 <_log>
	}
	Dev->DataReadyFlag = ISM330DHCX_DataNotReady;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	751a      	strb	r2, [r3, #20]
	return ISM330DHCX_DataReady;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08009c34 	.word	0x08009c34
 8001208:	08009c4c 	.word	0x08009c4c

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db12      	blt.n	8001280 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	490a      	ldr	r1, [pc, #40]	; (800128c <__NVIC_DisableIRQ+0x44>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	3320      	adds	r3, #32
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100

08001290 <ISM330DHCX_IO_Init>:
static void ISM330DHCX_IO_IRQDisable(void);

/**************************************//**************************************//**************************************
 * Private Function Definitions
 **************************************//**************************************//**************************************/
static void ISM330DHCX_IO_Init(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	  HAL_Delay(10);      /* Device has a 10ms boot sequence on power up */
 8001294:	200a      	movs	r0, #10
 8001296:	f000 fe61 	bl	8001f5c <HAL_Delay>
	  ISM330DHCX_GPIO_Init();
 800129a:	f000 f8b7 	bl	800140c <ISM330DHCX_GPIO_Init>
	  MX_I2C2_Init();
 800129e:	f000 f8fd 	bl	800149c <MX_I2C2_Init>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <ISM330DHCX_IO_DeInit>:

static void ISM330DHCX_IO_DeInit(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	  //HAL_I2C_DeInit(&hi2c2); Do not do this if more than one device shares the I2C bus
	  HAL_GPIO_DeInit(ISM330DHCX_IRQ_GPIO_Port, ISM330DHCX_IRQ_Pin); //De-init the GPIO Pin
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <ISM330DHCX_IO_DeInit+0x14>)
 80012b2:	f001 f95f 	bl	8002574 <HAL_GPIO_DeInit>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	42021000 	.word	0x42021000

080012c0 <ISM330DHCX_IO_WriteReg>:

static ISM330DHCX_Status_t ISM330DHCX_IO_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, ISM330DHCX_I2C_ADDR, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, HAL_MAX_DELAY) != HAL_OK){
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	9102      	str	r1, [sp, #8]
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	21d6      	movs	r1, #214	; 0xd6
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <ISM330DHCX_IO_WriteReg+0x50>)
 80012ea:	f001 faf9 	bl	80028e0 <HAL_I2C_Mem_Write>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <ISM330DHCX_IO_WriteReg+0x44>
		_log(log_i2c,"Write to ISM330DHCX Reg address %x failed.",RegAddr);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4906      	ldr	r1, [pc, #24]	; (8001314 <ISM330DHCX_IO_WriteReg+0x54>)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f9a0 	bl	8001640 <_log>
		return ISM330DHCX_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <ISM330DHCX_IO_WriteReg+0x46>
	}
	return ISM330DHCX_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000a0 	.word	0x200000a0
 8001314:	08009ca4 	.word	0x08009ca4

08001318 <ISM330DHCX_IO_ReadReg>:

static ISM330DHCX_Status_t ISM330DHCX_IO_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af04      	add	r7, sp, #16
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c2, ISM330DHCX_I2C_ADDR | 0x01, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, HAL_MAX_DELAY) != HAL_OK){
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	b29a      	uxth	r2, r3
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	9102      	str	r1, [sp, #8]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	21d7      	movs	r1, #215	; 0xd7
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <ISM330DHCX_IO_ReadReg+0x50>)
 8001342:	f001 fbe1 	bl	8002b08 <HAL_I2C_Mem_Read>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <ISM330DHCX_IO_ReadReg+0x44>
		_log(log_i2c,"Read from ISM330DHCX Reg address %x failed.",RegAddr);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	461a      	mov	r2, r3
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <ISM330DHCX_IO_ReadReg+0x54>)
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f974 	bl	8001640 <_log>
		return ISM330DHCX_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <ISM330DHCX_IO_ReadReg+0x46>
	}
	return ISM330DHCX_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a0 	.word	0x200000a0
 800136c:	08009cd0 	.word	0x08009cd0

08001370 <ISM330DHCX_IO_IOCtl>:

static uint8_t ISM330DHCX_IO_IOCtl(ISM330DHCX_IO_Cmd_t Cmd){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	uint8_t PinStatus;
	switch(Cmd){
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d00e      	beq.n	800139e <ISM330DHCX_IO_IOCtl+0x2e>
 8001380:	2b02      	cmp	r3, #2
 8001382:	dc19      	bgt.n	80013b8 <ISM330DHCX_IO_IOCtl+0x48>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <ISM330DHCX_IO_IOCtl+0x1e>
 8001388:	2b01      	cmp	r3, #1
 800138a:	d004      	beq.n	8001396 <ISM330DHCX_IO_IOCtl+0x26>
			return 1;
		} else {
			return 0;
		}
	default:
		break;
 800138c:	e014      	b.n	80013b8 <ISM330DHCX_IO_IOCtl+0x48>
		ISM330DHCX_IO_IRQEnable();
 800138e:	f000 f82f 	bl	80013f0 <ISM330DHCX_IO_IRQEnable>
		return ISM330DHCX_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e012      	b.n	80013bc <ISM330DHCX_IO_IOCtl+0x4c>
		ISM330DHCX_IO_IRQDisable();
 8001396:	f000 f832 	bl	80013fe <ISM330DHCX_IO_IRQDisable>
		return ISM330DHCX_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e00e      	b.n	80013bc <ISM330DHCX_IO_IOCtl+0x4c>
		PinStatus = ISM330DHCX_IO_ReadIntPin(ISM330DHCX_IRQ_Pin);
 800139e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013a2:	f000 f80f 	bl	80013c4 <ISM330DHCX_IO_ReadIntPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
		if(PinStatus == GPIO_PIN_SET){
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <ISM330DHCX_IO_IOCtl+0x44>
			return 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e003      	b.n	80013bc <ISM330DHCX_IO_IOCtl+0x4c>
			return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e001      	b.n	80013bc <ISM330DHCX_IO_IOCtl+0x4c>
		break;
 80013b8:	bf00      	nop

	}
	return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <ISM330DHCX_IO_ReadIntPin>:

static uint8_t ISM330DHCX_IO_ReadIntPin(uint16_t Pin){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(ISM330DHCX_IRQ_GPIO_Port, Pin) == GPIO_PIN_SET){
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <ISM330DHCX_IO_ReadIntPin+0x28>)
 80013d4:	f001 f9ac 	bl	8002730 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <ISM330DHCX_IO_ReadIntPin+0x1e>
		return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <ISM330DHCX_IO_ReadIntPin+0x20>
	} else {
		return 0;
 80013e2:	2300      	movs	r3, #0
	}
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	42021000 	.word	0x42021000

080013f0 <ISM330DHCX_IO_IRQEnable>:

static void ISM330DHCX_IO_IRQEnable(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(ISM330DHCX_IRQ_EXTI_IRQn);
 80013f4:	2016      	movs	r0, #22
 80013f6:	f7ff ff09 	bl	800120c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}

080013fe <ISM330DHCX_IO_IRQDisable>:

static void ISM330DHCX_IO_IRQDisable(void){
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(ISM330DHCX_IRQ_EXTI_IRQn);
 8001402:	2016      	movs	r0, #22
 8001404:	f7ff ff20 	bl	8001248 <__NVIC_DisableIRQ>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <ISM330DHCX_GPIO_Init>:
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);

}

/* USER CODE BEGIN 2 */
void ISM330DHCX_GPIO_Init(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 8001424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 800142a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 8001434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 8001442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <ISM330DHCX_GPIO_Init+0x84>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = ISM330DHCX_IRQ_Pin;
 800145e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001462:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <ISM330DHCX_GPIO_Init+0x88>)
 8001466:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(ISM330DHCX_IRQ_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4809      	ldr	r0, [pc, #36]	; (8001498 <ISM330DHCX_GPIO_Init+0x8c>)
 8001474:	f000 fea6 	bl	80021c4 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2016      	movs	r0, #22
 800147e:	f000 fe6c 	bl	800215a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001482:	2016      	movs	r0, #22
 8001484:	f000 fe83 	bl	800218e <HAL_NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	46020c00 	.word	0x46020c00
 8001494:	10110000 	.word	0x10110000
 8001498:	42021000 	.word	0x42021000

0800149c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_I2C2_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_I2C2_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_I2C2_Init+0x74>)
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <MX_I2C2_Init+0x7c>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_I2C2_Init+0x74>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_I2C2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <MX_I2C2_Init+0x74>)
 80014d8:	f001 f973 	bl	80027c2 <HAL_I2C_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014e2:	f000 fa9b 	bl	8001a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <MX_I2C2_Init+0x74>)
 80014ea:	f001 fecd 	bl	8003288 <HAL_I2CEx_ConfigAnalogFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 fa92 	bl	8001a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_I2C2_Init+0x74>)
 80014fc:	f001 ff0f 	bl	800331e <HAL_I2CEx_ConfigDigitalFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 fa89 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000a0 	.word	0x200000a0
 8001514:	40005800 	.word	0x40005800
 8001518:	30909dec 	.word	0x30909dec

0800151c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0bc      	sub	sp, #240	; 0xf0
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	22c8      	movs	r2, #200	; 0xc8
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fd4f 	bl	8007fe0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_I2C_MspInit+0xc4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d144      	bne.n	80015d6 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800154c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001558:	2300      	movs	r3, #0
 800155a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fa97 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 800156c:	f000 fa56 	bl	8001a1c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 8001572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800157c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 8001582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 800158e:	2330      	movs	r3, #48	; 0x30
 8001590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015b0:	4619      	mov	r1, r3
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <HAL_I2C_MspInit+0xcc>)
 80015b4:	f000 fe06 	bl	80021c4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	37f0      	adds	r7, #240	; 0xf0
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40005800 	.word	0x40005800
 80015e4:	46020c00 	.word	0x46020c00
 80015e8:	42021c00 	.word	0x42021c00

080015ec <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80015f0:	2000      	movs	r0, #0
 80015f2:	f001 fee1 	bl	80033b8 <HAL_ICACHE_ConfigAssociativityMode>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80015fc:	f000 fa0e 	bl	8001a1c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001600:	f001 fefa 	bl	80033f8 <HAL_ICACHE_Enable>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800160a:	f000 fa07 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <__io_putchar>:
#include "stm32u5xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8001622:	f107 010f 	add.w	r1, r7, #15
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <__io_putchar+0x28>)
 800162e:	f005 fecb 	bl	80073c8 <HAL_UART_Transmit>
	return ch;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000eb7c 	.word	0x2000eb7c

08001640 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8001640:	b40e      	push	{r1, r2, r3}
 8001642:	b580      	push	{r7, lr}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d821      	bhi.n	800169c <_log+0x5c>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <_log+0x20>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001675 	.word	0x08001675
 8001664:	0800167d 	.word	0x0800167d
 8001668:	08001685 	.word	0x08001685
 800166c:	0800168d 	.word	0x0800168d
 8001670:	08001695 	.word	0x08001695
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 8001674:	4814      	ldr	r0, [pc, #80]	; (80016c8 <_log+0x88>)
 8001676:	f006 ffb5 	bl	80085e4 <iprintf>
				break;
 800167a:	e012      	b.n	80016a2 <_log+0x62>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <_log+0x8c>)
 800167e:	f006 ffb1 	bl	80085e4 <iprintf>
				break;
 8001682:	e00e      	b.n	80016a2 <_log+0x62>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <_log+0x90>)
 8001686:	f006 ffad 	bl	80085e4 <iprintf>
				break;
 800168a:	e00a      	b.n	80016a2 <_log+0x62>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 800168c:	4811      	ldr	r0, [pc, #68]	; (80016d4 <_log+0x94>)
 800168e:	f006 ffa9 	bl	80085e4 <iprintf>
				break;
 8001692:	e006      	b.n	80016a2 <_log+0x62>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <_log+0x98>)
 8001696:	f006 ffa5 	bl	80085e4 <iprintf>
				break;
 800169a:	e002      	b.n	80016a2 <_log+0x62>
		default:
			printf("Unknown Debug Subsystem: ");
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <_log+0x9c>)
 800169e:	f006 ffa1 	bl	80085e4 <iprintf>
	}
	vfprintf(stdout, msg, args);
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <_log+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	69f9      	ldr	r1, [r7, #28]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 fdf9 	bl	80082a4 <vfiprintf>
	printf("\n");
 80016b2:	200a      	movs	r0, #10
 80016b4:	f006 ffae 	bl	8008614 <putchar>
	va_end(args);
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016c2:	b003      	add	sp, #12
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	08009cfc 	.word	0x08009cfc
 80016cc:	08009d14 	.word	0x08009d14
 80016d0:	08009d30 	.word	0x08009d30
 80016d4:	08009d4c 	.word	0x08009d4c
 80016d8:	08009d68 	.word	0x08009d68
 80016dc:	08009d88 	.word	0x08009d88
 80016e0:	20000020 	.word	0x20000020
 80016e4:	00000000 	.word	0x00000000

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  ISM330DHCX_Init_Struct_t Sensor_Settings = {
 80016ee:	4a8e      	ldr	r2, [pc, #568]	; (8001928 <main+0x240>)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	8019      	strh	r1, [r3, #0]
 80016fc:	3302      	adds	r3, #2
 80016fe:	0c0a      	lsrs	r2, r1, #16
 8001700:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001702:	f000 fba7 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001706:	f000 f929 	bl	800195c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800170a:	f000 f981 	bl	8001a10 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USART1_UART_Init();
 800170e:	f000 fac3 	bl	8001c98 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 8001712:	f7ff ff6b 	bl	80015ec <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  ISM330DHCX_Init(Sensor_Settings, &IMU, ISM330DHCX_HardwareDrv);
 8001716:	4d85      	ldr	r5, [pc, #532]	; (800192c <main+0x244>)
 8001718:	466c      	mov	r4, sp
 800171a:	1d2b      	adds	r3, r5, #4
 800171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	4a82      	ldr	r2, [pc, #520]	; (8001930 <main+0x248>)
 8001726:	1d39      	adds	r1, r7, #4
 8001728:	c903      	ldmia	r1, {r0, r1}
 800172a:	f7ff fbf1 	bl	8000f10 <ISM330DHCX_Init>
  uint8_t start_condition = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	70fb      	strb	r3, [r7, #3]
  uint32_t stop_time = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  uint16_t samples = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* wait to receive 0xFF on the debug UART*/
	  while(start_condition != 0xFF){
 800173a:	e006      	b.n	800174a <main+0x62>
		  HAL_UART_Receive(&huart1, &start_condition, 1, HAL_MAX_DELAY);
 800173c:	1cf9      	adds	r1, r7, #3
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	487b      	ldr	r0, [pc, #492]	; (8001934 <main+0x24c>)
 8001746:	f005 fee4 	bl	8007512 <HAL_UART_Receive>
	  while(start_condition != 0xFF){
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d1f5      	bne.n	800173c <main+0x54>
	  }

	  stop_time = HAL_GetTick() + 5000;
 8001750:	f000 fbf8 	bl	8001f44 <HAL_GetTick>
 8001754:	4603      	mov	r3, r0
 8001756:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800175a:	3308      	adds	r3, #8
 800175c:	60fb      	str	r3, [r7, #12]
	  /*Log Data for 5 seconds*/
	  while(HAL_GetTick() < stop_time){
 800175e:	e048      	b.n	80017f2 <main+0x10a>
		 if(IMU.DataReadyFlag == 1 || IMU.ISM330DHCX_IO.ioctl(ISM330DHCX_ReadInt1Pin) == 1){
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <main+0x248>)
 8001762:	7d1b      	ldrb	r3, [r3, #20]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d006      	beq.n	8001776 <main+0x8e>
 8001768:	4b71      	ldr	r3, [pc, #452]	; (8001930 <main+0x248>)
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2002      	movs	r0, #2
 800176e:	4798      	blx	r3
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d13d      	bne.n	80017f2 <main+0x10a>
			 IMU.ISM330DHCX_IO.ioctl(ISM330DHCX_IRQDisable);
 8001776:	4b6e      	ldr	r3, [pc, #440]	; (8001930 <main+0x248>)
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	2001      	movs	r0, #1
 800177c:	4798      	blx	r3

			 ISM330DHCX_ReadAcceleration(&IMU);
 800177e:	486c      	ldr	r0, [pc, #432]	; (8001930 <main+0x248>)
 8001780:	f7ff fcc6 	bl	8001110 <ISM330DHCX_ReadAcceleration>
			 ISM330DHCX_ReadAngularVelocity(&IMU);
 8001784:	486a      	ldr	r0, [pc, #424]	; (8001930 <main+0x248>)
 8001786:	f7ff fd03 	bl	8001190 <ISM330DHCX_ReadAngularVelocity>

			 Ax_log[samples] = IMU.Acceleration[0];
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	4a68      	ldr	r2, [pc, #416]	; (8001930 <main+0x248>)
 800178e:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8001792:	4a69      	ldr	r2, [pc, #420]	; (8001938 <main+0x250>)
 8001794:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Ay_log[samples] = IMU.Acceleration[1];
 8001798:	8afb      	ldrh	r3, [r7, #22]
 800179a:	4a65      	ldr	r2, [pc, #404]	; (8001930 <main+0x248>)
 800179c:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80017a0:	4a66      	ldr	r2, [pc, #408]	; (800193c <main+0x254>)
 80017a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Az_log[samples] = IMU.Acceleration[2];
 80017a6:	8afb      	ldrh	r3, [r7, #22]
 80017a8:	4a61      	ldr	r2, [pc, #388]	; (8001930 <main+0x248>)
 80017aa:	f9b2 100a 	ldrsh.w	r1, [r2, #10]
 80017ae:	4a64      	ldr	r2, [pc, #400]	; (8001940 <main+0x258>)
 80017b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wx_log[samples] = IMU.AngularVelocity[0];
 80017b4:	8afb      	ldrh	r3, [r7, #22]
 80017b6:	4a5e      	ldr	r2, [pc, #376]	; (8001930 <main+0x248>)
 80017b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80017bc:	4a61      	ldr	r2, [pc, #388]	; (8001944 <main+0x25c>)
 80017be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wy_log[samples] = IMU.AngularVelocity[1];
 80017c2:	8afb      	ldrh	r3, [r7, #22]
 80017c4:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <main+0x248>)
 80017c6:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80017ca:	4a5f      	ldr	r2, [pc, #380]	; (8001948 <main+0x260>)
 80017cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			 Wz_log[samples] = IMU.AngularVelocity[2];
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	4a57      	ldr	r2, [pc, #348]	; (8001930 <main+0x248>)
 80017d4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80017d8:	4a5c      	ldr	r2, [pc, #368]	; (800194c <main+0x264>)
 80017da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			 samples++;
 80017de:	8afb      	ldrh	r3, [r7, #22]
 80017e0:	3301      	adds	r3, #1
 80017e2:	82fb      	strh	r3, [r7, #22]
			 IMU.DataReadyFlag = 0;
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <main+0x248>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	751a      	strb	r2, [r3, #20]
			 IMU.ISM330DHCX_IO.ioctl(ISM330DHCX_IRQEnable);
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <main+0x248>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	2000      	movs	r0, #0
 80017f0:	4798      	blx	r3
	  while(HAL_GetTick() < stop_time){
 80017f2:	f000 fba7 	bl	8001f44 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d8b0      	bhi.n	8001760 <main+0x78>
		 }
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)Ax_log, samples, HAL_MAX_DELAY);
 80017fe:	8afa      	ldrh	r2, [r7, #22]
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	494c      	ldr	r1, [pc, #304]	; (8001938 <main+0x250>)
 8001806:	484b      	ldr	r0, [pc, #300]	; (8001934 <main+0x24c>)
 8001808:	f005 fdde 	bl	80073c8 <HAL_UART_Transmit>
	  for(uint32_t i = 0; i < samples; i++){
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	e072      	b.n	80018f8 <main+0x210>
		  Pitch1Angle[i] = asin((Az_log[i] * .122 * .001)) * 180 / 3.1415;
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <main+0x258>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe7e 	bl	800051c <__aeabi_i2d>
 8001820:	a33b      	add	r3, pc, #236	; (adr r3, 8001910 <main+0x228>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fee3 	bl	80005f0 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	a339      	add	r3, pc, #228	; (adr r3, 8001918 <main+0x230>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe feda 	bl	80005f0 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b17 	vmov	d7, r2, r3
 8001844:	eeb0 0a47 	vmov.f32	s0, s14
 8001848:	eef0 0a67 	vmov.f32	s1, s15
 800184c:	f007 fbd4 	bl	8008ff8 <asin>
 8001850:	ec51 0b10 	vmov	r0, r1, d0
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <main+0x268>)
 800185a:	f7fe fec9 	bl	80005f0 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	a32e      	add	r3, pc, #184	; (adr r3, 8001920 <main+0x238>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ffea 	bl	8000844 <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f96a 	bl	8000b50 <__aeabi_d2f>
 800187c:	4602      	mov	r2, r0
 800187e:	4935      	ldr	r1, [pc, #212]	; (8001954 <main+0x26c>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	601a      	str	r2, [r3, #0]
		  RollAngle1[i] = atan2(-Ax_log[i], Ay_log[i])* 180 / 3.1415;
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <main+0x250>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001890:	425b      	negs	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe42 	bl	800051c <__aeabi_i2d>
 8001898:	4604      	mov	r4, r0
 800189a:	460d      	mov	r5, r1
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <main+0x254>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe39 	bl	800051c <__aeabi_i2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	ec43 2b11 	vmov	d1, r2, r3
 80018b2:	ec45 4b10 	vmov	d0, r4, r5
 80018b6:	f007 fbd3 	bl	8009060 <atan2>
 80018ba:	ec51 0b10 	vmov	r0, r1, d0
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <main+0x268>)
 80018c4:	f7fe fe94 	bl	80005f0 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	a313      	add	r3, pc, #76	; (adr r3, 8001920 <main+0x238>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffb5 	bl	8000844 <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f935 	bl	8000b50 <__aeabi_d2f>
 80018e6:	4602      	mov	r2, r0
 80018e8:	491b      	ldr	r1, [pc, #108]	; (8001958 <main+0x270>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	601a      	str	r2, [r3, #0]
	  for(uint32_t i = 0; i < samples; i++){
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3301      	adds	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	8afb      	ldrh	r3, [r7, #22]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d388      	bcc.n	8001812 <main+0x12a>

	  }
	  samples = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	82fb      	strh	r3, [r7, #22]
	  start_condition = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	70fb      	strb	r3, [r7, #3]
	  while(start_condition != 0xFF){
 8001908:	e71f      	b.n	800174a <main+0x62>
 800190a:	bf00      	nop
 800190c:	f3af 8000 	nop.w
 8001910:	5a1cac08 	.word	0x5a1cac08
 8001914:	3fbf3b64 	.word	0x3fbf3b64
 8001918:	d2f1a9fc 	.word	0xd2f1a9fc
 800191c:	3f50624d 	.word	0x3f50624d
 8001920:	c083126f 	.word	0xc083126f
 8001924:	400921ca 	.word	0x400921ca
 8001928:	08009da4 	.word	0x08009da4
 800192c:	20000000 	.word	0x20000000
 8001930:	200000ec 	.word	0x200000ec
 8001934:	2000eb7c 	.word	0x2000eb7c
 8001938:	20000118 	.word	0x20000118
 800193c:	20002ff8 	.word	0x20002ff8
 8001940:	20005ed8 	.word	0x20005ed8
 8001944:	20001888 	.word	0x20001888
 8001948:	20004768 	.word	0x20004768
 800194c:	20007648 	.word	0x20007648
 8001950:	40668000 	.word	0x40668000
 8001954:	2000bc98 	.word	0x2000bc98
 8001958:	20008db8 	.word	0x20008db8

0800195c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09e      	sub	sp, #120	; 0x78
 8001960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	2260      	movs	r2, #96	; 0x60
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f006 fb38 	bl	8007fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001980:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001984:	f001 fd48 	bl	8003418 <HAL_PWREx_ControlVoltageScaling>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800198e:	f000 f845 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	2310      	movs	r3, #16
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a0:	2302      	movs	r3, #2
 80019a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019b0:	230a      	movs	r3, #10
 80019b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80019c0:	230c      	movs	r3, #12
 80019c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f001 fdb5 	bl	800353c <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80019d8:	f000 f820 	bl	8001a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019dc:	231f      	movs	r3, #31
 80019de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2303      	movs	r3, #3
 80019e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	2104      	movs	r1, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fc75 	bl	80042e8 <HAL_RCC_ClockConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001a04:	f000 f80a 	bl	8001a1c <Error_Handler>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3778      	adds	r7, #120	; 0x78
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a14:	f001 fd82 	bl	800351c <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <Error_Handler+0x8>
	...

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_MspInit+0x30>)
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x30>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x30>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	46020c00 	.word	0x46020c00

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 fa38 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM330DHCX_IRQ_Pin);
 8001ab4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ab8:	f000 fe52 	bl	8002760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
	IMU.DataReadyFlag = 1;
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	751a      	strb	r2, [r3, #20]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	200000ec 	.word	0x200000ec

08001ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af2:	e000      	b.n	8001af6 <_read+0x16>
 8001af4:	bf00      	nop
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
	}

return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd6d 	bl	8001614 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
	}
	return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_isatty>:

int _isatty(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f006 f9ce 	bl	8007f8c <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200c0000 	.word	0x200c0000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	2000eb78 	.word	0x2000eb78
 8001c24:	2000ec20 	.word	0x2000ec20

08001c28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <SystemInit+0x68>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <SystemInit+0x68>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <SystemInit+0x6c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <SystemInit+0x6c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <SystemInit+0x6c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <SystemInit+0x6c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <SystemInit+0x6c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <SystemInit+0x6c>)
 8001c5a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c5e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <SystemInit+0x6c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <SystemInit+0x6c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <SystemInit+0x6c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <SystemInit+0x6c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SystemInit+0x68>)
 8001c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c82:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00
 8001c94:	46020c00 	.word	0x46020c00

08001c98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <MX_USART1_UART_Init+0x94>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce0:	4811      	ldr	r0, [pc, #68]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001ce2:	f005 fb21 	bl	8007328 <HAL_UART_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cec:	f7ff fe96 	bl	8001a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001cf4:	f006 f880 	bl	8007df8 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfe:	f7ff fe8d 	bl	8001a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001d06:	f006 f8b5 	bl	8007e74 <HAL_UARTEx_SetRxFifoThreshold>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d10:	f7ff fe84 	bl	8001a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <MX_USART1_UART_Init+0x90>)
 8001d16:	f006 f836 	bl	8007d86 <HAL_UARTEx_DisableFifoMode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d20:	f7ff fe7c 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	2000eb7c 	.word	0x2000eb7c
 8001d2c:	40013800 	.word	0x40013800

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0bc      	sub	sp, #240	; 0xf0
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	22c8      	movs	r2, #200	; 0xc8
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f006 f945 	bl	8007fe0 <memset>
  if(uartHandle->Instance==USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <HAL_UART_MspInit+0xc4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d145      	bne.n	8001dec <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d60:	f04f 0201 	mov.w	r2, #1
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fe8d 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001d80:	f7ff fe4c 	bl	8001a1c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_UART_MspInit+0xc8>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin;
 8001dc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_UART_MspInit+0xcc>)
 8001de8:	f000 f9ec 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	37f0      	adds	r7, #240	; 0xf0
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	46020c00 	.word	0x46020c00
 8001dfc:	42020000 	.word	0x42020000

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
	ldr	r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <LoopForever+0x16>)
	cmp	r2, r3
 8001e26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2a:	f7ff fefd 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f006 f8b3 	bl	8007f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff fc59 	bl	80016e8 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e38:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001e3c:	08009fc8 	.word	0x08009fc8
	ldr	r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e44:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001e48:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001e4c:	2000ec20 	.word	0x2000ec20

08001e50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_Init+0x4c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_Init+0x4c>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f96d 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e6a:	f002 fc2f 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_Init+0x50>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	490b      	ldr	r1, [pc, #44]	; (8001ea8 <HAL_Init+0x54>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x58>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e84:	200f      	movs	r0, #15
 8001e86:	f000 f813 	bl	8001eb0 <HAL_InitTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e002      	b.n	8001e9a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fdc8 	bl	8001a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	46020c00 	.word	0x46020c00
 8001ea8:	08009dac 	.word	0x08009dac
 8001eac:	20000014 	.word	0x20000014

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_InitTick+0x60>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e021      	b.n	8001f08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_InitTick+0x64>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_InitTick+0x60>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f965 	bl	80021aa <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 f92f 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x68>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000001c 	.word	0x2000001c
 8001f14:	20000014 	.word	0x20000014
 8001f18:	20000018 	.word	0x20000018

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000001c 	.word	0x2000001c
 8001f40:	2000ec0c 	.word	0x2000ec0c

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	2000ec0c 	.word	0x2000ec0c

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000001c 	.word	0x2000001c

08001fa4 <__NVIC_SetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff40 	bl	8001fec <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff90 	bl	8002098 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5f 	bl	8002044 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff33 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ffa4 	bl	8002100 <SysTick_Config>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021d6:	e1ba      	b.n	800254e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 81aa 	beq.w	8002548 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a55      	ldr	r2, [pc, #340]	; (800234c <HAL_GPIO_Init+0x188>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d15d      	bne.n	80022b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	4013      	ands	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	4313      	orrs	r3, r2
 8002224:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x18c>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002234:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_GPIO_Init+0x18c>)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	3208      	adds	r2, #8
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	4013      	ands	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220b      	movs	r2, #11
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	4313      	orrs	r3, r2
 8002278:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3208      	adds	r2, #8
 8002282:	69f9      	ldr	r1, [r7, #28]
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2202      	movs	r2, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e067      	b.n	8002388 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x104>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b12      	cmp	r3, #18
 80022c6:	d145      	bne.n	8002354 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	4313      	orrs	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69f9      	ldr	r1, [r7, #28]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	4013      	ands	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	4313      	orrs	r3, r2
 8002340:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e01e      	b.n	8002388 <HAL_GPIO_Init+0x1c4>
 800234a:	bf00      	nop
 800234c:	46020000 	.word	0x46020000
 8002350:	08009e04 	.word	0x08009e04
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	4013      	ands	r3, r2
 800236a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0203 	and.w	r2, r3, #3
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	4313      	orrs	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d00b      	beq.n	80023a8 <HAL_GPIO_Init+0x1e4>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d007      	beq.n	80023a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239c:	2b11      	cmp	r3, #17
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b12      	cmp	r3, #18
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4013      	ands	r3, r2
 80023be:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80023de:	2201      	movs	r2, #1
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	4313      	orrs	r3, r2
 8002402:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69fa      	ldr	r2, [r7, #28]
 8002426:	4013      	ands	r3, r2
 8002428:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	4313      	orrs	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d07c      	beq.n	8002548 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800244e:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_GPIO_Init+0x3a8>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3318      	adds	r3, #24
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	4013      	ands	r3, r2
 8002470:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0a9a      	lsrs	r2, r3, #10
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_GPIO_Init+0x3ac>)
 8002478:	4013      	ands	r3, r2
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	00d2      	lsls	r2, r2, #3
 8002482:	4093      	lsls	r3, r2
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	4313      	orrs	r3, r2
 8002488:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800248a:	4938      	ldr	r1, [pc, #224]	; (800256c <HAL_GPIO_Init+0x3a8>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3318      	adds	r3, #24
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_GPIO_Init+0x3a8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <HAL_GPIO_Init+0x3a8>)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_GPIO_Init+0x3a8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <HAL_GPIO_Init+0x3a8>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <HAL_GPIO_Init+0x3a8>)
 80024ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_GPIO_Init+0x3a8>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_GPIO_Init+0x3a8>)
 800251c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002520:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	4013      	ands	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_GPIO_Init+0x3a8>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f ae3d 	bne.w	80021d8 <HAL_GPIO_Init+0x14>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3724      	adds	r7, #36	; 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	46022000 	.word	0x46022000
 8002570:	002f7f7f 	.word	0x002f7f7f

08002574 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002586:	e0bc      	b.n	8002702 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002588:	2201      	movs	r2, #1
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80ad 	beq.w	80026fc <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <HAL_GPIO_DeInit+0x1ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d115      	bne.n	80025d6 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80025aa:	4a5e      	ldr	r2, [pc, #376]	; (8002724 <HAL_GPIO_DeInit+0x1b0>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025b2:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80025b4:	4a5b      	ldr	r2, [pc, #364]	; (8002724 <HAL_GPIO_DeInit+0x1b0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_GPIO_DeInit+0x1ac>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4954      	ldr	r1, [pc, #336]	; (8002720 <HAL_GPIO_DeInit+0x1ac>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e053      	b.n	800267e <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 80025d6:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3318      	adds	r3, #24
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0a9a      	lsrs	r2, r3, #10
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_GPIO_DeInit+0x1b8>)
 80025fe:	4013      	ands	r3, r2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f002 0203 	and.w	r2, r2, #3
 8002606:	00d2      	lsls	r2, r2, #3
 8002608:	4093      	lsls	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d136      	bne.n	800267e <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8002610:	4b45      	ldr	r3, [pc, #276]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002612:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	4943      	ldr	r1, [pc, #268]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 800261c:	4013      	ands	r3, r2
 800261e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002624:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	493e      	ldr	r1, [pc, #248]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 800262e:	4013      	ands	r3, r2
 8002630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8002634:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	493a      	ldr	r1, [pc, #232]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 800263e:	4013      	ands	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	4937      	ldr	r1, [pc, #220]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 800264c:	4013      	ands	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002660:	4a31      	ldr	r2, [pc, #196]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3318      	adds	r3, #24
 8002668:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43da      	mvns	r2, r3
 8002670:	482d      	ldr	r0, [pc, #180]	; (8002728 <HAL_GPIO_DeInit+0x1b4>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	400a      	ands	r2, r1
 8002678:	3318      	adds	r3, #24
 800267a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2103      	movs	r1, #3
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3208      	adds	r2, #8
 800269a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	08d2      	lsrs	r2, r2, #3
 80026b2:	4019      	ands	r1, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2103      	movs	r1, #3
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	2101      	movs	r1, #1
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2103      	movs	r1, #3
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	60da      	str	r2, [r3, #12]
    }

    position++;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	3301      	adds	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f47f af3c 	bne.w	8002588 <HAL_GPIO_DeInit+0x14>
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	46020000 	.word	0x46020000
 8002724:	08009e04 	.word	0x08009e04
 8002728:	46022000 	.word	0x46022000
 800272c:	002f7f7f 	.word	0x002f7f7f

08002730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	e001      	b.n	8002752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f99e 	bl	8001ac0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4618      	mov	r0, r3
 800279a:	f000 f807 	bl	80027ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	46022000 	.word	0x46022000

080027ac <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e081      	b.n	80028d8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7fe fe97 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2224      	movs	r2, #36	; 0x24
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002812:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002822:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002848:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d104      	bne.n	800285c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800285a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69d9      	ldr	r1, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b20      	cmp	r3, #32
 8002904:	f040 80f9 	bne.w	8002afa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_I2C_Mem_Write+0x34>
 800290e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0ed      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_I2C_Mem_Write+0x4e>
 800292a:	2302      	movs	r3, #2
 800292c:	e0e6      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002936:	f7ff fb05 	bl	8001f44 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2319      	movs	r3, #25
 8002942:	2201      	movs	r2, #1
 8002944:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fac3 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d1      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2221      	movs	r2, #33	; 0x21
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002980:	88f8      	ldrh	r0, [r7, #6]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4603      	mov	r3, r0
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f9d3 	bl	8002d3c <I2C_RequestMemoryWrite>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0a9      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d90e      	bls.n	80029d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22ff      	movs	r2, #255	; 0xff
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	8979      	ldrh	r1, [r7, #10]
 80029c0:	2300      	movs	r3, #0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fc2b 	bl	8003224 <I2C_TransferConfig>
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fc1a 	bl	8003224 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 faad 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e07b      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d034      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x1c8>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d130      	bne.n	8002aa8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa3f 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e04d      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d90e      	bls.n	8002a88 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	22ff      	movs	r2, #255	; 0xff
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	8979      	ldrh	r1, [r7, #10]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fbcf 	bl	8003224 <I2C_TransferConfig>
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fbbe 	bl	8003224 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d19e      	bne.n	80029f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fa8c 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e01a      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2220      	movs	r2, #32
 8002acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_I2C_Mem_Write+0x224>)
 8002ada:	400b      	ands	r3, r1
 8002adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fe00e800 	.word	0xfe00e800

08002b08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 80fd 	bne.w	8002d2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_I2C_Mem_Read+0x34>
 8002b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0f1      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x4e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0ea      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b5e:	f7ff f9f1 	bl	8001f44 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2319      	movs	r3, #25
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f9af 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d5      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2222      	movs	r2, #34	; 0x22
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba8:	88f8      	ldrh	r0, [r7, #6]
 8002baa:	893a      	ldrh	r2, [r7, #8]
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f913 	bl	8002de4 <I2C_RequestMemoryRead>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0ad      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2bff      	cmp	r3, #255	; 0xff
 8002bd8:	d90e      	bls.n	8002bf8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <HAL_I2C_Mem_Read+0x22c>)
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fb17 	bl	8003224 <I2C_TransferConfig>
 8002bf6:	e00f      	b.n	8002c18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	8979      	ldrh	r1, [r7, #10]
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_I2C_Mem_Read+0x22c>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fb06 	bl	8003224 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2104      	movs	r1, #4
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f956 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e07c      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d034      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x1d0>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d130      	bne.n	8002cd8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f927 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e04d      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2bff      	cmp	r3, #255	; 0xff
 8002c98:	d90e      	bls.n	8002cb8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fab7 	bl	8003224 <I2C_TransferConfig>
 8002cb6:	e00f      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 faa6 	bl	8003224 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d19a      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f974 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e01a      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_I2C_Mem_Read+0x230>)
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	80002400 	.word	0x80002400
 8002d38:	fe00e800 	.word	0xfe00e800

08002d3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	813b      	strh	r3, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	8979      	ldrh	r1, [r7, #10]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <I2C_RequestMemoryWrite+0xa4>)
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa5d 	bl	8003224 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	69b9      	ldr	r1, [r7, #24]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8f0 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e02c      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d84:	893b      	ldrh	r3, [r7, #8]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8e:	e015      	b.n	8002dbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	69b9      	ldr	r1, [r7, #24]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f8d6 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e012      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db2:	893b      	ldrh	r3, [r7, #8]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f884 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	80002000 	.word	0x80002000

08002de4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <I2C_RequestMemoryRead+0xa4>)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fa0a 	bl	8003224 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f89d 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02c      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
 8002e34:	e015      	b.n	8002e62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f883 	bl	8002f54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e012      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e58:	893b      	ldrh	r3, [r7, #8]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2140      	movs	r1, #64	; 0x40
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f831 	bl	8002ed4 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	80002000 	.word	0x80002000

08002e8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d103      	bne.n	8002eaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d007      	beq.n	8002ec8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	619a      	str	r2, [r3, #24]
  }
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee4:	e022      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d01e      	beq.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7ff f829 	bl	8001f44 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d113      	bne.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e00f      	b.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d0cd      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f60:	e02c      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f870 	bl	800304c <I2C_IsErrorOccurred>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e02a      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d01e      	beq.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe ffe1 	bl	8001f44 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d1cb      	bne.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe0:	e028      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f830 	bl	800304c <I2C_IsErrorOccurred>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e026      	b.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe ffa5 	bl	8001f44 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d113      	bne.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b20      	cmp	r3, #32
 8003040:	d1cf      	bne.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d075      	beq.n	8003164 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2210      	movs	r2, #16
 800307e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003080:	e056      	b.n	8003130 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d052      	beq.n	8003130 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe ff5b 	bl	8001f44 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_IsErrorOccurred+0x54>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d147      	bne.n	8003130 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c2:	d12e      	bne.n	8003122 <I2C_IsErrorOccurred+0xd6>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ca:	d02a      	beq.n	8003122 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d027      	beq.n	8003122 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030e2:	f7fe ff2f 	bl	8001f44 <HAL_GetTick>
 80030e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	e01b      	b.n	8003122 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ea:	f7fe ff2b 	bl	8001f44 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b19      	cmp	r3, #25
 80030f6:	d914      	bls.n	8003122 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b20      	cmp	r3, #32
 800312e:	d1dc      	bne.n	80030ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	d003      	beq.n	8003146 <I2C_IsErrorOccurred+0xfa>
 800313e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003142:	2b00      	cmp	r3, #0
 8003144:	d09d      	beq.n	8003082 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2220      	movs	r2, #32
 8003154:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003186:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0308 	orr.w	r3, r3, #8
 800319e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff fe56 	bl	8002e8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <I2C_IsErrorOccurred+0x1d4>)
 80031ec:	400b      	ands	r3, r1
 80031ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003218:	4618      	mov	r0, r3
 800321a:	3728      	adds	r7, #40	; 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	fe00e800 	.word	0xfe00e800

08003224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	4613      	mov	r3, r2
 8003234:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800323c:	7a7b      	ldrb	r3, [r7, #9]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003244:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	4313      	orrs	r3, r2
 800324e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003252:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	0d5b      	lsrs	r3, r3, #21
 800325e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <I2C_TransferConfig+0x60>)
 8003264:	430b      	orrs	r3, r1
 8003266:	43db      	mvns	r3, r3
 8003268:	ea02 0103 	and.w	r1, r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	03ff63ff 	.word	0x03ff63ff

08003288 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b20      	cmp	r3, #32
 800329c:	d138      	bne.n	8003310 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e032      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d139      	bne.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800333e:	2302      	movs	r3, #2
 8003340:	e033      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2224      	movs	r2, #36	; 0x24
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003370:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e007      	b.n	80033e6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0204 	bic.w	r2, r3, #4
 80033de:	4905      	ldr	r1, [pc, #20]	; (80033f4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40030400 	.word	0x40030400

080033f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_ICACHE_Enable+0x1c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <HAL_ICACHE_Enable+0x1c>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40030400 	.word	0x40030400

08003418 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003420:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003428:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d101      	bne.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e057      	b.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d90a      	bls.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	60d3      	str	r3, [r2, #12]
 8003452:	e007      	b.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800345c:	4925      	ldr	r1, [pc, #148]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4313      	orrs	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a24      	ldr	r2, [pc, #144]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	2232      	movs	r2, #50	; 0x32
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a21      	ldr	r2, [pc, #132]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003482:	e002      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x84>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f3      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01b      	beq.n	80034da <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a15      	ldr	r2, [pc, #84]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	2232      	movs	r2, #50	; 0x32
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	3301      	adds	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80034c0:	e002      	b.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_PWREx_ControlVoltageScaling+0xc2>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f3      	bne.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e000      	b.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	46020800 	.word	0x46020800
 80034f8:	20000014 	.word	0x20000014
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_PWREx_GetVoltageRange+0x18>)
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	46020800 	.word	0x46020800

0800351c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a04      	ldr	r2, [pc, #16]	; (8003538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	46020800 	.word	0x46020800

0800353c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08e      	sub	sp, #56	; 0x38
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f000 bec3 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003556:	4b9c      	ldr	r3, [pc, #624]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003560:	4b99      	ldr	r3, [pc, #612]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8172 	beq.w	800385c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_RCC_OscConfig+0x52>
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b0c      	cmp	r3, #12
 8003582:	f040 80e4 	bne.w	800374e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 80e0 	bne.w	800374e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358e:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_RCC_OscConfig+0x6c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f000 be9a 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ac:	4b86      	ldr	r3, [pc, #536]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d004      	beq.n	80035c2 <HAL_RCC_OscConfig+0x86>
 80035b8:	4b83      	ldr	r3, [pc, #524]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035c0:	e005      	b.n	80035ce <HAL_RCC_OscConfig+0x92>
 80035c2:	4b81      	ldr	r3, [pc, #516]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d255      	bcs.n	800367e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f9d3 	bl	8004988 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f000 be77 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035f8:	6093      	str	r3, [r2, #8]
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	4970      	ldr	r1, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003614:	d309      	bcc.n	800362a <HAL_RCC_OscConfig+0xee>
 8003616:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f023 021f 	bic.w	r2, r3, #31
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4969      	ldr	r1, [pc, #420]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e07e      	b.n	8003728 <HAL_RCC_OscConfig+0x1ec>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0a      	bge.n	8003648 <HAL_RCC_OscConfig+0x10c>
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	015b      	lsls	r3, r3, #5
 8003640:	4961      	ldr	r1, [pc, #388]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
 8003646:	e06f      	b.n	8003728 <HAL_RCC_OscConfig+0x1ec>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d30a      	bcc.n	8003668 <HAL_RCC_OscConfig+0x12c>
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
 8003666:	e05f      	b.n	8003728 <HAL_RCC_OscConfig+0x1ec>
 8003668:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	03db      	lsls	r3, r3, #15
 8003676:	4954      	ldr	r1, [pc, #336]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
 800367c:	e054      	b.n	8003728 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003688:	6093      	str	r3, [r2, #8]
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	494c      	ldr	r1, [pc, #304]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80036a4:	d309      	bcc.n	80036ba <HAL_RCC_OscConfig+0x17e>
 80036a6:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 021f 	bic.w	r2, r3, #31
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4945      	ldr	r1, [pc, #276]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
 80036b8:	e028      	b.n	800370c <HAL_RCC_OscConfig+0x1d0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	da0a      	bge.n	80036d8 <HAL_RCC_OscConfig+0x19c>
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	015b      	lsls	r3, r3, #5
 80036d0:	493d      	ldr	r1, [pc, #244]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60cb      	str	r3, [r1, #12]
 80036d6:	e019      	b.n	800370c <HAL_RCC_OscConfig+0x1d0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d30a      	bcc.n	80036f8 <HAL_RCC_OscConfig+0x1bc>
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	4935      	ldr	r1, [pc, #212]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
 80036f6:	e009      	b.n	800370c <HAL_RCC_OscConfig+0x1d0>
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	03db      	lsls	r3, r3, #15
 8003706:	4930      	ldr	r1, [pc, #192]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003708:	4313      	orrs	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f936 	bl	8004988 <RCC_SetFlashLatencyFromMSIRange>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f000 bdda 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003728:	f001 f8d8 	bl	80048dc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RCC_OscConfig+0x290>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fbbd 	bl	8001eb0 <HAL_InitTick>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808a 	beq.w	800385a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	f000 bdc7 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d066      	beq.n	8003824 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003762:	f7fe fbef 	bl	8001f44 <HAL_GetTick>
 8003766:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003768:	e009      	b.n	800377e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376a:	f7fe fbeb 	bl	8001f44 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d902      	bls.n	800377e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	f000 bdaf 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	4909      	ldr	r1, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80037b0:	d30e      	bcc.n	80037d0 <HAL_RCC_OscConfig+0x294>
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 021f 	bic.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4902      	ldr	r1, [pc, #8]	; (80037c8 <HAL_RCC_OscConfig+0x28c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60cb      	str	r3, [r1, #12]
 80037c4:	e04a      	b.n	800385c <HAL_RCC_OscConfig+0x320>
 80037c6:	bf00      	nop
 80037c8:	46020c00 	.word	0x46020c00
 80037cc:	20000018 	.word	0x20000018
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da0a      	bge.n	80037ee <HAL_RCC_OscConfig+0x2b2>
 80037d8:	4b9b      	ldr	r3, [pc, #620]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	4998      	ldr	r1, [pc, #608]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
 80037ec:	e036      	b.n	800385c <HAL_RCC_OscConfig+0x320>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d30a      	bcc.n	800380e <HAL_RCC_OscConfig+0x2d2>
 80037f8:	4b93      	ldr	r3, [pc, #588]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	4990      	ldr	r1, [pc, #576]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
 800380c:	e026      	b.n	800385c <HAL_RCC_OscConfig+0x320>
 800380e:	4b8e      	ldr	r3, [pc, #568]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	03db      	lsls	r3, r3, #15
 800381c:	498a      	ldr	r1, [pc, #552]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	60cb      	str	r3, [r1, #12]
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003824:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a87      	ldr	r2, [pc, #540]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003830:	f7fe fb88 	bl	8001f44 <HAL_GetTick>
 8003834:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003838:	f7fe fb84 	bl	8001f44 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	f000 bd48 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800384c:	4b7e      	ldr	r3, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <HAL_RCC_OscConfig+0x2fc>
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800385a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8094 	beq.w	8003992 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b08      	cmp	r3, #8
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x340>
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	2b0c      	cmp	r3, #12
 8003874:	d110      	bne.n	8003898 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003878:	2b03      	cmp	r3, #3
 800387a:	d10d      	bne.n	8003898 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8083 	beq.w	8003990 <HAL_RCC_OscConfig+0x454>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d17e      	bne.n	8003990 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	f000 bd22 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d106      	bne.n	80038b0 <HAL_RCC_OscConfig+0x374>
 80038a2:	4b69      	ldr	r3, [pc, #420]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a68      	ldr	r2, [pc, #416]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e041      	b.n	8003934 <HAL_RCC_OscConfig+0x3f8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b8:	d112      	bne.n	80038e0 <HAL_RCC_OscConfig+0x3a4>
 80038ba:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a62      	ldr	r2, [pc, #392]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5f      	ldr	r2, [pc, #380]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e029      	b.n	8003934 <HAL_RCC_OscConfig+0x3f8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x3d4>
 80038ea:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a53      	ldr	r2, [pc, #332]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80038fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e011      	b.n	8003934 <HAL_RCC_OscConfig+0x3f8>
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b47      	ldr	r3, [pc, #284]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800392e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d014      	beq.n	8003966 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800393c:	f7fe fb02 	bl	8001f44 <HAL_GetTick>
 8003940:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003942:	e009      	b.n	8003958 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe fafe 	bl	8001f44 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d902      	bls.n	8003958 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	f000 bcc2 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ef      	beq.n	8003944 <HAL_RCC_OscConfig+0x408>
 8003964:	e015      	b.n	8003992 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003966:	f7fe faed 	bl	8001f44 <HAL_GetTick>
 800396a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396c:	e009      	b.n	8003982 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396e:	f7fe fae9 	bl	8001f44 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d902      	bls.n	8003982 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f000 bcad 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ef      	bne.n	800396e <HAL_RCC_OscConfig+0x432>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d066      	beq.n	8003a6c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x474>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d11a      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d117      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <HAL_RCC_OscConfig+0x48e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f000 bc89 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	491b      	ldr	r1, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039de:	e045      	b.n	8003a6c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d024      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039f4:	f7fe faa6 	bl	8001f44 <HAL_GetTick>
 80039f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fa:	e009      	b.n	8003a10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fc:	f7fe faa2 	bl	8001f44 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	f000 bc66 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ef      	beq.n	80039fc <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	4907      	ldr	r1, [pc, #28]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	610b      	str	r3, [r1, #16]
 8003a30:	e01c      	b.n	8003a6c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_RCC_OscConfig+0x50c>)
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a3e:	f7fe fa81 	bl	8001f44 <HAL_GetTick>
 8003a42:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a44:	e00c      	b.n	8003a60 <HAL_RCC_OscConfig+0x524>
 8003a46:	bf00      	nop
 8003a48:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fe fa7a 	bl	8001f44 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d902      	bls.n	8003a60 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f000 bc3e 	b.w	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a60:	4baf      	ldr	r3, [pc, #700]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ef      	bne.n	8003a4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80c7 	beq.w	8003c08 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4ba7      	ldr	r3, [pc, #668]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d111      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	4ba4      	ldr	r3, [pc, #656]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a94:	4aa2      	ldr	r2, [pc, #648]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003a9e:	4ba0      	ldr	r3, [pc, #640]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ab2:	4b9c      	ldr	r3, [pc, #624]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d118      	bne.n	8003af0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003abe:	4b99      	ldr	r3, [pc, #612]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	4a98      	ldr	r2, [pc, #608]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fa3b 	bl	8001f44 <HAL_GetTick>
 8003ace:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fe fa37 	bl	8001f44 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e3fb      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05f      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003af8:	4b89      	ldr	r3, [pc, #548]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afe:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d037      	beq.n	8003b7e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e3da      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b36:	4a7a      	ldr	r2, [pc, #488]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b38:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003b40:	f7fe fa00 	bl	8001f44 <HAL_GetTick>
 8003b44:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fe f9fc 	bl	8001f44 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e3c0      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b5a:	4b71      	ldr	r3, [pc, #452]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ef      	bne.n	8003b48 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003b68:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	496a      	ldr	r1, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b68      	ldr	r3, [pc, #416]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b84:	4a66      	ldr	r2, [pc, #408]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003b8e:	f7fe f9d9 	bl	8001f44 <HAL_GetTick>
 8003b92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fe f9d5 	bl	8001f44 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e399      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ba8:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ef      	beq.n	8003b96 <HAL_RCC_OscConfig+0x65a>
 8003bb6:	e01b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bbe:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003bc0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003bc4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003bc8:	f7fe f9bc 	bl	8001f44 <HAL_GetTick>
 8003bcc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fe f9b8 	bl	8001f44 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e37c      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003be2:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1ef      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf8:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfe:	4a48      	ldr	r2, [pc, #288]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8112 	beq.w	8003e3a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d111      	bne.n	8003c4e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c30:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c4e:	4b35      	ldr	r3, [pc, #212]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c5a:	4b32      	ldr	r3, [pc, #200]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	4a31      	ldr	r2, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe f96d 	bl	8001f44 <HAL_GetTick>
 8003c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe f969 	bl	8001f44 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e32d      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCC_OscConfig+0x7e8>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01f      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ca4:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003ca6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cba:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cc4:	e018      	b.n	8003cf8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cee:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x7e4>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d058      	beq.n	8003db2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003d00:	f7fe f920 	bl	8001f44 <HAL_GetTick>
 8003d04:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	e00f      	b.n	8003d28 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe f91c 	bl	8001f44 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d906      	bls.n	8003d28 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e2de      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
 8003d1e:	bf00      	nop
 8003d20:	46020c00 	.word	0x46020c00
 8003d24:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	4b9c      	ldr	r3, [pc, #624]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0e8      	beq.n	8003d08 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d42:	4b96      	ldr	r3, [pc, #600]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d48:	4a94      	ldr	r2, [pc, #592]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fe f8f6 	bl	8001f44 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e2b8      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d6a:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ed      	beq.n	8003d54 <HAL_RCC_OscConfig+0x818>
 8003d78:	e053      	b.n	8003e22 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d7a:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d80:	4a86      	ldr	r2, [pc, #536]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe f8da 	bl	8001f44 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e29c      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003da2:	4b7e      	ldr	r3, [pc, #504]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1ed      	bne.n	8003d8c <HAL_RCC_OscConfig+0x850>
 8003db0:	e037      	b.n	8003e22 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003db2:	f7fe f8c7 	bl	8001f44 <HAL_GetTick>
 8003db6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fe f8c3 	bl	8001f44 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e285      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dd0:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ed      	bne.n	8003dba <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01a      	beq.n	8003e22 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df2:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe f8a1 	bl	8001f44 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e263      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1ed      	bne.n	8003dfe <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e30:	4a5a      	ldr	r2, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e32:	f023 0304 	bic.w	r3, r3, #4
 8003e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d036      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d019      	beq.n	8003e82 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e5a:	f7fe f873 	bl	8001f44 <HAL_GetTick>
 8003e5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e62:	f7fe f86f 	bl	8001f44 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e233      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e74:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x926>
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e8c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e8e:	f7fe f859 	bl	8001f44 <HAL_GetTick>
 8003e92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e96:	f7fe f855 	bl	8001f44 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e219      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d036      	beq.n	8003f2e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a33      	ldr	r2, [pc, #204]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ed4:	f7fe f836 	bl	8001f44 <HAL_GetTick>
 8003ed8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003edc:	f7fe f832 	bl	8001f44 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e1f6      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x9a0>
 8003efa:	e018      	b.n	8003f2e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003f08:	f7fe f81c 	bl	8001f44 <HAL_GetTick>
 8003f0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003f10:	f7fe f818 	bl	8001f44 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1dc      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d07f      	beq.n	800403a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d062      	beq.n	8004008 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f4c:	6093      	str	r3, [r2, #8]
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	4910      	ldr	r1, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003f68:	d309      	bcc.n	8003f7e <HAL_RCC_OscConfig+0xa42>
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 021f 	bic.w	r2, r3, #31
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	4909      	ldr	r1, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60cb      	str	r3, [r1, #12]
 8003f7c:	e02a      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa98>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da0c      	bge.n	8003fa0 <HAL_RCC_OscConfig+0xa64>
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	015b      	lsls	r3, r3, #5
 8003f94:	4901      	ldr	r1, [pc, #4]	; (8003f9c <HAL_RCC_OscConfig+0xa60>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60cb      	str	r3, [r1, #12]
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa98>
 8003f9c:	46020c00 	.word	0x46020c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d30a      	bcc.n	8003fc0 <HAL_RCC_OscConfig+0xa84>
 8003faa:	4ba5      	ldr	r3, [pc, #660]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	029b      	lsls	r3, r3, #10
 8003fb8:	49a1      	ldr	r1, [pc, #644]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60cb      	str	r3, [r1, #12]
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCC_OscConfig+0xa98>
 8003fc0:	4b9f      	ldr	r3, [pc, #636]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	03db      	lsls	r3, r3, #15
 8003fce:	499c      	ldr	r1, [pc, #624]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003fd4:	4b9a      	ldr	r3, [pc, #616]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a99      	ldr	r2, [pc, #612]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003fda:	f043 0310 	orr.w	r3, r3, #16
 8003fde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fe0:	f7fd ffb0 	bl	8001f44 <HAL_GetTick>
 8003fe4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003fe8:	f7fd ffac 	bl	8001f44 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e170      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003ffa:	4b91      	ldr	r3, [pc, #580]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xaac>
 8004006:	e018      	b.n	800403a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004008:	4b8d      	ldr	r3, [pc, #564]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a8c      	ldr	r2, [pc, #560]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800400e:	f023 0310 	bic.w	r3, r3, #16
 8004012:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004014:	f7fd ff96 	bl	8001f44 <HAL_GetTick>
 8004018:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800401c:	f7fd ff92 	bl	8001f44 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e156      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800402e:	4b84      	ldr	r3, [pc, #528]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 814b 	beq.w	80042da <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404a:	4b7d      	ldr	r3, [pc, #500]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b0c      	cmp	r3, #12
 8004054:	f000 80fa 	beq.w	800424c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	2b02      	cmp	r3, #2
 800405e:	f040 80cc 	bne.w	80041fa <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b77      	ldr	r3, [pc, #476]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a76      	ldr	r2, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800406e:	f7fd ff69 	bl	8001f44 <HAL_GetTick>
 8004072:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd ff65 	bl	8001f44 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e129      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004088:	4b6d      	ldr	r3, [pc, #436]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d111      	bne.n	80040c6 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b67      	ldr	r3, [pc, #412]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80040b2:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80040b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80040c6:	4b5f      	ldr	r3, [pc, #380]	; (8004244 <HAL_RCC_OscConfig+0xd08>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040d2:	d102      	bne.n	80040da <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040da:	4b5a      	ldr	r3, [pc, #360]	; (8004244 <HAL_RCC_OscConfig+0xd08>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a59      	ldr	r2, [pc, #356]	; (8004244 <HAL_RCC_OscConfig+0xd08>)
 80040e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80040e6:	4b56      	ldr	r3, [pc, #344]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ee:	f023 0303 	bic.w	r3, r3, #3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040fa:	3a01      	subs	r2, #1
 80040fc:	0212      	lsls	r2, r2, #8
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004104:	430a      	orrs	r2, r1
 8004106:	494e      	ldr	r1, [pc, #312]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004108:	4313      	orrs	r3, r2
 800410a:	628b      	str	r3, [r1, #40]	; 0x28
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800410e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004110:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <HAL_RCC_OscConfig+0xd0c>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004118:	3a01      	subs	r2, #1
 800411a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004122:	3a01      	subs	r2, #1
 8004124:	0252      	lsls	r2, r2, #9
 8004126:	b292      	uxth	r2, r2
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800412e:	3a01      	subs	r2, #1
 8004130:	0412      	lsls	r2, r2, #16
 8004132:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800413c:	3a01      	subs	r2, #1
 800413e:	0612      	lsls	r2, r2, #24
 8004140:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004144:	430a      	orrs	r2, r1
 8004146:	493e      	ldr	r1, [pc, #248]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004148:	4313      	orrs	r3, r2
 800414a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	4a3b      	ldr	r2, [pc, #236]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004158:	4b39      	ldr	r3, [pc, #228]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004160:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004168:	00d2      	lsls	r2, r2, #3
 800416a:	4935      	ldr	r1, [pc, #212]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800416c:	4313      	orrs	r3, r2
 800416e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004170:	4b33      	ldr	r3, [pc, #204]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	4a32      	ldr	r2, [pc, #200]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004176:	f043 0310 	orr.w	r3, r3, #16
 800417a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800417c:	4b30      	ldr	r3, [pc, #192]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	f023 020c 	bic.w	r2, r3, #12
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	492d      	ldr	r1, [pc, #180]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800418a:	4313      	orrs	r3, r2
 800418c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800418e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004196:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_OscConfig+0xd08>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <HAL_RCC_OscConfig+0xd08>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80041a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80041aa:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041b2:	f023 0304 	bic.w	r3, r3, #4
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ba:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041d2:	f7fd feb7 	bl	8001f44 <HAL_GetTick>
 80041d6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd feb3 	bl	8001f44 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e077      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0xc9e>
 80041f8:	e06f      	b.n	80042da <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a10      	ldr	r2, [pc, #64]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004204:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004206:	f7fd fe9d 	bl	8001f44 <HAL_GetTick>
 800420a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fd fe99 	bl	8001f44 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e05d      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	4a03      	ldr	r2, [pc, #12]	; (8004240 <HAL_RCC_OscConfig+0xd04>)
 8004232:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	6293      	str	r3, [r2, #40]	; 0x28
 800423c:	e04d      	b.n	80042da <HAL_RCC_OscConfig+0xd9e>
 800423e:	bf00      	nop
 8004240:	46020c00 	.word	0x46020c00
 8004244:	46020800 	.word	0x46020800
 8004248:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0xda8>)
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0xda8>)
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	2b01      	cmp	r3, #1
 800425e:	d03a      	beq.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d133      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d12a      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	0b1b      	lsrs	r3, r3, #12
 8004284:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d122      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d11a      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	0a5b      	lsrs	r3, r3, #9
 80042a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d111      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d108      	bne.n	80042d6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3738      	adds	r7, #56	; 0x38
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	46020c00 	.word	0x46020c00

080042e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e1d9      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b9b      	ldr	r3, [pc, #620]	; (800456c <HAL_RCC_ClockConfig+0x284>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b98      	ldr	r3, [pc, #608]	; (800456c <HAL_RCC_ClockConfig+0x284>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	4996      	ldr	r1, [pc, #600]	; (800456c <HAL_RCC_ClockConfig+0x284>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b94      	ldr	r3, [pc, #592]	; (800456c <HAL_RCC_ClockConfig+0x284>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e1c1      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004344:	429a      	cmp	r2, r3
 8004346:	d908      	bls.n	800435a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004348:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4986      	ldr	r1, [pc, #536]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004356:	4313      	orrs	r3, r2
 8004358:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004374:	429a      	cmp	r2, r3
 8004376:	d909      	bls.n	800438c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004378:	4b7d      	ldr	r3, [pc, #500]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	497a      	ldr	r1, [pc, #488]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004388:	4313      	orrs	r3, r2
 800438a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	4b74      	ldr	r3, [pc, #464]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d908      	bls.n	80043ba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043a8:	4b71      	ldr	r3, [pc, #452]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	496e      	ldr	r1, [pc, #440]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	4b69      	ldr	r3, [pc, #420]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d908      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043d6:	4b66      	ldr	r3, [pc, #408]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 020f 	bic.w	r2, r3, #15
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4963      	ldr	r1, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80d2 	beq.w	800459a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d143      	bne.n	800448a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b5b      	ldr	r3, [pc, #364]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d110      	bne.n	8004432 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b57      	ldr	r3, [pc, #348]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004416:	4a56      	ldr	r2, [pc, #344]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004418:	f043 0304 	orr.w	r3, r3, #4
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004420:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004432:	f7fd fd87 	bl	8001f44 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004438:	4b4e      	ldr	r3, [pc, #312]	; (8004574 <HAL_RCC_ClockConfig+0x28c>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00f      	beq.n	8004464 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004446:	f7fd fd7d 	bl	8001f44 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e12b      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004458:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_ClockConfig+0x28c>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004470:	4a3f      	ldr	r2, [pc, #252]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004472:	f023 0304 	bic.w	r3, r3, #4
 8004476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d121      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e112      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004492:	4b37      	ldr	r3, [pc, #220]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d115      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e106      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044aa:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0fa      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0f2      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4926      	ldr	r1, [pc, #152]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80044dc:	f7fd fd32 	bl	8001f44 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fd fd2a 	bl	8001f44 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0d6      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d1ee      	bne.n	80044ec <HAL_RCC_ClockConfig+0x204>
 800450e:	e044      	b.n	800459a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d112      	bne.n	800453e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451a:	f7fd fd13 	bl	8001f44 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0bf      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d1ee      	bne.n	800451a <HAL_RCC_ClockConfig+0x232>
 800453c:	e02d      	b.n	800459a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d123      	bne.n	800458e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fd fcfc 	bl	8001f44 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0a8      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <HAL_RCC_ClockConfig+0x288>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_ClockConfig+0x260>
 800456a:	e016      	b.n	800459a <HAL_RCC_ClockConfig+0x2b2>
 800456c:	40022000 	.word	0x40022000
 8004570:	46020c00 	.word	0x46020c00
 8004574:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fd fce4 	bl	8001f44 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	; 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e090      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800458e:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d1ee      	bne.n	8004578 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d208      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045b6:	4b40      	ldr	r3, [pc, #256]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 020f 	bic.w	r2, r3, #15
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	493d      	ldr	r1, [pc, #244]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b3c      	ldr	r3, [pc, #240]	; (80046bc <HAL_RCC_ClockConfig+0x3d4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d210      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <HAL_RCC_ClockConfig+0x3d4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 020f 	bic.w	r2, r3, #15
 80045de:	4937      	ldr	r1, [pc, #220]	; (80046bc <HAL_RCC_ClockConfig+0x3d4>)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b35      	ldr	r3, [pc, #212]	; (80046bc <HAL_RCC_ClockConfig+0x3d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e05b      	b.n	80046b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004610:	429a      	cmp	r2, r3
 8004612:	d208      	bcs.n	8004626 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4925      	ldr	r1, [pc, #148]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d012      	beq.n	8004658 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004640:	429a      	cmp	r2, r3
 8004642:	d209      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4919      	ldr	r1, [pc, #100]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d010      	beq.n	8004686 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004670:	429a      	cmp	r2, r3
 8004672:	d208      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	490d      	ldr	r1, [pc, #52]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004686:	f000 f821 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_RCC_ClockConfig+0x3d0>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	490a      	ldr	r1, [pc, #40]	; (80046c0 <HAL_RCC_ClockConfig+0x3d8>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x3dc>)
 800469e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x3e0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fd fc03 	bl	8001eb0 <HAL_InitTick>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	46020c00 	.word	0x46020c00
 80046bc:	40022000 	.word	0x40022000
 80046c0:	08009dac 	.word	0x08009dac
 80046c4:	20000014 	.word	0x20000014
 80046c8:	20000018 	.word	0x20000018

080046cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b08b      	sub	sp, #44	; 0x2c
 80046d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	4b7b      	ldr	r3, [pc, #492]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e4:	4b78      	ldr	r3, [pc, #480]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x34>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d121      	bne.n	800473e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d11e      	bne.n	800473e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004700:	4b71      	ldr	r3, [pc, #452]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800470c:	4b6e      	ldr	r3, [pc, #440]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800470e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004712:	0b1b      	lsrs	r3, r3, #12
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
 800471a:	e005      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800471c:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	0f1b      	lsrs	r3, r3, #28
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004728:	4a68      	ldr	r2, [pc, #416]	; (80048cc <HAL_RCC_GetSysClockFreq+0x200>)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d110      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800473c:	e00d      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800473e:	4b62      	ldr	r3, [pc, #392]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b04      	cmp	r3, #4
 8004748:	d102      	bne.n	8004750 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800474a:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	e004      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d101      	bne.n	800475a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004756:	4b5e      	ldr	r3, [pc, #376]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004758:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	f040 80ac 	bne.w	80048ba <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004762:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800476c:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004786:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xec>
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d022      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x130>
 80047b6:	e043      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x208>
 80047c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ca:	4b3f      	ldr	r3, [pc, #252]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d2:	ee07 3a90 	vmov	s15, r3
 80047d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047da:	ed97 6a01 	vldr	s12, [r7, #4]
 80047de:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x20c>
 80047e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80047fa:	e046      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eddf 6a33 	vldr	s13, [pc, #204]	; 80048d4 <HAL_RCC_GetSysClockFreq+0x208>
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800481e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004822:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800482e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800483e:	e024      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004868:	ed97 6a01 	vldr	s12, [r7, #4]
 800486c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80048d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8004870:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004874:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800487c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004888:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	0e1b      	lsrs	r3, r3, #24
 8004890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004894:	3301      	adds	r3, #1
 8004896:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ae:	ee17 3a90 	vmov	r3, s15
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	e001      	b.n	80048ba <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80048ba:	6a3b      	ldr	r3, [r7, #32]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	372c      	adds	r7, #44	; 0x2c
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	46020c00 	.word	0x46020c00
 80048cc:	08009dc4 	.word	0x08009dc4
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	4b742400 	.word	0x4b742400
 80048d8:	46000000 	.word	0x46000000

080048dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048e0:	f7ff fef4 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <HAL_RCC_GetHCLKFreq+0x28>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	4906      	ldr	r1, [pc, #24]	; (8004908 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <HAL_RCC_GetHCLKFreq+0x30>)
 80048f8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <HAL_RCC_GetHCLKFreq+0x30>)
 80048fc:	681b      	ldr	r3, [r3, #0]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	46020c00 	.word	0x46020c00
 8004908:	08009dac 	.word	0x08009dac
 800490c:	20000014 	.word	0x20000014

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004914:	f7ff ffe2 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	46020c00 	.word	0x46020c00
 8004934:	08009dbc 	.word	0x08009dbc

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800493c:	f7ff ffce 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	46020c00 	.word	0x46020c00
 800495c:	08009dbc 	.word	0x08009dbc

08004960 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004964:	f7ff ffba 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK3Freq+0x20>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	46020c00 	.word	0x46020c00
 8004984:	08009dbc 	.word	0x08009dbc

08004988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004990:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800499e:	f7fe fdaf 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 80049a2:	6178      	str	r0, [r7, #20]
 80049a4:	e019      	b.n	80049da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ac:	4a37      	ldr	r2, [pc, #220]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80049b6:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049c4:	f7fe fd9c 	bl	8003500 <HAL_PWREx_GetVoltageRange>
 80049c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ca:	4b30      	ldr	r3, [pc, #192]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d0:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80049d2:	f023 0304 	bic.w	r3, r3, #4
 80049d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049e0:	d003      	beq.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e8:	d109      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f0:	d202      	bcs.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80049f2:	2301      	movs	r3, #1
 80049f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80049f6:	e033      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80049fc:	e030      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a04:	d208      	bcs.n	8004a18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d102      	bne.n	8004a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004a0e:	2303      	movs	r3, #3
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	e025      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e035      	b.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1e:	d90f      	bls.n	8004a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a2c:	d902      	bls.n	8004a34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	e015      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004a34:	2301      	movs	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e012      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e00f      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a46:	d109      	bne.n	8004a5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4e:	d102      	bne.n	8004a56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004a50:	2301      	movs	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e004      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004a56:	2302      	movs	r3, #2
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e001      	b.n	8004a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 020f 	bic.w	r2, r3, #15
 8004a68:	4909      	ldr	r1, [pc, #36]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d001      	beq.n	8004a82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	46020c00 	.word	0x46020c00
 8004a90:	40022000 	.word	0x40022000

08004a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a98:	b0ba      	sub	sp, #232	; 0xe8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 0401 	and.w	r4, r2, #1
 8004ab8:	2500      	movs	r5, #0
 8004aba:	ea54 0305 	orrs.w	r3, r4, r5
 8004abe:	d00b      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ac0:	4bcb      	ldr	r3, [pc, #812]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac6:	f023 0103 	bic.w	r1, r3, #3
 8004aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	4ac7      	ldr	r2, [pc, #796]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f002 0802 	and.w	r8, r2, #2
 8004ae4:	f04f 0900 	mov.w	r9, #0
 8004ae8:	ea58 0309 	orrs.w	r3, r8, r9
 8004aec:	d00b      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004aee:	4bc0      	ldr	r3, [pc, #768]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af4:	f023 010c 	bic.w	r1, r3, #12
 8004af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	4abc      	ldr	r2, [pc, #752]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b00:	430b      	orrs	r3, r1
 8004b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f002 0a04 	and.w	sl, r2, #4
 8004b12:	f04f 0b00 	mov.w	fp, #0
 8004b16:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b1a:	d00b      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004b1c:	4bb4      	ldr	r3, [pc, #720]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b22:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	4ab0      	ldr	r2, [pc, #704]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f002 0308 	and.w	r3, r2, #8
 8004b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b44:	2300      	movs	r3, #0
 8004b46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004b54:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	4aa2      	ldr	r2, [pc, #648]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b66:	430b      	orrs	r3, r1
 8004b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 0310 	and.w	r3, r2, #16
 8004b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004b8c:	4b98      	ldr	r3, [pc, #608]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	4a94      	ldr	r2, [pc, #592]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f002 0320 	and.w	r3, r2, #32
 8004bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	d00b      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004bc4:	4b8a      	ldr	r3, [pc, #552]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bca:	f023 0107 	bic.w	r1, r3, #7
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd4:	4a86      	ldr	r2, [pc, #536]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c02:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c0c:	4a78      	ldr	r2, [pc, #480]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c2a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004c34:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c44:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c46:	430b      	orrs	r3, r1
 8004c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004c58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c62:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004c6c:	4b60      	ldr	r3, [pc, #384]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a5c      	ldr	r2, [pc, #368]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d00b      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004ca4:	4b52      	ldr	r3, [pc, #328]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004caa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	4a4e      	ldr	r2, [pc, #312]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004cc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d00b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004cdc:	4b44      	ldr	r3, [pc, #272]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ce2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cec:	4a40      	ldr	r2, [pc, #256]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004d14:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d24:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d26:	430b      	orrs	r3, r1
 8004d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d46:	460b      	mov	r3, r1
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	d00c      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004d4c:	4b28      	ldr	r3, [pc, #160]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5e:	4a24      	ldr	r2, [pc, #144]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d74:	2300      	movs	r3, #0
 8004d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d04f      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d02d      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d827      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d92:	2b60      	cmp	r3, #96	; 0x60
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d96:	2b60      	cmp	r3, #96	; 0x60
 8004d98:	d823      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d006      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d81f      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d011      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004daa:	e01a      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dac:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004db8:	e01d      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f002 f981 	bl	80070c8 <RCCEx_PLL2_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dcc:	e013      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dd2:	332c      	adds	r3, #44	; 0x2c
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 fa0f 	bl	80071f8 <RCCEx_PLL3_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004de0:	e009      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004de8:	e005      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004dea:	bf00      	nop
 8004dec:	e003      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004dee:	bf00      	nop
 8004df0:	46020c00 	.word	0x46020c00
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004dfe:	4bb6      	ldr	r3, [pc, #728]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e04:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	4ab1      	ldr	r2, [pc, #708]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004e18:	e003      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e1e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e2e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e30:	2300      	movs	r3, #0
 8004e32:	677b      	str	r3, [r7, #116]	; 0x74
 8004e34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d053      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d033      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d82c      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d826      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e62:	d008      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d820      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d011      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004e74:	e01a      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e76:	4b98      	ldr	r3, [pc, #608]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	4a97      	ldr	r2, [pc, #604]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e82:	e01a      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e88:	3308      	adds	r3, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f002 f91c 	bl	80070c8 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e96:	e010      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e9c:	332c      	adds	r3, #44	; 0x2c
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f002 f9aa 	bl	80071f8 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004eaa:	e006      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10d      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ec8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	4a80      	ldr	r2, [pc, #512]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004edc:	e003      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ee2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d046      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f0e:	d028      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004f14:	d821      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f1a:	d022      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f20:	d81b      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f26:	d01c      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f2c:	d815      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f32:	d008      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f38:	d80f      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d011      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d00e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004f44:	e009      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f002 f8bb 	bl	80070c8 <RCCEx_PLL2_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004f6c:	4b5a      	ldr	r3, [pc, #360]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f72:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f7e:	4a56      	ldr	r2, [pc, #344]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004f80:	430b      	orrs	r3, r1
 8004f82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d03f      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d81e      	bhi.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fff 	.word	0x08004fff
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	08004fe3 	.word	0x08004fe3
 8004fcc:	08004fff 	.word	0x08004fff
 8004fd0:	08004fff 	.word	0x08004fff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fd4:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	4a3f      	ldr	r2, [pc, #252]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004fe0:	e00e      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe6:	332c      	adds	r3, #44	; 0x2c
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f002 f905 	bl	80071f8 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ff4:	e004      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004ffe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005000:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005008:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800500a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800500e:	f023 0107 	bic.w	r1, r3, #7
 8005012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800501c:	430b      	orrs	r3, r1
 800501e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005022:	e003      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005024:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005028:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800502c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005038:	65bb      	str	r3, [r7, #88]	; 0x58
 800503a:	2300      	movs	r3, #0
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800503e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	d04d      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005054:	d028      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005056:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800505a:	d821      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800505c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005060:	d024      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005066:	d81b      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506c:	d00e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800506e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005072:	d815      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01b      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d110      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800508a:	e012      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800508c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005090:	332c      	adds	r3, #44	; 0x2c
 8005092:	4618      	mov	r0, r3
 8005094:	f002 f8b0 	bl	80071f8 <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800509e:	e008      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050a8:	bf00      	nop
 80050aa:	e002      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80050b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d110      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80050c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050cc:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80050d6:	bf00      	nop
 80050d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80050f0:	653b      	str	r3, [r7, #80]	; 0x50
 80050f2:	2300      	movs	r3, #0
 80050f4:	657b      	str	r3, [r7, #84]	; 0x54
 80050f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f000 80b5 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2300      	movs	r3, #0
 8005104:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005108:	4b9d      	ldr	r3, [pc, #628]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d113      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005116:	4b9a      	ldr	r3, [pc, #616]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511c:	4a98      	ldr	r2, [pc, #608]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005126:	4b96      	ldr	r3, [pc, #600]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800513e:	4b91      	ldr	r3, [pc, #580]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	4a90      	ldr	r2, [pc, #576]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800514a:	f7fc fefb 	bl	8001f44 <HAL_GetTick>
 800514e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005152:	e00b      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005154:	f7fc fef6 	bl	8001f44 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d903      	bls.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800516c:	4b85      	ldr	r3, [pc, #532]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ed      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005178:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d165      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005180:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d023      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800519a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01b      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051a6:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b4:	4b72      	ldr	r3, [pc, #456]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ba:	4a71      	ldr	r2, [pc, #452]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c4:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ca:	4a6d      	ldr	r2, [pc, #436]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051d4:	4a6a      	ldr	r2, [pc, #424]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc feab 	bl	8001f44 <HAL_GetTick>
 80051ee:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f2:	e00d      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fc fea6 	bl	8001f44 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	f241 3388 	movw	r3, #5000	; 0x1388
 8005204:	429a      	cmp	r2, r3
 8005206:	d903      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800520e:	e006      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005210:	4b5b      	ldr	r3, [pc, #364]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ea      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800521e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005226:	4b56      	ldr	r3, [pc, #344]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800522c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005238:	4a51      	ldr	r2, [pc, #324]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800523a:	430b      	orrs	r3, r1
 800523c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005242:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005246:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005250:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005254:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525c:	4b48      	ldr	r3, [pc, #288]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005262:	4a47      	ldr	r2, [pc, #284]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800526c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
 800527a:	2300      	movs	r3, #0
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005282:	460b      	mov	r3, r1
 8005284:	4313      	orrs	r3, r2
 8005286:	d042      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800528c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005290:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005294:	d022      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005296:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800529a:	d81b      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800529c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a0:	d011      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80052a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a6:	d815      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d019      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80052ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b0:	d110      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b6:	3308      	adds	r3, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 ff05 	bl	80070c8 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052c4:	e00d      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052d0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80052d2:	e006      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80052e0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80052e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80052f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80052fe:	430b      	orrs	r3, r1
 8005300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005304:	e003      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005306:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800530a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800530e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800531a:	643b      	str	r3, [r7, #64]	; 0x40
 800531c:	2300      	movs	r3, #0
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005324:	460b      	mov	r3, r1
 8005326:	4313      	orrs	r3, r2
 8005328:	d032      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800532a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800532e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	d00b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533c:	d804      	bhi.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d007      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800534e:	e004      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005350:	bf00      	nop
 8005352:	e002      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005358:	bf00      	nop
    }
    if (ret == HAL_OK)
 800535a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d112      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005364:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005368:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800536c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005374:	4a02      	ldr	r2, [pc, #8]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005376:	430b      	orrs	r3, r1
 8005378:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800537c:	e008      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800537e:	bf00      	nop
 8005380:	46020c00 	.word	0x46020c00
 8005384:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800538c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
 800539e:	2300      	movs	r3, #0
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d00c      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80053ac:	4b98      	ldr	r3, [pc, #608]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053b2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80053b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053be:	4a94      	ldr	r2, [pc, #592]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80053c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
 80053d4:	2300      	movs	r3, #0
 80053d6:	637b      	str	r3, [r7, #52]	; 0x34
 80053d8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80053dc:	460b      	mov	r3, r1
 80053de:	4313      	orrs	r3, r2
 80053e0:	d019      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ee:	d105      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053f0:	4b87      	ldr	r3, [pc, #540]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	4a86      	ldr	r2, [pc, #536]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fa:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80053fc:	4b84      	ldr	r3, [pc, #528]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80053fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005402:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800540a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800540e:	4a80      	ldr	r2, [pc, #512]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005410:	430b      	orrs	r3, r1
 8005412:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005428:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d00c      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005432:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005440:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005444:	4972      	ldr	r1, [pc, #456]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800544c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005462:	460b      	mov	r3, r1
 8005464:	4313      	orrs	r3, r2
 8005466:	d00c      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005468:	4b69      	ldr	r3, [pc, #420]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800546a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800546e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800547a:	4965      	ldr	r1, [pc, #404]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005498:	460b      	mov	r3, r1
 800549a:	4313      	orrs	r3, r2
 800549c:	d00c      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800549e:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054a4:	f023 0218 	bic.w	r2, r3, #24
 80054a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80054b0:	4957      	ldr	r1, [pc, #348]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d032      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80054d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054e0:	d105      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e2:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	4a4a      	ldr	r2, [pc, #296]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ec:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054fa:	d108      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005500:	3308      	adds	r3, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fde0 	bl	80070c8 <RCCEx_PLL2_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800550e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005516:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005518:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800551c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005528:	4939      	ldr	r1, [pc, #228]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005530:	e003      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005532:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005536:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005550:	460b      	mov	r3, r1
 8005552:	4313      	orrs	r3, r2
 8005554:	d03a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005562:	d00e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005568:	d815      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d017      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800556e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005572:	d110      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005574:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800557a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005580:	e00e      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005586:	3308      	adds	r3, #8
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fd9d 	bl	80070c8 <RCCEx_PLL2_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005594:	e004      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800559e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ba:	4915      	ldr	r1, [pc, #84]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80055c2:	e003      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055c8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
 80055de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d00c      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055fa:	4905      	ldr	r1, [pc, #20]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005602:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005606:	4618      	mov	r0, r3
 8005608:	37e8      	adds	r7, #232	; 0xe8
 800560a:	46bd      	mov	sp, r7
 800560c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005610:	46020c00 	.word	0x46020c00

08005614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800561c:	4bac      	ldr	r3, [pc, #688]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005626:	4baa      	ldr	r3, [pc, #680]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005630:	4ba7      	ldr	r3, [pc, #668]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	3301      	adds	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800563e:	4ba4      	ldr	r3, [pc, #656]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005648:	4ba1      	ldr	r3, [pc, #644]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	08db      	lsrs	r3, r3, #3
 800564e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005660:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8123 	beq.w	80058b2 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d062      	beq.n	8005738 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b03      	cmp	r3, #3
 8005676:	f200 8081 	bhi.w	800577c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d024      	beq.n	80056ca <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d17a      	bne.n	800577c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005690:	eddf 6a90 	vldr	s13, [pc, #576]	; 80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005698:	4b8d      	ldr	r3, [pc, #564]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ac:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80056b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c8:	e08f      	b.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056ca:	4b81      	ldr	r3, [pc, #516]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80056d6:	4b7e      	ldr	r3, [pc, #504]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	0f1b      	lsrs	r3, r3, #28
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	e006      	b.n	80056f0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80056e2:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80056e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	0f1b      	lsrs	r3, r3, #28
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	4a7a      	ldr	r2, [pc, #488]	; (80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80056f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	ee07 3a90 	vmov	s15, r3
 8005704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005716:	ed97 6a02 	vldr	s12, [r7, #8]
 800571a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800571e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800572a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005736:	e058      	b.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	eddf 6a64 	vldr	s13, [pc, #400]	; 80058d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800574a:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005752:	ee07 3a90 	vmov	s15, r3
 8005756:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800575a:	ed97 6a02 	vldr	s12, [r7, #8]
 800575e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005762:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005766:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800576a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800577a:	e036      	b.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800577c:	4b54      	ldr	r3, [pc, #336]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8005788:	4b51      	ldr	r3, [pc, #324]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	0f1b      	lsrs	r3, r3, #28
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	e006      	b.n	80057a2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005794:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	0f1b      	lsrs	r3, r3, #28
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	4a4e      	ldr	r2, [pc, #312]	; (80058dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80057a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80057cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80058d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80057d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057e8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80057ea:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80057f6:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80057f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800580c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005810:	edd7 6a07 	vldr	s13, [r7, #28]
 8005814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581c:	ee17 2a90 	vmov	r2, s15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e002      	b.n	800582c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d017      	beq.n	8005868 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800584a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800584e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005852:	edd7 6a07 	vldr	s13, [r7, #28]
 8005856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585e:	ee17 2a90 	vmov	r2, s15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	605a      	str	r2, [r3, #4]
 8005866:	e002      	b.n	800586e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d017      	beq.n	80058aa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	0e1b      	lsrs	r3, r3, #24
 8005880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800588c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005890:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005894:	edd7 6a07 	vldr	s13, [r7, #28]
 8005898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058a0:	ee17 2a90 	vmov	r2, s15
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80058a8:	e00c      	b.n	80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3724      	adds	r7, #36	; 0x24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	46020c00 	.word	0x46020c00
 80058d4:	4b742400 	.word	0x4b742400
 80058d8:	46000000 	.word	0x46000000
 80058dc:	08009dc4 	.word	0x08009dc4

080058e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b089      	sub	sp, #36	; 0x24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80058e8:	4bac      	ldr	r3, [pc, #688]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80058f2:	4baa      	ldr	r3, [pc, #680]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80058fc:	4ba7      	ldr	r3, [pc, #668]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3301      	adds	r3, #1
 8005908:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800590a:	4ba4      	ldr	r3, [pc, #656]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005914:	4ba1      	ldr	r3, [pc, #644]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	fb02 f303 	mul.w	r3, r2, r3
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8123 	beq.w	8005b7e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d062      	beq.n	8005a04 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b03      	cmp	r3, #3
 8005942:	f200 8081 	bhi.w	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d024      	beq.n	8005996 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d17a      	bne.n	8005a48 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005964:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005974:	ed97 6a02 	vldr	s12, [r7, #8]
 8005978:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800597c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005980:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005988:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005994:	e08f      	b.n	8005ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005996:	4b81      	ldr	r3, [pc, #516]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80059a2:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0f1b      	lsrs	r3, r3, #28
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	e006      	b.n	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80059b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	0f1b      	lsrs	r3, r3, #28
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	4a7a      	ldr	r2, [pc, #488]	; (8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80059ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80059fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a02:	e058      	b.n	8005ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a16:	4b61      	ldr	r3, [pc, #388]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a46:	e036      	b.n	8005ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005a48:	4b54      	ldr	r3, [pc, #336]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8005a54:	4b51      	ldr	r3, [pc, #324]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	0f1b      	lsrs	r3, r3, #28
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	e006      	b.n	8005a6e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8005a60:	4b4e      	ldr	r3, [pc, #312]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005a62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	0f1b      	lsrs	r3, r3, #28
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	4a4e      	ldr	r2, [pc, #312]	; (8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a94:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a98:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab4:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac6:	0a5b      	lsrs	r3, r3, #9
 8005ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae8:	ee17 2a90 	vmov	r2, s15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e002      	b.n	8005af8 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005af8:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d017      	beq.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b04:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b2a:	ee17 2a90 	vmov	r2, s15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e002      	b.n	8005b3a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	0e1b      	lsrs	r3, r3, #24
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6c:	ee17 2a90 	vmov	r2, s15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b74:	e00c      	b.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	e008      	b.n	8005b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	3724      	adds	r7, #36	; 0x24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	4b742400 	.word	0x4b742400
 8005ba4:	46000000 	.word	0x46000000
 8005ba8:	08009dc4 	.word	0x08009dc4

08005bac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005bb4:	4bac      	ldr	r3, [pc, #688]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005bbe:	4baa      	ldr	r3, [pc, #680]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005bc8:	4ba7      	ldr	r3, [pc, #668]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005bd6:	4ba4      	ldr	r3, [pc, #656]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005be0:	4ba1      	ldr	r3, [pc, #644]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8123 	beq.w	8005e4a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d062      	beq.n	8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	f200 8081 	bhi.w	8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d024      	beq.n	8005c62 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d17a      	bne.n	8005d14 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c28:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c30:	4b8d      	ldr	r3, [pc, #564]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c44:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8005c60:	e08f      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c62:	4b81      	ldr	r3, [pc, #516]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8005c6e:	4b7e      	ldr	r3, [pc, #504]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0f1b      	lsrs	r3, r3, #28
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8005c7a:	4b7b      	ldr	r3, [pc, #492]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	0f1b      	lsrs	r3, r3, #28
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	4a7a      	ldr	r2, [pc, #488]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cb2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cce:	e058      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce2:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cf6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d12:	e036      	b.n	8005d82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d14:	4b54      	ldr	r3, [pc, #336]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8005d20:	4b51      	ldr	r3, [pc, #324]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	0f1b      	lsrs	r3, r3, #28
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	e006      	b.n	8005d3a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	0f1b      	lsrs	r3, r3, #28
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	4a4e      	ldr	r2, [pc, #312]	; (8005e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d64:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d80:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005d82:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	0a5b      	lsrs	r3, r3, #9
 8005d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db4:	ee17 2a90 	vmov	r2, s15
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005dc4:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	e002      	b.n	8005e06 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e06:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d017      	beq.n	8005e42 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e12:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	0e1b      	lsrs	r3, r3, #24
 8005e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e28:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e38:	ee17 2a90 	vmov	r2, s15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005e40:	e00c      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	e008      	b.n	8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	3724      	adds	r7, #36	; 0x24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	46020c00 	.word	0x46020c00
 8005e6c:	4b742400 	.word	0x4b742400
 8005e70:	46000000 	.word	0x46000000
 8005e74:	08009dc4 	.word	0x08009dc4

08005e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	; 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e86:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	d145      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e8e:	4ba7      	ldr	r3, [pc, #668]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005e9a:	4ba4      	ldr	r3, [pc, #656]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d108      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eae:	d104      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	f001 b8fc 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005eba:	4b9c      	ldr	r3, [pc, #624]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec8:	d114      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed0:	d110      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ed2:	4b96      	ldr	r3, [pc, #600]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ee0:	d103      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005ee2:	23fa      	movs	r3, #250	; 0xfa
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ee6:	f001 b8e4 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005eea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005ef0:	f001 b8df 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005ef4:	4b8d      	ldr	r3, [pc, #564]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f00:	d107      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f08:	d103      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005f0a:	4b89      	ldr	r3, [pc, #548]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0e:	f001 b8d0 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	f001 b8cc 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005f22:	430b      	orrs	r3, r1
 8005f24:	d151      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f26:	4b81      	ldr	r3, [pc, #516]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b80      	cmp	r3, #128	; 0x80
 8005f36:	d035      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	d841      	bhi.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b60      	cmp	r3, #96	; 0x60
 8005f42:	d02a      	beq.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2b60      	cmp	r3, #96	; 0x60
 8005f48:	d83b      	bhi.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d009      	beq.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d835      	bhi.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00c      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	d012      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f62:	e02e      	b.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fb53 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f72:	f001 b89e 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f76:	f107 0318 	add.w	r3, r7, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fcb0 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f84:	f001 b895 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f88:	f107 030c 	add.w	r3, r7, #12
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fe0d 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f96:	f001 b88c 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fa0:	f001 b887 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d103      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005fb2:	4b60      	ldr	r3, [pc, #384]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005fb6:	f001 b87c 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fbe:	f001 b878 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc6:	f001 b874 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fce:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	d158      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005fd6:	4b55      	ldr	r3, [pc, #340]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d03b      	beq.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff0:	d846      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff8:	d02e      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006000:	d83e      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d00b      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006010:	d836      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d012      	beq.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006020:	e02e      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff faf4 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006030:	f001 b83f 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006034:	f107 0318 	add.w	r3, r7, #24
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fc51 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006042:	f001 b836 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006046:	f107 030c 	add.w	r3, r7, #12
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fdae 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006054:	f001 b82d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006058:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800605e:	f001 b828 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006062:	4b32      	ldr	r3, [pc, #200]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606e:	d103      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006074:	f001 b81d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800607c:	f001 b819 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006084:	f001 b815 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006090:	430b      	orrs	r3, r1
 8006092:	d126      	bne.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006096:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800609a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d106      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80060b4:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
 80060b8:	f000 bffb 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80060bc:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d107      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d0:	d103      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80060d2:	4b19      	ldr	r3, [pc, #100]	; (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
 80060d6:	f000 bfec 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
 80060de:	f000 bfe8 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80060e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80060ea:	430b      	orrs	r3, r1
 80060ec:	d164      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006100:	d03d      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006108:	d852      	bhi.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006110:	d014      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006118:	d84a      	bhi.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01f      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006126:	d012      	beq.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006128:	e042      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800612a:	bf00      	nop
 800612c:	46020c00 	.word	0x46020c00
 8006130:	0007a120 	.word	0x0007a120
 8006134:	00f42400 	.word	0x00f42400
 8006138:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800613c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fa67 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800614a:	f000 bfb2 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800614e:	f107 0318 	add.w	r3, r7, #24
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fbc4 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800615c:	f000 bfa9 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006160:	4bab      	ldr	r3, [pc, #684]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616c:	d103      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800616e:	4ba9      	ldr	r3, [pc, #676]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006172:	f000 bf9e 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800617a:	f000 bf9a 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800617e:	4ba4      	ldr	r3, [pc, #656]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800618a:	4ba1      	ldr	r3, [pc, #644]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0e1b      	lsrs	r3, r3, #24
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	e006      	b.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006196:	4b9e      	ldr	r3, [pc, #632]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	0e1b      	lsrs	r3, r3, #24
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	4a9c      	ldr	r2, [pc, #624]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80061a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061ac:	f000 bf81 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b4:	f000 bf7d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80061b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061bc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80061c0:	430b      	orrs	r3, r1
 80061c2:	d175      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80061c4:	4b92      	ldr	r3, [pc, #584]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80061c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d15b      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061d6:	4b8e      	ldr	r3, [pc, #568]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80061d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061e8:	d034      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061f0:	d849      	bhi.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f8:	d00b      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006200:	d841      	bhi.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2b00      	cmp	r3, #0
 8006206:	d016      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800620e:	d009      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006210:	e039      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff f9fc 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006220:	f000 bf47 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006224:	f107 0318 	add.w	r3, r7, #24
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fb59 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006232:	f000 bf3e 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006236:	4b76      	ldr	r3, [pc, #472]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006242:	d103      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8006244:	4b73      	ldr	r3, [pc, #460]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006248:	f000 bf33 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006250:	f000 bf2f 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006254:	4b6e      	ldr	r3, [pc, #440]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006260:	4b6b      	ldr	r3, [pc, #428]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	0e1b      	lsrs	r3, r3, #24
 8006266:	f003 030f 	and.w	r3, r3, #15
 800626a:	e006      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800626c:	4b68      	ldr	r3, [pc, #416]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800626e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	0e1b      	lsrs	r3, r3, #24
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a67      	ldr	r2, [pc, #412]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006282:	f000 bf16 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800628a:	f000 bf12 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	d108      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f9ba 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	f000 bf05 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
 80062ac:	f000 bf01 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80062b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062b4:	1e51      	subs	r1, r2, #1
 80062b6:	430b      	orrs	r3, r1
 80062b8:	d136      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062ba:	4b55      	ldr	r3, [pc, #340]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fe fb34 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 80062d0:	6378      	str	r0, [r7, #52]	; 0x34
 80062d2:	f000 beee 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d104      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062dc:	f7fe f9f6 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 80062e0:	6378      	str	r0, [r7, #52]	; 0x34
 80062e2:	f000 bee6 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062e6:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d106      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d103      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 80062fa:	4b48      	ldr	r3, [pc, #288]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80062fc:	637b      	str	r3, [r7, #52]	; 0x34
 80062fe:	f000 bed8 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006302:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d107      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2b03      	cmp	r3, #3
 8006314:	d104      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
 800631c:	f000 bec9 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	f000 bec5 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632c:	1e91      	subs	r1, r2, #2
 800632e:	430b      	orrs	r3, r1
 8006330:	d136      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006332:	4b37      	ldr	r3, [pc, #220]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006338:	f003 030c 	and.w	r3, r3, #12
 800633c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006344:	f7fe fae4 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006348:	6378      	str	r0, [r7, #52]	; 0x34
 800634a:	f000 beb2 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b04      	cmp	r3, #4
 8006352:	d104      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006354:	f7fe f9ba 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006358:	6378      	str	r0, [r7, #52]	; 0x34
 800635a:	f000 beaa 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800635e:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d106      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2b08      	cmp	r3, #8
 8006370:	d103      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006372:	4b2a      	ldr	r3, [pc, #168]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
 8006376:	f000 be9c 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800637a:	4b25      	ldr	r3, [pc, #148]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800637c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d107      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2b0c      	cmp	r3, #12
 800638c:	d104      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	f000 be8d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	f000 be89 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80063a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a4:	1f11      	subs	r1, r2, #4
 80063a6:	430b      	orrs	r3, r1
 80063a8:	d13e      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063aa:	4b19      	ldr	r3, [pc, #100]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80063ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063bc:	f7fe faa8 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80063c0:	6378      	str	r0, [r7, #52]	; 0x34
 80063c2:	f000 be76 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	d104      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063cc:	f7fe f97e 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 80063d0:	6378      	str	r0, [r7, #52]	; 0x34
 80063d2:	f000 be6e 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e2:	d106      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d103      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80063ea:	4b0c      	ldr	r3, [pc, #48]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
 80063ee:	f000 be60 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80063f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d10f      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	2b30      	cmp	r3, #48	; 0x30
 8006404:	d10c      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
 800640c:	f000 be51 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006410:	46020c00 	.word	0x46020c00
 8006414:	02dc6c00 	.word	0x02dc6c00
 8006418:	08009dc4 	.word	0x08009dc4
 800641c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
 8006424:	f000 be45 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642c:	f1a2 0108 	sub.w	r1, r2, #8
 8006430:	430b      	orrs	r3, r1
 8006432:	d136      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006434:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800643e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006446:	f7fe fa63 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 800644a:	6378      	str	r0, [r7, #52]	; 0x34
 800644c:	f000 be31 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d104      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006456:	f7fe f939 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 800645a:	6378      	str	r0, [r7, #52]	; 0x34
 800645c:	f000 be29 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006460:	4b94      	ldr	r3, [pc, #592]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d106      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d103      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006474:	4b90      	ldr	r3, [pc, #576]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
 8006478:	f000 be1b 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800647c:	4b8d      	ldr	r3, [pc, #564]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800647e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d107      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	2bc0      	cmp	r3, #192	; 0xc0
 800648e:	d104      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
 8006496:	f000 be0c 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
 800649e:	f000 be08 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80064a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a6:	f1a2 0110 	sub.w	r1, r2, #16
 80064aa:	430b      	orrs	r3, r1
 80064ac:	d139      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064ae:	4b81      	ldr	r3, [pc, #516]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fe fa26 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80064c4:	6378      	str	r0, [r7, #52]	; 0x34
 80064c6:	f000 bdf4 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d104      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fe f8fb 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 80064d6:	6378      	str	r0, [r7, #52]	; 0x34
 80064d8:	f000 bdeb 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064dc:	4b75      	ldr	r3, [pc, #468]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f0:	d103      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80064f2:	4b71      	ldr	r3, [pc, #452]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
 80064f6:	f000 bddc 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064fa:	4b6e      	ldr	r3, [pc, #440]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d108      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650e:	d104      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	f000 bdcc 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	f000 bdc8 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006526:	f1a2 0120 	sub.w	r1, r2, #32
 800652a:	430b      	orrs	r3, r1
 800652c:	d158      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800652e:	4b61      	ldr	r3, [pc, #388]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006540:	f7fe fa0e 	bl	8004960 <HAL_RCC_GetPCLK3Freq>
 8006544:	6378      	str	r0, [r7, #52]	; 0x34
 8006546:	f000 bdb4 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	d104      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006550:	f7fe f8bc 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006554:	6378      	str	r0, [r7, #52]	; 0x34
 8006556:	f000 bdac 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d106      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800656e:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
 8006572:	f000 bd9e 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006576:	4b4f      	ldr	r3, [pc, #316]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d107      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b03      	cmp	r3, #3
 8006588:	d104      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800658a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	f000 bd8f 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006594:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b20      	cmp	r3, #32
 800659e:	d11b      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d118      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a6:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80065b2:	4b40      	ldr	r3, [pc, #256]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	0e1b      	lsrs	r3, r3, #24
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	e006      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	0e1b      	lsrs	r3, r3, #24
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	4a3b      	ldr	r2, [pc, #236]	; (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80065ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	f000 bd6d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
 80065dc:	f000 bd69 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80065e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80065e8:	430b      	orrs	r3, r1
 80065ea:	d169      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80065ec:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d104      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006600:	f7fe f864 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006604:	6378      	str	r0, [r7, #52]	; 0x34
 8006606:	f000 bd54 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d108      	bne.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006612:	f107 0318 	add.w	r3, r7, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff f962 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
 8006620:	f000 bd47 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800662a:	f7fe f957 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 800662e:	6378      	str	r0, [r7, #52]	; 0x34
 8006630:	f000 bd3f 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800663a:	d118      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800663c:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	0f1b      	lsrs	r3, r3, #28
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	e006      	b.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006654:	4b17      	ldr	r3, [pc, #92]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	0f1b      	lsrs	r3, r3, #28
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	4a16      	ldr	r2, [pc, #88]	; (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
 800666a:	f000 bd22 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667a:	d107      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006682:	d103      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	f000 bd13 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006698:	d107      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a0:	d103      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	f000 bd04 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	f000 bd00 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80066b2:	bf00      	nop
 80066b4:	46020c00 	.word	0x46020c00
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	08009dc4 	.word	0x08009dc4
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80066c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80066c8:	430b      	orrs	r3, r1
 80066ca:	d14e      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80066cc:	4ba8      	ldr	r3, [pc, #672]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d841      	bhi.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	0800670b 	.word	0x0800670b
 80066f0:	08006727 	.word	0x08006727
 80066f4:	08006731 	.word	0x08006731
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe ff89 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006706:	f000 bcd4 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa4c 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006718:	f000 bccb 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800671c:	f7fe f8de 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8006720:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006722:	f000 bcc6 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006726:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800672c:	f000 bcc1 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006730:	4b8f      	ldr	r3, [pc, #572]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800673c:	4b8c      	ldr	r3, [pc, #560]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	0e1b      	lsrs	r3, r3, #24
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	e006      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006748:	4b89      	ldr	r3, [pc, #548]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800674a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	4a87      	ldr	r2, [pc, #540]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800675e:	f000 bca8 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006766:	f000 bca4 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800676a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006772:	430b      	orrs	r3, r1
 8006774:	d15d      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006776:	4b7e      	ldr	r3, [pc, #504]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800677c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006780:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006788:	d036      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006790:	d84b      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006798:	d029      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067a0:	d843      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a8:	d013      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b0:	d83b      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067be:	d134      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe ff25 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ce:	f000 bc70 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff f9e8 	bl	8005bac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e0:	f000 bc67 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067e4:	f7fe f87a 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80067e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067ea:	f000 bc62 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f4:	f000 bc5d 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067f8:	4b5d      	ldr	r3, [pc, #372]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006804:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	0e1b      	lsrs	r3, r3, #24
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	e006      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006810:	4b57      	ldr	r3, [pc, #348]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	0e1b      	lsrs	r3, r3, #24
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	4a55      	ldr	r2, [pc, #340]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006826:	f000 bc44 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800682e:	f000 bc40 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006836:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800683a:	430b      	orrs	r3, r1
 800683c:	d14a      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800683e:	4b4c      	ldr	r3, [pc, #304]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006848:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fe f85e 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006854:	6378      	str	r0, [r7, #52]	; 0x34
 8006856:	f000 bc2c 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d104      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006862:	f7fd ff33 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006866:	6378      	str	r0, [r7, #52]	; 0x34
 8006868:	f000 bc23 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800686c:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d107      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006880:	d103      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8006882:	4b3d      	ldr	r3, [pc, #244]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	f000 bc14 	b.w	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800688a:	4b39      	ldr	r3, [pc, #228]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b20      	cmp	r3, #32
 8006894:	d11b      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800689c:	d117      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800689e:	4b34      	ldr	r3, [pc, #208]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80068aa:	4b31      	ldr	r3, [pc, #196]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	0e1b      	lsrs	r3, r3, #24
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	e006      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	0e1b      	lsrs	r3, r3, #24
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	4a2b      	ldr	r2, [pc, #172]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
 80068cc:	e3f1      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	e3ee      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80068d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80068dc:	430b      	orrs	r3, r1
 80068de:	d14d      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068e0:	4b23      	ldr	r3, [pc, #140]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80068e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068f2:	f7fe f80d 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80068f6:	6378      	str	r0, [r7, #52]	; 0x34
 80068f8:	e3db      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006900:	d103      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006902:	f7fd fee3 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006906:	6378      	str	r0, [r7, #52]	; 0x34
 8006908:	e3d3      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800690a:	4b19      	ldr	r3, [pc, #100]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006916:	d106      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691e:	d102      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006920:	4b15      	ldr	r3, [pc, #84]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	e3c5      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b20      	cmp	r3, #32
 8006930:	d11b      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006938:	d117      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	0e1b      	lsrs	r3, r3, #24
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	e006      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	0e1b      	lsrs	r3, r3, #24
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	4a04      	ldr	r2, [pc, #16]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	e3a3      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
 800696e:	e3a0      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006970:	46020c00 	.word	0x46020c00
 8006974:	08009dc4 	.word	0x08009dc4
 8006978:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800697c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006980:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006984:	430b      	orrs	r3, r1
 8006986:	d148      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006988:	4b9d      	ldr	r3, [pc, #628]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800698a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800698e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006992:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	2bc0      	cmp	r3, #192	; 0xc0
 8006998:	d024      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2bc0      	cmp	r3, #192	; 0xc0
 800699e:	d839      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d00d      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d833      	bhi.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d011      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80069b8:	e02c      	b.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80069ba:	f7fd ffd1 	bl	8004960 <HAL_RCC_GetPCLK3Freq>
 80069be:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069c0:	e377      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069c2:	4b8f      	ldr	r3, [pc, #572]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ce:	d102      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80069d0:	4b8c      	ldr	r3, [pc, #560]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069d4:	e36d      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069da:	e36a      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80069dc:	f7fd fe76 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 80069e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069e2:	e366      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80069e4:	4b86      	ldr	r3, [pc, #536]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80069f0:	4b83      	ldr	r3, [pc, #524]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	0f1b      	lsrs	r3, r3, #28
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	e006      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80069fc:	4b80      	ldr	r3, [pc, #512]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80069fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	0f1b      	lsrs	r3, r3, #28
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	4a7f      	ldr	r2, [pc, #508]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a12:	e34e      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a18:	e34b      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006a22:	430b      	orrs	r3, r1
 8006a24:	d147      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a26:	4b76      	ldr	r3, [pc, #472]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fd ff6a 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a3e:	e338      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a46:	d103      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a48:	f7fd fe40 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006a4c:	6378      	str	r0, [r7, #52]	; 0x34
 8006a4e:	e330      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a50:	4b6b      	ldr	r3, [pc, #428]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5c:	d106      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d102      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8006a66:	4b67      	ldr	r3, [pc, #412]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	e322      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006a6c:	4b64      	ldr	r3, [pc, #400]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d11b      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a7e:	d117      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a80:	4b5f      	ldr	r3, [pc, #380]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006a8c:	4b5c      	ldr	r3, [pc, #368]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	0e1b      	lsrs	r3, r3, #24
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	e006      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8006a98:	4b59      	ldr	r3, [pc, #356]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	0e1b      	lsrs	r3, r3, #24
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	4a58      	ldr	r2, [pc, #352]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	e300      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab4:	e2fd      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	d15b      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006ac2:	4b4f      	ldr	r3, [pc, #316]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006acc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d117      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ad4:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8006ae0:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	0e1b      	lsrs	r3, r3, #24
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006aec:	4b44      	ldr	r3, [pc, #272]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	0e1b      	lsrs	r3, r3, #24
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	4a43      	ldr	r2, [pc, #268]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	e2d6      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006b04:	4b3e      	ldr	r3, [pc, #248]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b12:	d112      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d10e      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b1c:	4b38      	ldr	r3, [pc, #224]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b2a:	d102      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8006b2c:	23fa      	movs	r3, #250	; 0xfa
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b30:	e2bf      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b32:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b38:	e2bb      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006b3a:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b46:	d106      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b4e:	d102      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8006b50:	4b2c      	ldr	r3, [pc, #176]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	e2ad      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006b56:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d107      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b6a:	d103      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8006b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	e29e      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	e29b      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006b82:	430b      	orrs	r3, r1
 8006b84:	d162      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d117      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006ba4:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	e006      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	0e1b      	lsrs	r3, r3, #24
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	e274      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd6:	d119      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bde:	d115      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8006bf0:	23fa      	movs	r3, #250	; 0xfa
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bf4:	e25d      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006bf6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bfc:	e259      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006bfe:	bf00      	nop
 8006c00:	46020c00 	.word	0x46020c00
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	08009dc4 	.word	0x08009dc4
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006c0c:	4b9d      	ldr	r3, [pc, #628]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d106      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c20:	d102      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8006c22:	4b99      	ldr	r3, [pc, #612]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	e244      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006c28:	4b96      	ldr	r3, [pc, #600]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d107      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3c:	d103      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8006c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
 8006c44:	e235      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4a:	e232      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006c54:	430b      	orrs	r3, r1
 8006c56:	d147      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c58:	4b8a      	ldr	r3, [pc, #552]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c5e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c6a:	f7fd fe51 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006c6e:	6378      	str	r0, [r7, #52]	; 0x34
 8006c70:	e21f      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006c72:	4b84      	ldr	r3, [pc, #528]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c80:	d112      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c88:	d10e      	bne.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c8a:	4b7e      	ldr	r3, [pc, #504]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c98:	d102      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8006c9a:	23fa      	movs	r3, #250	; 0xfa
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c9e:	e208      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006ca0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ca6:	e204      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006ca8:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d106      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cbc:	d102      	bne.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8006cbe:	4b72      	ldr	r3, [pc, #456]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc2:	e1f6      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006cc4:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d107      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	e1e7      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce6:	e1e4      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cec:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	d12d      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006cf4:	4b63      	ldr	r3, [pc, #396]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cfa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006d00:	4b60      	ldr	r3, [pc, #384]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0c:	d105      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006d14:	4b5c      	ldr	r3, [pc, #368]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
 8006d18:	e1cb      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d20:	d107      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fc74 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	e1bf      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d38:	d107      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d3a:	f107 0318 	add.w	r3, r7, #24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fdce 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	e1b3      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4e:	e1b0      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d54:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	d14d      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d5c:	4b49      	ldr	r3, [pc, #292]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d66:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d6e:	d028      	beq.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d76:	d83c      	bhi.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d86:	d834      	bhi.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d94:	d004      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006d96:	e02c      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d98:	f7fd fdce 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8006d9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d9e:	e188      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006da0:	f7fd fc94 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006da4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006da6:	e184      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006da8:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db4:	d102      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8006db6:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dba:	e17a      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc0:	e177      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dc2:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006dce:	4b2d      	ldr	r3, [pc, #180]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	0e1b      	lsrs	r3, r3, #24
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006dda:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	0e1b      	lsrs	r3, r3, #24
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	4a28      	ldr	r2, [pc, #160]	; (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df0:	e15f      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df6:	e15c      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfc:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006e00:	430b      	orrs	r3, r1
 8006e02:	d154      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e04:	4b1f      	ldr	r3, [pc, #124]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e16:	d028      	beq.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e1e:	d843      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e26:	d013      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2e:	d83b      	bhi.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006e3e:	e033      	b.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fd fd66 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006e44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e46:	e134      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e48:	f7fd fc40 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006e4c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e4e:	e130      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5c:	d102      	bne.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e62:	e126      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e68:	e123      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006e76:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	e00d      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006e82:	bf00      	nop
 8006e84:	46020c00 	.word	0x46020c00
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	08009dc4 	.word	0x08009dc4
 8006e90:	4b8a      	ldr	r3, [pc, #552]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e96:	041b      	lsls	r3, r3, #16
 8006e98:	0e1b      	lsrs	r3, r3, #24
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	4a88      	ldr	r2, [pc, #544]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ea6:	e104      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eac:	e101      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	d16e      	bne.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006eba:	4b80      	ldr	r3, [pc, #512]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ec0:	f003 0318 	and.w	r3, r3, #24
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	2b18      	cmp	r3, #24
 8006eca:	d862      	bhi.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006f39 	.word	0x08006f39
 8006ed8:	08006f93 	.word	0x08006f93
 8006edc:	08006f93 	.word	0x08006f93
 8006ee0:	08006f93 	.word	0x08006f93
 8006ee4:	08006f93 	.word	0x08006f93
 8006ee8:	08006f93 	.word	0x08006f93
 8006eec:	08006f93 	.word	0x08006f93
 8006ef0:	08006f93 	.word	0x08006f93
 8006ef4:	08006f41 	.word	0x08006f41
 8006ef8:	08006f93 	.word	0x08006f93
 8006efc:	08006f93 	.word	0x08006f93
 8006f00:	08006f93 	.word	0x08006f93
 8006f04:	08006f93 	.word	0x08006f93
 8006f08:	08006f93 	.word	0x08006f93
 8006f0c:	08006f93 	.word	0x08006f93
 8006f10:	08006f93 	.word	0x08006f93
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f93 	.word	0x08006f93
 8006f1c:	08006f93 	.word	0x08006f93
 8006f20:	08006f93 	.word	0x08006f93
 8006f24:	08006f93 	.word	0x08006f93
 8006f28:	08006f93 	.word	0x08006f93
 8006f2c:	08006f93 	.word	0x08006f93
 8006f30:	08006f93 	.word	0x08006f93
 8006f34:	08006f63 	.word	0x08006f63
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006f38:	f7fd fd12 	bl	8004960 <HAL_RCC_GetPCLK3Freq>
 8006f3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f3e:	e0b8      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f40:	f7fd fbc4 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8006f44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f46:	e0b4      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f48:	4b5c      	ldr	r3, [pc, #368]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f54:	d102      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006f56:	4b5b      	ldr	r3, [pc, #364]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f5a:	e0aa      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f60:	e0a7      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f62:	4b56      	ldr	r3, [pc, #344]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006f6e:	4b53      	ldr	r3, [pc, #332]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	0e1b      	lsrs	r3, r3, #24
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	e006      	b.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006f7a:	4b50      	ldr	r3, [pc, #320]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f80:	041b      	lsls	r3, r3, #16
 8006f82:	0e1b      	lsrs	r3, r3, #24
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	4a4d      	ldr	r2, [pc, #308]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f90:	e08f      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f96:	e08c      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	d14c      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006fa4:	4b45      	ldr	r3, [pc, #276]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006fa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006faa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fbe:	d83b      	bhi.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fc6:	d013      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fce:	d833      	bhi.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d014      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fdc:	d014      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006fde:	e02b      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe0:	f107 0318 	add.w	r3, r7, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fc7b 	bl	80058e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fee:	e060      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fb0d 	bl	8005614 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ffe:	e058      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007000:	f7fd fb64 	bl	80046cc <HAL_RCC_GetSysClockFreq>
 8007004:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007006:	e054      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007008:	4b2c      	ldr	r3, [pc, #176]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007014:	4b29      	ldr	r3, [pc, #164]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	0e1b      	lsrs	r3, r3, #24
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	e006      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007020:	4b26      	ldr	r3, [pc, #152]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	0e1b      	lsrs	r3, r3, #24
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007036:	e03c      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800703c:	e039      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800703e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007042:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007046:	430b      	orrs	r3, r1
 8007048:	d131      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800704a:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800704c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007054:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007056:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d106      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
 8007070:	e01f      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007080:	d112      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007088:	d10e      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800708c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007098:	d102      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800709a:	23fa      	movs	r3, #250	; 0xfa
 800709c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800709e:	e008      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80070a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	e001      	b.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80070b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3738      	adds	r7, #56	; 0x38
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	46020c00 	.word	0x46020c00
 80070c0:	08009dc4 	.word	0x08009dc4
 80070c4:	00f42400 	.word	0x00f42400

080070c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80070d0:	4b47      	ldr	r3, [pc, #284]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a46      	ldr	r2, [pc, #280]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80070d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070dc:	f7fa ff32 	bl	8001f44 <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070e4:	f7fa ff2e 	bl	8001f44 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e077      	b.n	80071e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070f6:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007102:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6811      	ldr	r1, [r2, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	3a01      	subs	r2, #1
 8007118:	0212      	lsls	r2, r2, #8
 800711a:	430a      	orrs	r2, r1
 800711c:	4934      	ldr	r1, [pc, #208]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 800711e:	4313      	orrs	r3, r2
 8007120:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007122:	4b33      	ldr	r3, [pc, #204]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007126:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <RCCEx_PLL2_Config+0x12c>)
 8007128:	4013      	ands	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6892      	ldr	r2, [r2, #8]
 800712e:	3a01      	subs	r2, #1
 8007130:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68d2      	ldr	r2, [r2, #12]
 8007138:	3a01      	subs	r2, #1
 800713a:	0252      	lsls	r2, r2, #9
 800713c:	b292      	uxth	r2, r2
 800713e:	4311      	orrs	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6912      	ldr	r2, [r2, #16]
 8007144:	3a01      	subs	r2, #1
 8007146:	0412      	lsls	r2, r2, #16
 8007148:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800714c:	4311      	orrs	r1, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6952      	ldr	r2, [r2, #20]
 8007152:	3a01      	subs	r2, #1
 8007154:	0612      	lsls	r2, r2, #24
 8007156:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800715a:	430a      	orrs	r2, r1
 800715c:	4924      	ldr	r1, [pc, #144]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 800715e:	4313      	orrs	r3, r2
 8007160:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007162:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	f023 020c 	bic.w	r2, r3, #12
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	4920      	ldr	r1, [pc, #128]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007170:	4313      	orrs	r3, r2
 8007172:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	491c      	ldr	r1, [pc, #112]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 800717e:	4313      	orrs	r3, r2
 8007180:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007182:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007188:	f023 0310 	bic.w	r3, r3, #16
 800718c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800718e:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	69d2      	ldr	r2, [r2, #28]
 800719e:	00d2      	lsls	r2, r2, #3
 80071a0:	4913      	ldr	r1, [pc, #76]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071ac:	f043 0310 	orr.w	r3, r3, #16
 80071b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071be:	f7fa fec1 	bl	8001f44 <HAL_GetTick>
 80071c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071c4:	e008      	b.n	80071d8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071c6:	f7fa febd 	bl	8001f44 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <RCCEx_PLL2_Config+0x128>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0

}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	46020c00 	.word	0x46020c00
 80071f4:	80800000 	.word	0x80800000

080071f8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007200:	4b47      	ldr	r3, [pc, #284]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a46      	ldr	r2, [pc, #280]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800720c:	f7fa fe9a 	bl	8001f44 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007212:	e008      	b.n	8007226 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007214:	f7fa fe96 	bl	8001f44 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e077      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007226:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007232:	4b3b      	ldr	r3, [pc, #236]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800723a:	f023 0303 	bic.w	r3, r3, #3
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6811      	ldr	r1, [r2, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6852      	ldr	r2, [r2, #4]
 8007246:	3a01      	subs	r2, #1
 8007248:	0212      	lsls	r2, r2, #8
 800724a:	430a      	orrs	r2, r1
 800724c:	4934      	ldr	r1, [pc, #208]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 800724e:	4313      	orrs	r3, r2
 8007250:	630b      	str	r3, [r1, #48]	; 0x30
 8007252:	4b33      	ldr	r3, [pc, #204]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <RCCEx_PLL3_Config+0x12c>)
 8007258:	4013      	ands	r3, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6892      	ldr	r2, [r2, #8]
 800725e:	3a01      	subs	r2, #1
 8007260:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	68d2      	ldr	r2, [r2, #12]
 8007268:	3a01      	subs	r2, #1
 800726a:	0252      	lsls	r2, r2, #9
 800726c:	b292      	uxth	r2, r2
 800726e:	4311      	orrs	r1, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6912      	ldr	r2, [r2, #16]
 8007274:	3a01      	subs	r2, #1
 8007276:	0412      	lsls	r2, r2, #16
 8007278:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800727c:	4311      	orrs	r1, r2
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6952      	ldr	r2, [r2, #20]
 8007282:	3a01      	subs	r2, #1
 8007284:	0612      	lsls	r2, r2, #24
 8007286:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800728a:	430a      	orrs	r2, r1
 800728c:	4924      	ldr	r1, [pc, #144]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 800728e:	4313      	orrs	r3, r2
 8007290:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007292:	4b23      	ldr	r3, [pc, #140]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f023 020c 	bic.w	r2, r3, #12
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	4920      	ldr	r1, [pc, #128]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	491c      	ldr	r1, [pc, #112]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80072b2:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	4a1a      	ldr	r2, [pc, #104]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072b8:	f023 0310 	bic.w	r3, r3, #16
 80072bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	69d2      	ldr	r2, [r2, #28]
 80072ce:	00d2      	lsls	r2, r2, #3
 80072d0:	4913      	ldr	r1, [pc, #76]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	4a11      	ldr	r2, [pc, #68]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072dc:	f043 0310 	orr.w	r3, r3, #16
 80072e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80072e2:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a0e      	ldr	r2, [pc, #56]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 80072e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072ee:	f7fa fe29 	bl	8001f44 <HAL_GetTick>
 80072f2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072f4:	e008      	b.n	8007308 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072f6:	f7fa fe25 	bl	8001f44 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e006      	b.n	8007316 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <RCCEx_PLL3_Config+0x128>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0f0      	beq.n	80072f6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	46020c00 	.word	0x46020c00
 8007324:	80800000 	.word	0x80800000

08007328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e042      	b.n	80073c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007340:	2b00      	cmp	r3, #0
 8007342:	d106      	bne.n	8007352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fa fcef 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2224      	movs	r2, #36	; 0x24
 8007356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9b4 	bl	80076d8 <UART_SetConfig>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e022      	b.n	80073c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fb4a 	bl	8007a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fbd1 	bl	8007b60 <UART_CheckIdleState>
 80073be:	4603      	mov	r3, r0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073de:	2b20      	cmp	r3, #32
 80073e0:	f040 8092 	bne.w	8007508 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_UART_Transmit+0x28>
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e08a      	b.n	800750a <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Transmit+0x3a>
 80073fe:	2302      	movs	r3, #2
 8007400:	e083      	b.n	800750a <HAL_UART_Transmit+0x142>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d107      	bne.n	8007428 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007426:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2221      	movs	r2, #33	; 0x21
 8007434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007438:	f7fa fd84 	bl	8001f44 <HAL_GetTick>
 800743c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	88fa      	ldrh	r2, [r7, #6]
 800744a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	d108      	bne.n	800746a <HAL_UART_Transmit+0xa2>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	e003      	b.n	8007472 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800747a:	e02c      	b.n	80074d6 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fbb5 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e039      	b.n	800750a <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10b      	bne.n	80074b4 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	3302      	adds	r3, #2
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e007      	b.n	80074c4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3301      	adds	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1cc      	bne.n	800747c <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	2200      	movs	r2, #0
 80074ea:	2140      	movs	r1, #64	; 0x40
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fb82 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e006      	b.n	800750a <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2220      	movs	r2, #32
 8007500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b08a      	sub	sp, #40	; 0x28
 8007516:	af02      	add	r7, sp, #8
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	603b      	str	r3, [r7, #0]
 800751e:	4613      	mov	r3, r2
 8007520:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	2b20      	cmp	r3, #32
 800752a:	f040 80cf 	bne.w	80076cc <HAL_UART_Receive+0x1ba>
  {
    if ((pData == NULL) || (Size == 0U))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_UART_Receive+0x28>
 8007534:	88fb      	ldrh	r3, [r7, #6]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0c7      	b.n	80076ce <HAL_UART_Receive+0x1bc>
    }

    __HAL_LOCK(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_UART_Receive+0x3a>
 8007548:	2302      	movs	r3, #2
 800754a:	e0c0      	b.n	80076ce <HAL_UART_Receive+0x1bc>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d107      	bne.n	8007572 <HAL_UART_Receive+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007570:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2222      	movs	r2, #34	; 0x22
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007588:	f7fa fcdc 	bl	8001f44 <HAL_GetTick>
 800758c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	d10e      	bne.n	80075c6 <HAL_UART_Receive+0xb4>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d105      	bne.n	80075bc <HAL_UART_Receive+0xaa>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075ba:	e02d      	b.n	8007618 <HAL_UART_Receive+0x106>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	22ff      	movs	r2, #255	; 0xff
 80075c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075c4:	e028      	b.n	8007618 <HAL_UART_Receive+0x106>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10d      	bne.n	80075ea <HAL_UART_Receive+0xd8>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d104      	bne.n	80075e0 <HAL_UART_Receive+0xce>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	22ff      	movs	r2, #255	; 0xff
 80075da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075de:	e01b      	b.n	8007618 <HAL_UART_Receive+0x106>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	227f      	movs	r2, #127	; 0x7f
 80075e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075e8:	e016      	b.n	8007618 <HAL_UART_Receive+0x106>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075f2:	d10d      	bne.n	8007610 <HAL_UART_Receive+0xfe>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <HAL_UART_Receive+0xf4>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	227f      	movs	r2, #127	; 0x7f
 8007600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007604:	e008      	b.n	8007618 <HAL_UART_Receive+0x106>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	223f      	movs	r2, #63	; 0x3f
 800760a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800760e:	e003      	b.n	8007618 <HAL_UART_Receive+0x106>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800761e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d108      	bne.n	800763c <HAL_UART_Receive+0x12a>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <HAL_UART_Receive+0x12a>
    {
      pdata8bits  = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e003      	b.n	8007644 <HAL_UART_Receive+0x132>
    }
    else
    {
      pdata8bits  = pData;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800764c:	e032      	b.n	80076b4 <HAL_UART_Receive+0x1a2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	2120      	movs	r1, #32
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 facc 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_UART_Receive+0x156>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e032      	b.n	80076ce <HAL_UART_Receive+0x1bc>
      }
      if (pdata8bits == NULL)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10c      	bne.n	8007688 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	b29a      	uxth	r2, r3
 8007676:	8a7b      	ldrh	r3, [r7, #18]
 8007678:	4013      	ands	r3, r2
 800767a:	b29a      	uxth	r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	3302      	adds	r3, #2
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	e00c      	b.n	80076a2 <HAL_UART_Receive+0x190>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	b2da      	uxtb	r2, r3
 8007690:	8a7b      	ldrh	r3, [r7, #18]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4013      	ands	r3, r2
 8007696:	b2da      	uxtb	r2, r3
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1c6      	bne.n	800764e <HAL_UART_Receive+0x13c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e000      	b.n	80076ce <HAL_UART_Receive+0x1bc>
  }
  else
  {
    return HAL_BUSY;
 80076cc:	2302      	movs	r3, #2
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076dc:	b094      	sub	sp, #80	; 0x50
 80076de:	af00      	add	r7, sp, #0
 80076e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b7e      	ldr	r3, [pc, #504]	; (80078e8 <UART_SetConfig+0x210>)
 80076ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	431a      	orrs	r2, r3
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	4313      	orrs	r3, r2
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4977      	ldr	r1, [pc, #476]	; (80078ec <UART_SetConfig+0x214>)
 8007710:	4019      	ands	r1, r3
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007718:	430b      	orrs	r3, r1
 800771a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	68d9      	ldr	r1, [r3, #12]
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	ea40 0301 	orr.w	r3, r0, r1
 8007732:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b6a      	ldr	r3, [pc, #424]	; (80078e8 <UART_SetConfig+0x210>)
 8007740:	429a      	cmp	r2, r3
 8007742:	d009      	beq.n	8007758 <UART_SetConfig+0x80>
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4b69      	ldr	r3, [pc, #420]	; (80078f0 <UART_SetConfig+0x218>)
 800774a:	429a      	cmp	r2, r3
 800774c:	d004      	beq.n	8007758 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007754:	4313      	orrs	r3, r2
 8007756:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007762:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776c:	430b      	orrs	r3, r1
 800776e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	f023 000f 	bic.w	r0, r3, #15
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	ea40 0301 	orr.w	r3, r0, r1
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4b59      	ldr	r3, [pc, #356]	; (80078f4 <UART_SetConfig+0x21c>)
 800778e:	429a      	cmp	r2, r3
 8007790:	d102      	bne.n	8007798 <UART_SetConfig+0xc0>
 8007792:	2301      	movs	r3, #1
 8007794:	64bb      	str	r3, [r7, #72]	; 0x48
 8007796:	e029      	b.n	80077ec <UART_SetConfig+0x114>
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	4b56      	ldr	r3, [pc, #344]	; (80078f8 <UART_SetConfig+0x220>)
 800779e:	429a      	cmp	r2, r3
 80077a0:	d102      	bne.n	80077a8 <UART_SetConfig+0xd0>
 80077a2:	2302      	movs	r3, #2
 80077a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a6:	e021      	b.n	80077ec <UART_SetConfig+0x114>
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b53      	ldr	r3, [pc, #332]	; (80078fc <UART_SetConfig+0x224>)
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d102      	bne.n	80077b8 <UART_SetConfig+0xe0>
 80077b2:	2304      	movs	r3, #4
 80077b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b6:	e019      	b.n	80077ec <UART_SetConfig+0x114>
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	4b50      	ldr	r3, [pc, #320]	; (8007900 <UART_SetConfig+0x228>)
 80077be:	429a      	cmp	r2, r3
 80077c0:	d102      	bne.n	80077c8 <UART_SetConfig+0xf0>
 80077c2:	2308      	movs	r3, #8
 80077c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c6:	e011      	b.n	80077ec <UART_SetConfig+0x114>
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b4d      	ldr	r3, [pc, #308]	; (8007904 <UART_SetConfig+0x22c>)
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d102      	bne.n	80077d8 <UART_SetConfig+0x100>
 80077d2:	2310      	movs	r3, #16
 80077d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d6:	e009      	b.n	80077ec <UART_SetConfig+0x114>
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	4b42      	ldr	r3, [pc, #264]	; (80078e8 <UART_SetConfig+0x210>)
 80077de:	429a      	cmp	r2, r3
 80077e0:	d102      	bne.n	80077e8 <UART_SetConfig+0x110>
 80077e2:	2320      	movs	r3, #32
 80077e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077e6:	e001      	b.n	80077ec <UART_SetConfig+0x114>
 80077e8:	2300      	movs	r3, #0
 80077ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b3d      	ldr	r3, [pc, #244]	; (80078e8 <UART_SetConfig+0x210>)
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d005      	beq.n	8007802 <UART_SetConfig+0x12a>
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b3d      	ldr	r3, [pc, #244]	; (80078f0 <UART_SetConfig+0x218>)
 80077fc:	429a      	cmp	r2, r3
 80077fe:	f040 8085 	bne.w	800790c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007804:	2200      	movs	r2, #0
 8007806:	623b      	str	r3, [r7, #32]
 8007808:	627a      	str	r2, [r7, #36]	; 0x24
 800780a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800780e:	f7fe fb33 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 8007812:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80e8 	beq.w	80079ec <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	4a39      	ldr	r2, [pc, #228]	; (8007908 <UART_SetConfig+0x230>)
 8007822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007826:	461a      	mov	r2, r3
 8007828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782a:	fbb3 f3f2 	udiv	r3, r3, r2
 800782e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	4613      	mov	r3, r2
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	4413      	add	r3, r2
 800783a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800783c:	429a      	cmp	r2, r3
 800783e:	d305      	bcc.n	800784c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007848:	429a      	cmp	r2, r3
 800784a:	d903      	bls.n	8007854 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007852:	e048      	b.n	80078e6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007856:	2200      	movs	r2, #0
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	61fa      	str	r2, [r7, #28]
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	4a29      	ldr	r2, [pc, #164]	; (8007908 <UART_SetConfig+0x230>)
 8007862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007866:	b29b      	uxth	r3, r3
 8007868:	2200      	movs	r2, #0
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	617a      	str	r2, [r7, #20]
 800786e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007872:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007876:	f7f9 f9bb 	bl	8000bf0 <__aeabi_uldivmod>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	020b      	lsls	r3, r1, #8
 800788c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007890:	0202      	lsls	r2, r0, #8
 8007892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007894:	6849      	ldr	r1, [r1, #4]
 8007896:	0849      	lsrs	r1, r1, #1
 8007898:	2000      	movs	r0, #0
 800789a:	460c      	mov	r4, r1
 800789c:	4605      	mov	r5, r0
 800789e:	eb12 0804 	adds.w	r8, r2, r4
 80078a2:	eb43 0905 	adc.w	r9, r3, r5
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	60fa      	str	r2, [r7, #12]
 80078b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078b4:	4640      	mov	r0, r8
 80078b6:	4649      	mov	r1, r9
 80078b8:	f7f9 f99a 	bl	8000bf0 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4613      	mov	r3, r2
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ca:	d308      	bcc.n	80078de <UART_SetConfig+0x206>
 80078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d2:	d204      	bcs.n	80078de <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078da:	60da      	str	r2, [r3, #12]
 80078dc:	e003      	b.n	80078e6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80078e4:	e082      	b.n	80079ec <UART_SetConfig+0x314>
 80078e6:	e081      	b.n	80079ec <UART_SetConfig+0x314>
 80078e8:	46002400 	.word	0x46002400
 80078ec:	cfff69f3 	.word	0xcfff69f3
 80078f0:	56002400 	.word	0x56002400
 80078f4:	40013800 	.word	0x40013800
 80078f8:	40004400 	.word	0x40004400
 80078fc:	40004800 	.word	0x40004800
 8007900:	40004c00 	.word	0x40004c00
 8007904:	40005000 	.word	0x40005000
 8007908:	08009e84 	.word	0x08009e84
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007914:	d13c      	bne.n	8007990 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007918:	2200      	movs	r2, #0
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007922:	f7fe faa9 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 8007926:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d05e      	beq.n	80079ec <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	4a39      	ldr	r2, [pc, #228]	; (8007a18 <UART_SetConfig+0x340>)
 8007934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007938:	461a      	mov	r2, r3
 800793a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007940:	005a      	lsls	r2, r3, #1
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	441a      	add	r2, r3
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d916      	bls.n	8007988 <UART_SetConfig+0x2b0>
 800795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d212      	bcs.n	8007988 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	b29b      	uxth	r3, r3
 8007966:	f023 030f 	bic.w	r3, r3, #15
 800796a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	b29a      	uxth	r2, r3
 8007978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800797a:	4313      	orrs	r3, r2
 800797c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	e031      	b.n	80079ec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800798e:	e02d      	b.n	80079ec <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007992:	2200      	movs	r2, #0
 8007994:	469a      	mov	sl, r3
 8007996:	4693      	mov	fp, r2
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7fe fa6c 	bl	8005e78 <HAL_RCCEx_GetPeriphCLKFreq>
 80079a0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80079a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d021      	beq.n	80079ec <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	4a1a      	ldr	r2, [pc, #104]	; (8007a18 <UART_SetConfig+0x340>)
 80079ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	441a      	add	r2, r3
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ce:	2b0f      	cmp	r3, #15
 80079d0:	d909      	bls.n	80079e6 <UART_SetConfig+0x30e>
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d8:	d205      	bcs.n	80079e6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60da      	str	r2, [r3, #12]
 80079e4:	e002      	b.n	80079ec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	2201      	movs	r2, #1
 80079f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	2201      	movs	r2, #1
 80079f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	2200      	movs	r2, #0
 8007a00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	2200      	movs	r2, #0
 8007a06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3750      	adds	r7, #80	; 0x50
 8007a10:	46bd      	mov	sp, r7
 8007a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a16:	bf00      	nop
 8007a18:	08009e84 	.word	0x08009e84

08007a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01a      	beq.n	8007b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1a:	d10a      	bne.n	8007b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b70:	f7fa f9e8 	bl	8001f44 <HAL_GetTick>
 8007b74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d10e      	bne.n	8007ba2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f82f 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e025      	b.n	8007bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d10e      	bne.n	8007bce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f819 	bl	8007bf6 <UART_WaitOnFlagUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e00f      	b.n	8007bee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b09c      	sub	sp, #112	; 0x70
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c06:	e0a9      	b.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	f000 80a5 	beq.w	8007d5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fa f997 	bl	8001f44 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d140      	bne.n	8007caa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	663b      	str	r3, [r7, #96]	; 0x60
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e069      	b.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d051      	beq.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc6:	d149      	bne.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e6      	bne.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	613b      	str	r3, [r7, #16]
   return(result);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d24:	623a      	str	r2, [r7, #32]
 8007d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	69f9      	ldr	r1, [r7, #28]
 8007d2a:	6a3a      	ldr	r2, [r7, #32]
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e5      	bne.n	8007d04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e010      	b.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69da      	ldr	r2, [r3, #28]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4013      	ands	r3, r2
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	f43f af46 	beq.w	8007c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3770      	adds	r7, #112	; 0x70
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b085      	sub	sp, #20
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_UARTEx_DisableFifoMode+0x16>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e027      	b.n	8007dec <HAL_UARTEx_DisableFifoMode+0x66>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2224      	movs	r2, #36	; 0x24
 8007da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0201 	bic.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e02d      	b.n	8007e6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2224      	movs	r2, #36	; 0x24
 8007e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f84f 	bl	8007ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e02d      	b.n	8007ee8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0201 	bic.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f811 	bl	8007ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d108      	bne.n	8007f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f10:	e031      	b.n	8007f76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f12:	2308      	movs	r3, #8
 8007f14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f16:	2308      	movs	r3, #8
 8007f18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	0e5b      	lsrs	r3, r3, #25
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	0f5b      	lsrs	r3, r3, #29
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	7b3a      	ldrb	r2, [r7, #12]
 8007f3e:	4911      	ldr	r1, [pc, #68]	; (8007f84 <UARTEx_SetNbDataToProcess+0x94>)
 8007f40:	5c8a      	ldrb	r2, [r1, r2]
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f46:	7b3a      	ldrb	r2, [r7, #12]
 8007f48:	490f      	ldr	r1, [pc, #60]	; (8007f88 <UARTEx_SetNbDataToProcess+0x98>)
 8007f4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	7b7a      	ldrb	r2, [r7, #13]
 8007f5c:	4909      	ldr	r1, [pc, #36]	; (8007f84 <UARTEx_SetNbDataToProcess+0x94>)
 8007f5e:	5c8a      	ldrb	r2, [r1, r2]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f64:	7b7a      	ldrb	r2, [r7, #13]
 8007f66:	4908      	ldr	r1, [pc, #32]	; (8007f88 <UARTEx_SetNbDataToProcess+0x98>)
 8007f68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	08009e9c 	.word	0x08009e9c
 8007f88:	08009ea4 	.word	0x08009ea4

08007f8c <__errno>:
 8007f8c:	4b01      	ldr	r3, [pc, #4]	; (8007f94 <__errno+0x8>)
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000020 	.word	0x20000020

08007f98 <__libc_init_array>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	4d0d      	ldr	r5, [pc, #52]	; (8007fd0 <__libc_init_array+0x38>)
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	4c0d      	ldr	r4, [pc, #52]	; (8007fd4 <__libc_init_array+0x3c>)
 8007fa0:	1b64      	subs	r4, r4, r5
 8007fa2:	10a4      	asrs	r4, r4, #2
 8007fa4:	42a6      	cmp	r6, r4
 8007fa6:	d109      	bne.n	8007fbc <__libc_init_array+0x24>
 8007fa8:	4d0b      	ldr	r5, [pc, #44]	; (8007fd8 <__libc_init_array+0x40>)
 8007faa:	2600      	movs	r6, #0
 8007fac:	4c0b      	ldr	r4, [pc, #44]	; (8007fdc <__libc_init_array+0x44>)
 8007fae:	f001 fda7 	bl	8009b00 <_init>
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	42a6      	cmp	r6, r4
 8007fb8:	d105      	bne.n	8007fc6 <__libc_init_array+0x2e>
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	4798      	blx	r3
 8007fc4:	e7ee      	b.n	8007fa4 <__libc_init_array+0xc>
 8007fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fca:	3601      	adds	r6, #1
 8007fcc:	4798      	blx	r3
 8007fce:	e7f2      	b.n	8007fb6 <__libc_init_array+0x1e>
 8007fd0:	08009fc0 	.word	0x08009fc0
 8007fd4:	08009fc0 	.word	0x08009fc0
 8007fd8:	08009fc0 	.word	0x08009fc0
 8007fdc:	08009fc4 	.word	0x08009fc4

08007fe0 <memset>:
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d100      	bne.n	8007fea <memset+0xa>
 8007fe8:	4770      	bx	lr
 8007fea:	f803 1b01 	strb.w	r1, [r3], #1
 8007fee:	e7f9      	b.n	8007fe4 <memset+0x4>

08007ff0 <__sfputc_r>:
 8007ff0:	6893      	ldr	r3, [r2, #8]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	6093      	str	r3, [r2, #8]
 8007ff8:	b410      	push	{r4}
 8007ffa:	da08      	bge.n	800800e <__sfputc_r+0x1e>
 8007ffc:	6994      	ldr	r4, [r2, #24]
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	db01      	blt.n	8008006 <__sfputc_r+0x16>
 8008002:	290a      	cmp	r1, #10
 8008004:	d103      	bne.n	800800e <__sfputc_r+0x1e>
 8008006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800800a:	f000 bb19 	b.w	8008640 <__swbuf_r>
 800800e:	6813      	ldr	r3, [r2, #0]
 8008010:	1c58      	adds	r0, r3, #1
 8008012:	6010      	str	r0, [r2, #0]
 8008014:	4608      	mov	r0, r1
 8008016:	7019      	strb	r1, [r3, #0]
 8008018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800801c:	4770      	bx	lr

0800801e <__sfputs_r>:
 800801e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008020:	4606      	mov	r6, r0
 8008022:	460f      	mov	r7, r1
 8008024:	4614      	mov	r4, r2
 8008026:	18d5      	adds	r5, r2, r3
 8008028:	42ac      	cmp	r4, r5
 800802a:	d101      	bne.n	8008030 <__sfputs_r+0x12>
 800802c:	2000      	movs	r0, #0
 800802e:	e007      	b.n	8008040 <__sfputs_r+0x22>
 8008030:	463a      	mov	r2, r7
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ffda 	bl	8007ff0 <__sfputc_r>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d1f3      	bne.n	8008028 <__sfputs_r+0xa>
 8008040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008044 <_vfiprintf_r>:
 8008044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	460d      	mov	r5, r1
 800804a:	b09d      	sub	sp, #116	; 0x74
 800804c:	4614      	mov	r4, r2
 800804e:	4698      	mov	r8, r3
 8008050:	4606      	mov	r6, r0
 8008052:	b118      	cbz	r0, 800805c <_vfiprintf_r+0x18>
 8008054:	6983      	ldr	r3, [r0, #24]
 8008056:	b90b      	cbnz	r3, 800805c <_vfiprintf_r+0x18>
 8008058:	f000 fcca 	bl	80089f0 <__sinit>
 800805c:	4b89      	ldr	r3, [pc, #548]	; (8008284 <_vfiprintf_r+0x240>)
 800805e:	429d      	cmp	r5, r3
 8008060:	d11b      	bne.n	800809a <_vfiprintf_r+0x56>
 8008062:	6875      	ldr	r5, [r6, #4]
 8008064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d405      	bmi.n	8008076 <_vfiprintf_r+0x32>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d402      	bmi.n	8008076 <_vfiprintf_r+0x32>
 8008070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008072:	f000 fd5b 	bl	8008b2c <__retarget_lock_acquire_recursive>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	071b      	lsls	r3, r3, #28
 800807a:	d501      	bpl.n	8008080 <_vfiprintf_r+0x3c>
 800807c:	692b      	ldr	r3, [r5, #16]
 800807e:	b9eb      	cbnz	r3, 80080bc <_vfiprintf_r+0x78>
 8008080:	4629      	mov	r1, r5
 8008082:	4630      	mov	r0, r6
 8008084:	f000 fb2e 	bl	80086e4 <__swsetup_r>
 8008088:	b1c0      	cbz	r0, 80080bc <_vfiprintf_r+0x78>
 800808a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800808c:	07dc      	lsls	r4, r3, #31
 800808e:	d50e      	bpl.n	80080ae <_vfiprintf_r+0x6a>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	b01d      	add	sp, #116	; 0x74
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	4b7b      	ldr	r3, [pc, #492]	; (8008288 <_vfiprintf_r+0x244>)
 800809c:	429d      	cmp	r5, r3
 800809e:	d101      	bne.n	80080a4 <_vfiprintf_r+0x60>
 80080a0:	68b5      	ldr	r5, [r6, #8]
 80080a2:	e7df      	b.n	8008064 <_vfiprintf_r+0x20>
 80080a4:	4b79      	ldr	r3, [pc, #484]	; (800828c <_vfiprintf_r+0x248>)
 80080a6:	429d      	cmp	r5, r3
 80080a8:	bf08      	it	eq
 80080aa:	68f5      	ldreq	r5, [r6, #12]
 80080ac:	e7da      	b.n	8008064 <_vfiprintf_r+0x20>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	0598      	lsls	r0, r3, #22
 80080b2:	d4ed      	bmi.n	8008090 <_vfiprintf_r+0x4c>
 80080b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080b6:	f000 fd3a 	bl	8008b2e <__retarget_lock_release_recursive>
 80080ba:	e7e9      	b.n	8008090 <_vfiprintf_r+0x4c>
 80080bc:	2300      	movs	r3, #0
 80080be:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c2:	f04f 0901 	mov.w	r9, #1
 80080c6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8008290 <_vfiprintf_r+0x24c>
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	2320      	movs	r3, #32
 80080ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080d2:	2330      	movs	r3, #48	; 0x30
 80080d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d8:	4623      	mov	r3, r4
 80080da:	469a      	mov	sl, r3
 80080dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e0:	b10a      	cbz	r2, 80080e6 <_vfiprintf_r+0xa2>
 80080e2:	2a25      	cmp	r2, #37	; 0x25
 80080e4:	d1f9      	bne.n	80080da <_vfiprintf_r+0x96>
 80080e6:	ebba 0b04 	subs.w	fp, sl, r4
 80080ea:	d00b      	beq.n	8008104 <_vfiprintf_r+0xc0>
 80080ec:	465b      	mov	r3, fp
 80080ee:	4622      	mov	r2, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	4630      	mov	r0, r6
 80080f4:	f7ff ff93 	bl	800801e <__sfputs_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	f000 80aa 	beq.w	8008252 <_vfiprintf_r+0x20e>
 80080fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008100:	445a      	add	r2, fp
 8008102:	9209      	str	r2, [sp, #36]	; 0x24
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80a2 	beq.w	8008252 <_vfiprintf_r+0x20e>
 800810e:	2300      	movs	r3, #0
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008120:	931a      	str	r3, [sp, #104]	; 0x68
 8008122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008126:	4654      	mov	r4, sl
 8008128:	2205      	movs	r2, #5
 800812a:	4859      	ldr	r0, [pc, #356]	; (8008290 <_vfiprintf_r+0x24c>)
 800812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008130:	f000 fd64 	bl	8008bfc <memchr>
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	b9d8      	cbnz	r0, 8008170 <_vfiprintf_r+0x12c>
 8008138:	06d1      	lsls	r1, r2, #27
 800813a:	bf44      	itt	mi
 800813c:	2320      	movmi	r3, #32
 800813e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008142:	0713      	lsls	r3, r2, #28
 8008144:	bf44      	itt	mi
 8008146:	232b      	movmi	r3, #43	; 0x2b
 8008148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814c:	f89a 3000 	ldrb.w	r3, [sl]
 8008150:	2b2a      	cmp	r3, #42	; 0x2a
 8008152:	d015      	beq.n	8008180 <_vfiprintf_r+0x13c>
 8008154:	9a07      	ldr	r2, [sp, #28]
 8008156:	4654      	mov	r4, sl
 8008158:	2000      	movs	r0, #0
 800815a:	f04f 0c0a 	mov.w	ip, #10
 800815e:	4621      	mov	r1, r4
 8008160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008164:	3b30      	subs	r3, #48	; 0x30
 8008166:	2b09      	cmp	r3, #9
 8008168:	d94e      	bls.n	8008208 <_vfiprintf_r+0x1c4>
 800816a:	b1b0      	cbz	r0, 800819a <_vfiprintf_r+0x156>
 800816c:	9207      	str	r2, [sp, #28]
 800816e:	e014      	b.n	800819a <_vfiprintf_r+0x156>
 8008170:	eba0 0308 	sub.w	r3, r0, r8
 8008174:	46a2      	mov	sl, r4
 8008176:	fa09 f303 	lsl.w	r3, r9, r3
 800817a:	4313      	orrs	r3, r2
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	e7d2      	b.n	8008126 <_vfiprintf_r+0xe2>
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	1d19      	adds	r1, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	9103      	str	r1, [sp, #12]
 800818a:	bfbb      	ittet	lt
 800818c:	425b      	neglt	r3, r3
 800818e:	f042 0202 	orrlt.w	r2, r2, #2
 8008192:	9307      	strge	r3, [sp, #28]
 8008194:	9307      	strlt	r3, [sp, #28]
 8008196:	bfb8      	it	lt
 8008198:	9204      	strlt	r2, [sp, #16]
 800819a:	7823      	ldrb	r3, [r4, #0]
 800819c:	2b2e      	cmp	r3, #46	; 0x2e
 800819e:	d10c      	bne.n	80081ba <_vfiprintf_r+0x176>
 80081a0:	7863      	ldrb	r3, [r4, #1]
 80081a2:	2b2a      	cmp	r3, #42	; 0x2a
 80081a4:	d135      	bne.n	8008212 <_vfiprintf_r+0x1ce>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	3402      	adds	r4, #2
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	9203      	str	r2, [sp, #12]
 80081b2:	bfb8      	it	lt
 80081b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082a0 <_vfiprintf_r+0x25c>
 80081be:	2203      	movs	r2, #3
 80081c0:	7821      	ldrb	r1, [r4, #0]
 80081c2:	4650      	mov	r0, sl
 80081c4:	f000 fd1a 	bl	8008bfc <memchr>
 80081c8:	b140      	cbz	r0, 80081dc <_vfiprintf_r+0x198>
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	eba0 000a 	sub.w	r0, r0, sl
 80081d0:	3401      	adds	r4, #1
 80081d2:	fa03 f000 	lsl.w	r0, r3, r0
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	4303      	orrs	r3, r0
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e0:	2206      	movs	r2, #6
 80081e2:	482c      	ldr	r0, [pc, #176]	; (8008294 <_vfiprintf_r+0x250>)
 80081e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e8:	f000 fd08 	bl	8008bfc <memchr>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d03f      	beq.n	8008270 <_vfiprintf_r+0x22c>
 80081f0:	4b29      	ldr	r3, [pc, #164]	; (8008298 <_vfiprintf_r+0x254>)
 80081f2:	bb1b      	cbnz	r3, 800823c <_vfiprintf_r+0x1f8>
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	3307      	adds	r3, #7
 80081f8:	f023 0307 	bic.w	r3, r3, #7
 80081fc:	3308      	adds	r3, #8
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	443b      	add	r3, r7
 8008204:	9309      	str	r3, [sp, #36]	; 0x24
 8008206:	e767      	b.n	80080d8 <_vfiprintf_r+0x94>
 8008208:	fb0c 3202 	mla	r2, ip, r2, r3
 800820c:	460c      	mov	r4, r1
 800820e:	2001      	movs	r0, #1
 8008210:	e7a5      	b.n	800815e <_vfiprintf_r+0x11a>
 8008212:	2300      	movs	r3, #0
 8008214:	3401      	adds	r4, #1
 8008216:	f04f 0c0a 	mov.w	ip, #10
 800821a:	4619      	mov	r1, r3
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	4620      	mov	r0, r4
 8008220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008224:	3a30      	subs	r2, #48	; 0x30
 8008226:	2a09      	cmp	r2, #9
 8008228:	d903      	bls.n	8008232 <_vfiprintf_r+0x1ee>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0c5      	beq.n	80081ba <_vfiprintf_r+0x176>
 800822e:	9105      	str	r1, [sp, #20]
 8008230:	e7c3      	b.n	80081ba <_vfiprintf_r+0x176>
 8008232:	fb0c 2101 	mla	r1, ip, r1, r2
 8008236:	4604      	mov	r4, r0
 8008238:	2301      	movs	r3, #1
 800823a:	e7f0      	b.n	800821e <_vfiprintf_r+0x1da>
 800823c:	ab03      	add	r3, sp, #12
 800823e:	462a      	mov	r2, r5
 8008240:	a904      	add	r1, sp, #16
 8008242:	4630      	mov	r0, r6
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4b15      	ldr	r3, [pc, #84]	; (800829c <_vfiprintf_r+0x258>)
 8008248:	e000      	b.n	800824c <_vfiprintf_r+0x208>
 800824a:	bf00      	nop
 800824c:	4607      	mov	r7, r0
 800824e:	1c78      	adds	r0, r7, #1
 8008250:	d1d6      	bne.n	8008200 <_vfiprintf_r+0x1bc>
 8008252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008254:	07d9      	lsls	r1, r3, #31
 8008256:	d405      	bmi.n	8008264 <_vfiprintf_r+0x220>
 8008258:	89ab      	ldrh	r3, [r5, #12]
 800825a:	059a      	lsls	r2, r3, #22
 800825c:	d402      	bmi.n	8008264 <_vfiprintf_r+0x220>
 800825e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008260:	f000 fc65 	bl	8008b2e <__retarget_lock_release_recursive>
 8008264:	89ab      	ldrh	r3, [r5, #12]
 8008266:	065b      	lsls	r3, r3, #25
 8008268:	f53f af12 	bmi.w	8008090 <_vfiprintf_r+0x4c>
 800826c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800826e:	e711      	b.n	8008094 <_vfiprintf_r+0x50>
 8008270:	ab03      	add	r3, sp, #12
 8008272:	462a      	mov	r2, r5
 8008274:	a904      	add	r1, sp, #16
 8008276:	4630      	mov	r0, r6
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4b08      	ldr	r3, [pc, #32]	; (800829c <_vfiprintf_r+0x258>)
 800827c:	f000 f88c 	bl	8008398 <_printf_i>
 8008280:	e7e4      	b.n	800824c <_vfiprintf_r+0x208>
 8008282:	bf00      	nop
 8008284:	08009f04 	.word	0x08009f04
 8008288:	08009f24 	.word	0x08009f24
 800828c:	08009ee4 	.word	0x08009ee4
 8008290:	08009eb0 	.word	0x08009eb0
 8008294:	08009eba 	.word	0x08009eba
 8008298:	00000000 	.word	0x00000000
 800829c:	0800801f 	.word	0x0800801f
 80082a0:	08009eb6 	.word	0x08009eb6

080082a4 <vfiprintf>:
 80082a4:	4613      	mov	r3, r2
 80082a6:	460a      	mov	r2, r1
 80082a8:	4601      	mov	r1, r0
 80082aa:	4802      	ldr	r0, [pc, #8]	; (80082b4 <vfiprintf+0x10>)
 80082ac:	6800      	ldr	r0, [r0, #0]
 80082ae:	f7ff bec9 	b.w	8008044 <_vfiprintf_r>
 80082b2:	bf00      	nop
 80082b4:	20000020 	.word	0x20000020

080082b8 <_printf_common>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	4616      	mov	r6, r2
 80082be:	4699      	mov	r9, r3
 80082c0:	688a      	ldr	r2, [r1, #8]
 80082c2:	4607      	mov	r7, r0
 80082c4:	690b      	ldr	r3, [r1, #16]
 80082c6:	460c      	mov	r4, r1
 80082c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bfb8      	it	lt
 80082d0:	4613      	movlt	r3, r2
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d8:	b10a      	cbz	r2, 80082de <_printf_common+0x26>
 80082da:	3301      	adds	r3, #1
 80082dc:	6033      	str	r3, [r6, #0]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	0699      	lsls	r1, r3, #26
 80082e2:	bf42      	ittt	mi
 80082e4:	6833      	ldrmi	r3, [r6, #0]
 80082e6:	3302      	addmi	r3, #2
 80082e8:	6033      	strmi	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	f015 0506 	ands.w	r5, r5, #6
 80082f0:	d106      	bne.n	8008300 <_printf_common+0x48>
 80082f2:	f104 0a19 	add.w	sl, r4, #25
 80082f6:	68e3      	ldr	r3, [r4, #12]
 80082f8:	6832      	ldr	r2, [r6, #0]
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	42ab      	cmp	r3, r5
 80082fe:	dc29      	bgt.n	8008354 <_printf_common+0x9c>
 8008300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008304:	1e13      	subs	r3, r2, #0
 8008306:	6822      	ldr	r2, [r4, #0]
 8008308:	bf18      	it	ne
 800830a:	2301      	movne	r3, #1
 800830c:	0692      	lsls	r2, r2, #26
 800830e:	d42e      	bmi.n	800836e <_printf_common+0xb6>
 8008310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008314:	4649      	mov	r1, r9
 8008316:	4638      	mov	r0, r7
 8008318:	47c0      	blx	r8
 800831a:	3001      	adds	r0, #1
 800831c:	d021      	beq.n	8008362 <_printf_common+0xaa>
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	341a      	adds	r4, #26
 8008322:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8008326:	f003 0306 	and.w	r3, r3, #6
 800832a:	6832      	ldr	r2, [r6, #0]
 800832c:	2600      	movs	r6, #0
 800832e:	2b04      	cmp	r3, #4
 8008330:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008334:	bf08      	it	eq
 8008336:	1aad      	subeq	r5, r5, r2
 8008338:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800833c:	bf14      	ite	ne
 800833e:	2500      	movne	r5, #0
 8008340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008344:	4293      	cmp	r3, r2
 8008346:	bfc4      	itt	gt
 8008348:	1a9b      	subgt	r3, r3, r2
 800834a:	18ed      	addgt	r5, r5, r3
 800834c:	42b5      	cmp	r5, r6
 800834e:	d11a      	bne.n	8008386 <_printf_common+0xce>
 8008350:	2000      	movs	r0, #0
 8008352:	e008      	b.n	8008366 <_printf_common+0xae>
 8008354:	2301      	movs	r3, #1
 8008356:	4652      	mov	r2, sl
 8008358:	4649      	mov	r1, r9
 800835a:	4638      	mov	r0, r7
 800835c:	47c0      	blx	r8
 800835e:	3001      	adds	r0, #1
 8008360:	d103      	bne.n	800836a <_printf_common+0xb2>
 8008362:	f04f 30ff 	mov.w	r0, #4294967295
 8008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836a:	3501      	adds	r5, #1
 800836c:	e7c3      	b.n	80082f6 <_printf_common+0x3e>
 800836e:	18e1      	adds	r1, r4, r3
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	2030      	movs	r0, #48	; 0x30
 8008374:	3302      	adds	r3, #2
 8008376:	4422      	add	r2, r4
 8008378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800837c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008384:	e7c4      	b.n	8008310 <_printf_common+0x58>
 8008386:	2301      	movs	r3, #1
 8008388:	4622      	mov	r2, r4
 800838a:	4649      	mov	r1, r9
 800838c:	4638      	mov	r0, r7
 800838e:	47c0      	blx	r8
 8008390:	3001      	adds	r0, #1
 8008392:	d0e6      	beq.n	8008362 <_printf_common+0xaa>
 8008394:	3601      	adds	r6, #1
 8008396:	e7d9      	b.n	800834c <_printf_common+0x94>

08008398 <_printf_i>:
 8008398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	7e0f      	ldrb	r7, [r1, #24]
 800839e:	4691      	mov	r9, r2
 80083a0:	4680      	mov	r8, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	2f78      	cmp	r7, #120	; 0x78
 80083a6:	469a      	mov	sl, r3
 80083a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ae:	d807      	bhi.n	80083c0 <_printf_i+0x28>
 80083b0:	2f62      	cmp	r7, #98	; 0x62
 80083b2:	d80a      	bhi.n	80083ca <_printf_i+0x32>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f000 80d8 	beq.w	800856a <_printf_i+0x1d2>
 80083ba:	2f58      	cmp	r7, #88	; 0x58
 80083bc:	f000 80a3 	beq.w	8008506 <_printf_i+0x16e>
 80083c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c8:	e03a      	b.n	8008440 <_printf_i+0xa8>
 80083ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ce:	2b15      	cmp	r3, #21
 80083d0:	d8f6      	bhi.n	80083c0 <_printf_i+0x28>
 80083d2:	a101      	add	r1, pc, #4	; (adr r1, 80083d8 <_printf_i+0x40>)
 80083d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008445 	.word	0x08008445
 80083e0:	080083c1 	.word	0x080083c1
 80083e4:	080083c1 	.word	0x080083c1
 80083e8:	080083c1 	.word	0x080083c1
 80083ec:	080083c1 	.word	0x080083c1
 80083f0:	08008445 	.word	0x08008445
 80083f4:	080083c1 	.word	0x080083c1
 80083f8:	080083c1 	.word	0x080083c1
 80083fc:	080083c1 	.word	0x080083c1
 8008400:	080083c1 	.word	0x080083c1
 8008404:	08008551 	.word	0x08008551
 8008408:	08008475 	.word	0x08008475
 800840c:	08008533 	.word	0x08008533
 8008410:	080083c1 	.word	0x080083c1
 8008414:	080083c1 	.word	0x080083c1
 8008418:	08008573 	.word	0x08008573
 800841c:	080083c1 	.word	0x080083c1
 8008420:	08008475 	.word	0x08008475
 8008424:	080083c1 	.word	0x080083c1
 8008428:	080083c1 	.word	0x080083c1
 800842c:	0800853b 	.word	0x0800853b
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800843c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008440:	2301      	movs	r3, #1
 8008442:	e0a3      	b.n	800858c <_printf_i+0x1f4>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	6829      	ldr	r1, [r5, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	f101 0304 	add.w	r3, r1, #4
 800844e:	d50a      	bpl.n	8008466 <_printf_i+0xce>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	2e00      	cmp	r6, #0
 8008456:	da03      	bge.n	8008460 <_printf_i+0xc8>
 8008458:	232d      	movs	r3, #45	; 0x2d
 800845a:	4276      	negs	r6, r6
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008460:	485e      	ldr	r0, [pc, #376]	; (80085dc <_printf_i+0x244>)
 8008462:	230a      	movs	r3, #10
 8008464:	e019      	b.n	800849a <_printf_i+0x102>
 8008466:	680e      	ldr	r6, [r1, #0]
 8008468:	f010 0f40 	tst.w	r0, #64	; 0x40
 800846c:	602b      	str	r3, [r5, #0]
 800846e:	bf18      	it	ne
 8008470:	b236      	sxthne	r6, r6
 8008472:	e7ef      	b.n	8008454 <_printf_i+0xbc>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	6029      	str	r1, [r5, #0]
 800847c:	0601      	lsls	r1, r0, #24
 800847e:	d501      	bpl.n	8008484 <_printf_i+0xec>
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0xf2>
 8008484:	0646      	lsls	r6, r0, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0xe8>
 8008488:	881e      	ldrh	r6, [r3, #0]
 800848a:	2f6f      	cmp	r7, #111	; 0x6f
 800848c:	4853      	ldr	r0, [pc, #332]	; (80085dc <_printf_i+0x244>)
 800848e:	bf0c      	ite	eq
 8008490:	2308      	moveq	r3, #8
 8008492:	230a      	movne	r3, #10
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800849a:	6865      	ldr	r5, [r4, #4]
 800849c:	2d00      	cmp	r5, #0
 800849e:	60a5      	str	r5, [r4, #8]
 80084a0:	bfa2      	ittt	ge
 80084a2:	6821      	ldrge	r1, [r4, #0]
 80084a4:	f021 0104 	bicge.w	r1, r1, #4
 80084a8:	6021      	strge	r1, [r4, #0]
 80084aa:	b90e      	cbnz	r6, 80084b0 <_printf_i+0x118>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d04d      	beq.n	800854c <_printf_i+0x1b4>
 80084b0:	4615      	mov	r5, r2
 80084b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084b6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ba:	5dc7      	ldrb	r7, [r0, r7]
 80084bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084c0:	4637      	mov	r7, r6
 80084c2:	460e      	mov	r6, r1
 80084c4:	42bb      	cmp	r3, r7
 80084c6:	d9f4      	bls.n	80084b2 <_printf_i+0x11a>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d10b      	bne.n	80084e4 <_printf_i+0x14c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	07de      	lsls	r6, r3, #31
 80084d0:	d508      	bpl.n	80084e4 <_printf_i+0x14c>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	bfde      	ittt	le
 80084da:	2330      	movle	r3, #48	; 0x30
 80084dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	6122      	str	r2, [r4, #16]
 80084e8:	464b      	mov	r3, r9
 80084ea:	aa03      	add	r2, sp, #12
 80084ec:	4621      	mov	r1, r4
 80084ee:	4640      	mov	r0, r8
 80084f0:	f8cd a000 	str.w	sl, [sp]
 80084f4:	f7ff fee0 	bl	80082b8 <_printf_common>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d14c      	bne.n	8008596 <_printf_i+0x1fe>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	4835      	ldr	r0, [pc, #212]	; (80085dc <_printf_i+0x244>)
 8008508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800850c:	6829      	ldr	r1, [r5, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f851 6b04 	ldr.w	r6, [r1], #4
 8008514:	6029      	str	r1, [r5, #0]
 8008516:	061d      	lsls	r5, r3, #24
 8008518:	d514      	bpl.n	8008544 <_printf_i+0x1ac>
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	bf44      	itt	mi
 800851e:	f043 0320 	orrmi.w	r3, r3, #32
 8008522:	6023      	strmi	r3, [r4, #0]
 8008524:	b91e      	cbnz	r6, 800852e <_printf_i+0x196>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	f023 0320 	bic.w	r3, r3, #32
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	2310      	movs	r3, #16
 8008530:	e7b0      	b.n	8008494 <_printf_i+0xfc>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f043 0320 	orr.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	2378      	movs	r3, #120	; 0x78
 800853c:	4828      	ldr	r0, [pc, #160]	; (80085e0 <_printf_i+0x248>)
 800853e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008542:	e7e3      	b.n	800850c <_printf_i+0x174>
 8008544:	0659      	lsls	r1, r3, #25
 8008546:	bf48      	it	mi
 8008548:	b2b6      	uxthmi	r6, r6
 800854a:	e7e6      	b.n	800851a <_printf_i+0x182>
 800854c:	4615      	mov	r5, r2
 800854e:	e7bb      	b.n	80084c8 <_printf_i+0x130>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	6826      	ldr	r6, [r4, #0]
 8008554:	1d18      	adds	r0, r3, #4
 8008556:	6961      	ldr	r1, [r4, #20]
 8008558:	6028      	str	r0, [r5, #0]
 800855a:	0635      	lsls	r5, r6, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	d501      	bpl.n	8008564 <_printf_i+0x1cc>
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	e002      	b.n	800856a <_printf_i+0x1d2>
 8008564:	0670      	lsls	r0, r6, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0x1c8>
 8008568:	8019      	strh	r1, [r3, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	4615      	mov	r5, r2
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	e7ba      	b.n	80084e8 <_printf_i+0x150>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	2100      	movs	r1, #0
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	602a      	str	r2, [r5, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	6862      	ldr	r2, [r4, #4]
 800857e:	4628      	mov	r0, r5
 8008580:	f000 fb3c 	bl	8008bfc <memchr>
 8008584:	b108      	cbz	r0, 800858a <_printf_i+0x1f2>
 8008586:	1b40      	subs	r0, r0, r5
 8008588:	6060      	str	r0, [r4, #4]
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008594:	e7a8      	b.n	80084e8 <_printf_i+0x150>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	462a      	mov	r2, r5
 800859a:	4649      	mov	r1, r9
 800859c:	4640      	mov	r0, r8
 800859e:	47d0      	blx	sl
 80085a0:	3001      	adds	r0, #1
 80085a2:	d0ab      	beq.n	80084fc <_printf_i+0x164>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	079b      	lsls	r3, r3, #30
 80085a8:	d413      	bmi.n	80085d2 <_printf_i+0x23a>
 80085aa:	68e0      	ldr	r0, [r4, #12]
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	4298      	cmp	r0, r3
 80085b0:	bfb8      	it	lt
 80085b2:	4618      	movlt	r0, r3
 80085b4:	e7a4      	b.n	8008500 <_printf_i+0x168>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4632      	mov	r2, r6
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	47d0      	blx	sl
 80085c0:	3001      	adds	r0, #1
 80085c2:	d09b      	beq.n	80084fc <_printf_i+0x164>
 80085c4:	3501      	adds	r5, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	9903      	ldr	r1, [sp, #12]
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	42ab      	cmp	r3, r5
 80085ce:	dcf2      	bgt.n	80085b6 <_printf_i+0x21e>
 80085d0:	e7eb      	b.n	80085aa <_printf_i+0x212>
 80085d2:	2500      	movs	r5, #0
 80085d4:	f104 0619 	add.w	r6, r4, #25
 80085d8:	e7f5      	b.n	80085c6 <_printf_i+0x22e>
 80085da:	bf00      	nop
 80085dc:	08009ec1 	.word	0x08009ec1
 80085e0:	08009ed2 	.word	0x08009ed2

080085e4 <iprintf>:
 80085e4:	b40f      	push	{r0, r1, r2, r3}
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <iprintf+0x2c>)
 80085e8:	b513      	push	{r0, r1, r4, lr}
 80085ea:	681c      	ldr	r4, [r3, #0]
 80085ec:	b124      	cbz	r4, 80085f8 <iprintf+0x14>
 80085ee:	69a3      	ldr	r3, [r4, #24]
 80085f0:	b913      	cbnz	r3, 80085f8 <iprintf+0x14>
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f9fc 	bl	80089f0 <__sinit>
 80085f8:	ab05      	add	r3, sp, #20
 80085fa:	9a04      	ldr	r2, [sp, #16]
 80085fc:	68a1      	ldr	r1, [r4, #8]
 80085fe:	4620      	mov	r0, r4
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	f7ff fd1f 	bl	8008044 <_vfiprintf_r>
 8008606:	b002      	add	sp, #8
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	b004      	add	sp, #16
 800860e:	4770      	bx	lr
 8008610:	20000020 	.word	0x20000020

08008614 <putchar>:
 8008614:	4b09      	ldr	r3, [pc, #36]	; (800863c <putchar+0x28>)
 8008616:	b513      	push	{r0, r1, r4, lr}
 8008618:	681c      	ldr	r4, [r3, #0]
 800861a:	4601      	mov	r1, r0
 800861c:	b134      	cbz	r4, 800862c <putchar+0x18>
 800861e:	69a3      	ldr	r3, [r4, #24]
 8008620:	b923      	cbnz	r3, 800862c <putchar+0x18>
 8008622:	9001      	str	r0, [sp, #4]
 8008624:	4620      	mov	r0, r4
 8008626:	f000 f9e3 	bl	80089f0 <__sinit>
 800862a:	9901      	ldr	r1, [sp, #4]
 800862c:	68a2      	ldr	r2, [r4, #8]
 800862e:	4620      	mov	r0, r4
 8008630:	b002      	add	sp, #8
 8008632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008636:	f000 bbcf 	b.w	8008dd8 <_putc_r>
 800863a:	bf00      	nop
 800863c:	20000020 	.word	0x20000020

08008640 <__swbuf_r>:
 8008640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008642:	460e      	mov	r6, r1
 8008644:	4614      	mov	r4, r2
 8008646:	4605      	mov	r5, r0
 8008648:	b118      	cbz	r0, 8008652 <__swbuf_r+0x12>
 800864a:	6983      	ldr	r3, [r0, #24]
 800864c:	b90b      	cbnz	r3, 8008652 <__swbuf_r+0x12>
 800864e:	f000 f9cf 	bl	80089f0 <__sinit>
 8008652:	4b21      	ldr	r3, [pc, #132]	; (80086d8 <__swbuf_r+0x98>)
 8008654:	429c      	cmp	r4, r3
 8008656:	d12b      	bne.n	80086b0 <__swbuf_r+0x70>
 8008658:	686c      	ldr	r4, [r5, #4]
 800865a:	69a3      	ldr	r3, [r4, #24]
 800865c:	60a3      	str	r3, [r4, #8]
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	071a      	lsls	r2, r3, #28
 8008662:	d52f      	bpl.n	80086c4 <__swbuf_r+0x84>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	b36b      	cbz	r3, 80086c4 <__swbuf_r+0x84>
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	b2f6      	uxtb	r6, r6
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	4637      	mov	r7, r6
 8008670:	1ac0      	subs	r0, r0, r3
 8008672:	6963      	ldr	r3, [r4, #20]
 8008674:	4283      	cmp	r3, r0
 8008676:	dc04      	bgt.n	8008682 <__swbuf_r+0x42>
 8008678:	4621      	mov	r1, r4
 800867a:	4628      	mov	r0, r5
 800867c:	f000 f924 	bl	80088c8 <_fflush_r>
 8008680:	bb30      	cbnz	r0, 80086d0 <__swbuf_r+0x90>
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	3001      	adds	r0, #1
 8008686:	3b01      	subs	r3, #1
 8008688:	60a3      	str	r3, [r4, #8]
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	701e      	strb	r6, [r3, #0]
 8008692:	6963      	ldr	r3, [r4, #20]
 8008694:	4283      	cmp	r3, r0
 8008696:	d004      	beq.n	80086a2 <__swbuf_r+0x62>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	07db      	lsls	r3, r3, #31
 800869c:	d506      	bpl.n	80086ac <__swbuf_r+0x6c>
 800869e:	2e0a      	cmp	r6, #10
 80086a0:	d104      	bne.n	80086ac <__swbuf_r+0x6c>
 80086a2:	4621      	mov	r1, r4
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f90f 	bl	80088c8 <_fflush_r>
 80086aa:	b988      	cbnz	r0, 80086d0 <__swbuf_r+0x90>
 80086ac:	4638      	mov	r0, r7
 80086ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086b0:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <__swbuf_r+0x9c>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d101      	bne.n	80086ba <__swbuf_r+0x7a>
 80086b6:	68ac      	ldr	r4, [r5, #8]
 80086b8:	e7cf      	b.n	800865a <__swbuf_r+0x1a>
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <__swbuf_r+0xa0>)
 80086bc:	429c      	cmp	r4, r3
 80086be:	bf08      	it	eq
 80086c0:	68ec      	ldreq	r4, [r5, #12]
 80086c2:	e7ca      	b.n	800865a <__swbuf_r+0x1a>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 f80c 	bl	80086e4 <__swsetup_r>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d0cb      	beq.n	8008668 <__swbuf_r+0x28>
 80086d0:	f04f 37ff 	mov.w	r7, #4294967295
 80086d4:	e7ea      	b.n	80086ac <__swbuf_r+0x6c>
 80086d6:	bf00      	nop
 80086d8:	08009f04 	.word	0x08009f04
 80086dc:	08009f24 	.word	0x08009f24
 80086e0:	08009ee4 	.word	0x08009ee4

080086e4 <__swsetup_r>:
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <__swsetup_r+0xcc>)
 80086e6:	b570      	push	{r4, r5, r6, lr}
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	4606      	mov	r6, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	b125      	cbz	r5, 80086fa <__swsetup_r+0x16>
 80086f0:	69ab      	ldr	r3, [r5, #24]
 80086f2:	b913      	cbnz	r3, 80086fa <__swsetup_r+0x16>
 80086f4:	4628      	mov	r0, r5
 80086f6:	f000 f97b 	bl	80089f0 <__sinit>
 80086fa:	4b2e      	ldr	r3, [pc, #184]	; (80087b4 <__swsetup_r+0xd0>)
 80086fc:	429c      	cmp	r4, r3
 80086fe:	d10f      	bne.n	8008720 <__swsetup_r+0x3c>
 8008700:	686c      	ldr	r4, [r5, #4]
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008708:	0719      	lsls	r1, r3, #28
 800870a:	d42c      	bmi.n	8008766 <__swsetup_r+0x82>
 800870c:	06dd      	lsls	r5, r3, #27
 800870e:	d411      	bmi.n	8008734 <__swsetup_r+0x50>
 8008710:	2309      	movs	r3, #9
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	e03e      	b.n	800879e <__swsetup_r+0xba>
 8008720:	4b25      	ldr	r3, [pc, #148]	; (80087b8 <__swsetup_r+0xd4>)
 8008722:	429c      	cmp	r4, r3
 8008724:	d101      	bne.n	800872a <__swsetup_r+0x46>
 8008726:	68ac      	ldr	r4, [r5, #8]
 8008728:	e7eb      	b.n	8008702 <__swsetup_r+0x1e>
 800872a:	4b24      	ldr	r3, [pc, #144]	; (80087bc <__swsetup_r+0xd8>)
 800872c:	429c      	cmp	r4, r3
 800872e:	bf08      	it	eq
 8008730:	68ec      	ldreq	r4, [r5, #12]
 8008732:	e7e6      	b.n	8008702 <__swsetup_r+0x1e>
 8008734:	0758      	lsls	r0, r3, #29
 8008736:	d512      	bpl.n	800875e <__swsetup_r+0x7a>
 8008738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800873a:	b141      	cbz	r1, 800874e <__swsetup_r+0x6a>
 800873c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008740:	4299      	cmp	r1, r3
 8008742:	d002      	beq.n	800874a <__swsetup_r+0x66>
 8008744:	4630      	mov	r0, r6
 8008746:	f000 fa67 	bl	8008c18 <_free_r>
 800874a:	2300      	movs	r3, #0
 800874c:	6363      	str	r3, [r4, #52]	; 0x34
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	2300      	movs	r3, #0
 8008758:	6063      	str	r3, [r4, #4]
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f043 0308 	orr.w	r3, r3, #8
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	b94b      	cbnz	r3, 800877e <__swsetup_r+0x9a>
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008774:	d003      	beq.n	800877e <__swsetup_r+0x9a>
 8008776:	4621      	mov	r1, r4
 8008778:	4630      	mov	r0, r6
 800877a:	f000 f9ff 	bl	8008b7c <__smakebuf_r>
 800877e:	89a0      	ldrh	r0, [r4, #12]
 8008780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008784:	f010 0301 	ands.w	r3, r0, #1
 8008788:	d00a      	beq.n	80087a0 <__swsetup_r+0xbc>
 800878a:	2300      	movs	r3, #0
 800878c:	60a3      	str	r3, [r4, #8]
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	425b      	negs	r3, r3
 8008792:	61a3      	str	r3, [r4, #24]
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	b943      	cbnz	r3, 80087aa <__swsetup_r+0xc6>
 8008798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800879c:	d1ba      	bne.n	8008714 <__swsetup_r+0x30>
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	0781      	lsls	r1, r0, #30
 80087a2:	bf58      	it	pl
 80087a4:	6963      	ldrpl	r3, [r4, #20]
 80087a6:	60a3      	str	r3, [r4, #8]
 80087a8:	e7f4      	b.n	8008794 <__swsetup_r+0xb0>
 80087aa:	2000      	movs	r0, #0
 80087ac:	e7f7      	b.n	800879e <__swsetup_r+0xba>
 80087ae:	bf00      	nop
 80087b0:	20000020 	.word	0x20000020
 80087b4:	08009f04 	.word	0x08009f04
 80087b8:	08009f24 	.word	0x08009f24
 80087bc:	08009ee4 	.word	0x08009ee4

080087c0 <__sflush_r>:
 80087c0:	898a      	ldrh	r2, [r1, #12]
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	4605      	mov	r5, r0
 80087c8:	0710      	lsls	r0, r2, #28
 80087ca:	460c      	mov	r4, r1
 80087cc:	d458      	bmi.n	8008880 <__sflush_r+0xc0>
 80087ce:	684b      	ldr	r3, [r1, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc05      	bgt.n	80087e0 <__sflush_r+0x20>
 80087d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dc02      	bgt.n	80087e0 <__sflush_r+0x20>
 80087da:	2000      	movs	r0, #0
 80087dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	d0f9      	beq.n	80087da <__sflush_r+0x1a>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087ec:	682f      	ldr	r7, [r5, #0]
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	d032      	beq.n	8008858 <__sflush_r+0x98>
 80087f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	075a      	lsls	r2, r3, #29
 80087f8:	d505      	bpl.n	8008806 <__sflush_r+0x46>
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	1ac0      	subs	r0, r0, r3
 80087fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008800:	b10b      	cbz	r3, 8008806 <__sflush_r+0x46>
 8008802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008804:	1ac0      	subs	r0, r0, r3
 8008806:	2300      	movs	r3, #0
 8008808:	4602      	mov	r2, r0
 800880a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800880c:	4628      	mov	r0, r5
 800880e:	6a21      	ldr	r1, [r4, #32]
 8008810:	47b0      	blx	r6
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	d106      	bne.n	8008826 <__sflush_r+0x66>
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	291d      	cmp	r1, #29
 800881c:	d82c      	bhi.n	8008878 <__sflush_r+0xb8>
 800881e:	4a29      	ldr	r2, [pc, #164]	; (80088c4 <__sflush_r+0x104>)
 8008820:	40ca      	lsrs	r2, r1
 8008822:	07d6      	lsls	r6, r2, #31
 8008824:	d528      	bpl.n	8008878 <__sflush_r+0xb8>
 8008826:	2200      	movs	r2, #0
 8008828:	04d9      	lsls	r1, r3, #19
 800882a:	6062      	str	r2, [r4, #4]
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	d504      	bpl.n	800883c <__sflush_r+0x7c>
 8008832:	1c42      	adds	r2, r0, #1
 8008834:	d101      	bne.n	800883a <__sflush_r+0x7a>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	b903      	cbnz	r3, 800883c <__sflush_r+0x7c>
 800883a:	6560      	str	r0, [r4, #84]	; 0x54
 800883c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883e:	602f      	str	r7, [r5, #0]
 8008840:	2900      	cmp	r1, #0
 8008842:	d0ca      	beq.n	80087da <__sflush_r+0x1a>
 8008844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__sflush_r+0x92>
 800884c:	4628      	mov	r0, r5
 800884e:	f000 f9e3 	bl	8008c18 <_free_r>
 8008852:	2000      	movs	r0, #0
 8008854:	6360      	str	r0, [r4, #52]	; 0x34
 8008856:	e7c1      	b.n	80087dc <__sflush_r+0x1c>
 8008858:	6a21      	ldr	r1, [r4, #32]
 800885a:	2301      	movs	r3, #1
 800885c:	4628      	mov	r0, r5
 800885e:	47b0      	blx	r6
 8008860:	1c41      	adds	r1, r0, #1
 8008862:	d1c7      	bne.n	80087f4 <__sflush_r+0x34>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d0c4      	beq.n	80087f4 <__sflush_r+0x34>
 800886a:	2b1d      	cmp	r3, #29
 800886c:	d001      	beq.n	8008872 <__sflush_r+0xb2>
 800886e:	2b16      	cmp	r3, #22
 8008870:	d101      	bne.n	8008876 <__sflush_r+0xb6>
 8008872:	602f      	str	r7, [r5, #0]
 8008874:	e7b1      	b.n	80087da <__sflush_r+0x1a>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887c:	81a3      	strh	r3, [r4, #12]
 800887e:	e7ad      	b.n	80087dc <__sflush_r+0x1c>
 8008880:	690f      	ldr	r7, [r1, #16]
 8008882:	2f00      	cmp	r7, #0
 8008884:	d0a9      	beq.n	80087da <__sflush_r+0x1a>
 8008886:	0793      	lsls	r3, r2, #30
 8008888:	680e      	ldr	r6, [r1, #0]
 800888a:	600f      	str	r7, [r1, #0]
 800888c:	bf0c      	ite	eq
 800888e:	694b      	ldreq	r3, [r1, #20]
 8008890:	2300      	movne	r3, #0
 8008892:	eba6 0807 	sub.w	r8, r6, r7
 8008896:	608b      	str	r3, [r1, #8]
 8008898:	f1b8 0f00 	cmp.w	r8, #0
 800889c:	dd9d      	ble.n	80087da <__sflush_r+0x1a>
 800889e:	4643      	mov	r3, r8
 80088a0:	463a      	mov	r2, r7
 80088a2:	6a21      	ldr	r1, [r4, #32]
 80088a4:	4628      	mov	r0, r5
 80088a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088a8:	47b0      	blx	r6
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dc06      	bgt.n	80088bc <__sflush_r+0xfc>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	e78f      	b.n	80087dc <__sflush_r+0x1c>
 80088bc:	4407      	add	r7, r0
 80088be:	eba8 0800 	sub.w	r8, r8, r0
 80088c2:	e7e9      	b.n	8008898 <__sflush_r+0xd8>
 80088c4:	20400001 	.word	0x20400001

080088c8 <_fflush_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	690b      	ldr	r3, [r1, #16]
 80088cc:	4605      	mov	r5, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	b913      	cbnz	r3, 80088d8 <_fflush_r+0x10>
 80088d2:	2500      	movs	r5, #0
 80088d4:	4628      	mov	r0, r5
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	b118      	cbz	r0, 80088e2 <_fflush_r+0x1a>
 80088da:	6983      	ldr	r3, [r0, #24]
 80088dc:	b90b      	cbnz	r3, 80088e2 <_fflush_r+0x1a>
 80088de:	f000 f887 	bl	80089f0 <__sinit>
 80088e2:	4b14      	ldr	r3, [pc, #80]	; (8008934 <_fflush_r+0x6c>)
 80088e4:	429c      	cmp	r4, r3
 80088e6:	d11b      	bne.n	8008920 <_fflush_r+0x58>
 80088e8:	686c      	ldr	r4, [r5, #4]
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0ef      	beq.n	80088d2 <_fflush_r+0xa>
 80088f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f4:	07d0      	lsls	r0, r2, #31
 80088f6:	d404      	bmi.n	8008902 <_fflush_r+0x3a>
 80088f8:	0599      	lsls	r1, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_fflush_r+0x3a>
 80088fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fe:	f000 f915 	bl	8008b2c <__retarget_lock_acquire_recursive>
 8008902:	4628      	mov	r0, r5
 8008904:	4621      	mov	r1, r4
 8008906:	f7ff ff5b 	bl	80087c0 <__sflush_r>
 800890a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890c:	4605      	mov	r5, r0
 800890e:	07da      	lsls	r2, r3, #31
 8008910:	d4e0      	bmi.n	80088d4 <_fflush_r+0xc>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	059b      	lsls	r3, r3, #22
 8008916:	d4dd      	bmi.n	80088d4 <_fflush_r+0xc>
 8008918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891a:	f000 f908 	bl	8008b2e <__retarget_lock_release_recursive>
 800891e:	e7d9      	b.n	80088d4 <_fflush_r+0xc>
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <_fflush_r+0x70>)
 8008922:	429c      	cmp	r4, r3
 8008924:	d101      	bne.n	800892a <_fflush_r+0x62>
 8008926:	68ac      	ldr	r4, [r5, #8]
 8008928:	e7df      	b.n	80088ea <_fflush_r+0x22>
 800892a:	4b04      	ldr	r3, [pc, #16]	; (800893c <_fflush_r+0x74>)
 800892c:	429c      	cmp	r4, r3
 800892e:	bf08      	it	eq
 8008930:	68ec      	ldreq	r4, [r5, #12]
 8008932:	e7da      	b.n	80088ea <_fflush_r+0x22>
 8008934:	08009f04 	.word	0x08009f04
 8008938:	08009f24 	.word	0x08009f24
 800893c:	08009ee4 	.word	0x08009ee4

08008940 <std>:
 8008940:	2300      	movs	r3, #0
 8008942:	b510      	push	{r4, lr}
 8008944:	4604      	mov	r4, r0
 8008946:	6083      	str	r3, [r0, #8]
 8008948:	8181      	strh	r1, [r0, #12]
 800894a:	4619      	mov	r1, r3
 800894c:	6643      	str	r3, [r0, #100]	; 0x64
 800894e:	81c2      	strh	r2, [r0, #14]
 8008950:	2208      	movs	r2, #8
 8008952:	6183      	str	r3, [r0, #24]
 8008954:	e9c0 3300 	strd	r3, r3, [r0]
 8008958:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800895c:	305c      	adds	r0, #92	; 0x5c
 800895e:	f7ff fb3f 	bl	8007fe0 <memset>
 8008962:	4b05      	ldr	r3, [pc, #20]	; (8008978 <std+0x38>)
 8008964:	6224      	str	r4, [r4, #32]
 8008966:	6263      	str	r3, [r4, #36]	; 0x24
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <std+0x3c>)
 800896a:	62a3      	str	r3, [r4, #40]	; 0x28
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <std+0x40>)
 800896e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <std+0x44>)
 8008972:	6323      	str	r3, [r4, #48]	; 0x30
 8008974:	bd10      	pop	{r4, pc}
 8008976:	bf00      	nop
 8008978:	08008e89 	.word	0x08008e89
 800897c:	08008eab 	.word	0x08008eab
 8008980:	08008ee3 	.word	0x08008ee3
 8008984:	08008f07 	.word	0x08008f07

08008988 <_cleanup_r>:
 8008988:	4901      	ldr	r1, [pc, #4]	; (8008990 <_cleanup_r+0x8>)
 800898a:	f000 b8af 	b.w	8008aec <_fwalk_reent>
 800898e:	bf00      	nop
 8008990:	080088c9 	.word	0x080088c9

08008994 <__sfmoreglue>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	2268      	movs	r2, #104	; 0x68
 8008998:	1e4d      	subs	r5, r1, #1
 800899a:	460e      	mov	r6, r1
 800899c:	4355      	muls	r5, r2
 800899e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089a2:	f000 f9a5 	bl	8008cf0 <_malloc_r>
 80089a6:	4604      	mov	r4, r0
 80089a8:	b140      	cbz	r0, 80089bc <__sfmoreglue+0x28>
 80089aa:	2100      	movs	r1, #0
 80089ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089b0:	e9c0 1600 	strd	r1, r6, [r0]
 80089b4:	300c      	adds	r0, #12
 80089b6:	60a0      	str	r0, [r4, #8]
 80089b8:	f7ff fb12 	bl	8007fe0 <memset>
 80089bc:	4620      	mov	r0, r4
 80089be:	bd70      	pop	{r4, r5, r6, pc}

080089c0 <__sfp_lock_acquire>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sfp_lock_acquire+0x8>)
 80089c2:	f000 b8b3 	b.w	8008b2c <__retarget_lock_acquire_recursive>
 80089c6:	bf00      	nop
 80089c8:	2000ec11 	.word	0x2000ec11

080089cc <__sfp_lock_release>:
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <__sfp_lock_release+0x8>)
 80089ce:	f000 b8ae 	b.w	8008b2e <__retarget_lock_release_recursive>
 80089d2:	bf00      	nop
 80089d4:	2000ec11 	.word	0x2000ec11

080089d8 <__sinit_lock_acquire>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__sinit_lock_acquire+0x8>)
 80089da:	f000 b8a7 	b.w	8008b2c <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	2000ec12 	.word	0x2000ec12

080089e4 <__sinit_lock_release>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__sinit_lock_release+0x8>)
 80089e6:	f000 b8a2 	b.w	8008b2e <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	2000ec12 	.word	0x2000ec12

080089f0 <__sinit>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4604      	mov	r4, r0
 80089f4:	f7ff fff0 	bl	80089d8 <__sinit_lock_acquire>
 80089f8:	69a3      	ldr	r3, [r4, #24]
 80089fa:	b11b      	cbz	r3, 8008a04 <__sinit+0x14>
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f7ff bff0 	b.w	80089e4 <__sinit_lock_release>
 8008a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a08:	6523      	str	r3, [r4, #80]	; 0x50
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <__sinit+0x68>)
 8008a0e:	4a13      	ldr	r2, [pc, #76]	; (8008a5c <__sinit+0x6c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	bf04      	itt	eq
 8008a18:	2301      	moveq	r3, #1
 8008a1a:	61a3      	streq	r3, [r4, #24]
 8008a1c:	f000 f820 	bl	8008a60 <__sfp>
 8008a20:	6060      	str	r0, [r4, #4]
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 f81c 	bl	8008a60 <__sfp>
 8008a28:	60a0      	str	r0, [r4, #8]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 f818 	bl	8008a60 <__sfp>
 8008a30:	2200      	movs	r2, #0
 8008a32:	2104      	movs	r1, #4
 8008a34:	60e0      	str	r0, [r4, #12]
 8008a36:	6860      	ldr	r0, [r4, #4]
 8008a38:	f7ff ff82 	bl	8008940 <std>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	2109      	movs	r1, #9
 8008a40:	68a0      	ldr	r0, [r4, #8]
 8008a42:	f7ff ff7d 	bl	8008940 <std>
 8008a46:	2202      	movs	r2, #2
 8008a48:	2112      	movs	r1, #18
 8008a4a:	68e0      	ldr	r0, [r4, #12]
 8008a4c:	f7ff ff78 	bl	8008940 <std>
 8008a50:	2301      	movs	r3, #1
 8008a52:	61a3      	str	r3, [r4, #24]
 8008a54:	e7d2      	b.n	80089fc <__sinit+0xc>
 8008a56:	bf00      	nop
 8008a58:	08009eac 	.word	0x08009eac
 8008a5c:	08008989 	.word	0x08008989

08008a60 <__sfp>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	4607      	mov	r7, r0
 8008a64:	f7ff ffac 	bl	80089c0 <__sfp_lock_acquire>
 8008a68:	4b1e      	ldr	r3, [pc, #120]	; (8008ae4 <__sfp+0x84>)
 8008a6a:	681e      	ldr	r6, [r3, #0]
 8008a6c:	69b3      	ldr	r3, [r6, #24]
 8008a6e:	b913      	cbnz	r3, 8008a76 <__sfp+0x16>
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff ffbd 	bl	80089f0 <__sinit>
 8008a76:	3648      	adds	r6, #72	; 0x48
 8008a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	d503      	bpl.n	8008a88 <__sfp+0x28>
 8008a80:	6833      	ldr	r3, [r6, #0]
 8008a82:	b30b      	cbz	r3, 8008ac8 <__sfp+0x68>
 8008a84:	6836      	ldr	r6, [r6, #0]
 8008a86:	e7f7      	b.n	8008a78 <__sfp+0x18>
 8008a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a8c:	b9d5      	cbnz	r5, 8008ac4 <__sfp+0x64>
 8008a8e:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <__sfp+0x88>)
 8008a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a94:	6665      	str	r5, [r4, #100]	; 0x64
 8008a96:	60e3      	str	r3, [r4, #12]
 8008a98:	f000 f847 	bl	8008b2a <__retarget_lock_init_recursive>
 8008a9c:	f7ff ff96 	bl	80089cc <__sfp_lock_release>
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008aa8:	6025      	str	r5, [r4, #0]
 8008aaa:	61a5      	str	r5, [r4, #24]
 8008aac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ab4:	f7ff fa94 	bl	8007fe0 <memset>
 8008ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac4:	3468      	adds	r4, #104	; 0x68
 8008ac6:	e7d9      	b.n	8008a7c <__sfp+0x1c>
 8008ac8:	2104      	movs	r1, #4
 8008aca:	4638      	mov	r0, r7
 8008acc:	f7ff ff62 	bl	8008994 <__sfmoreglue>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	6030      	str	r0, [r6, #0]
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1d5      	bne.n	8008a84 <__sfp+0x24>
 8008ad8:	f7ff ff78 	bl	80089cc <__sfp_lock_release>
 8008adc:	230c      	movs	r3, #12
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	e7ee      	b.n	8008ac0 <__sfp+0x60>
 8008ae2:	bf00      	nop
 8008ae4:	08009eac 	.word	0x08009eac
 8008ae8:	ffff0001 	.word	0xffff0001

08008aec <_fwalk_reent>:
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	4606      	mov	r6, r0
 8008af2:	4688      	mov	r8, r1
 8008af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008af8:	2700      	movs	r7, #0
 8008afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008afe:	f1b9 0901 	subs.w	r9, r9, #1
 8008b02:	d505      	bpl.n	8008b10 <_fwalk_reent+0x24>
 8008b04:	6824      	ldr	r4, [r4, #0]
 8008b06:	2c00      	cmp	r4, #0
 8008b08:	d1f7      	bne.n	8008afa <_fwalk_reent+0xe>
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b10:	89ab      	ldrh	r3, [r5, #12]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d907      	bls.n	8008b26 <_fwalk_reent+0x3a>
 8008b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	d003      	beq.n	8008b26 <_fwalk_reent+0x3a>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4630      	mov	r0, r6
 8008b22:	47c0      	blx	r8
 8008b24:	4307      	orrs	r7, r0
 8008b26:	3568      	adds	r5, #104	; 0x68
 8008b28:	e7e9      	b.n	8008afe <_fwalk_reent+0x12>

08008b2a <__retarget_lock_init_recursive>:
 8008b2a:	4770      	bx	lr

08008b2c <__retarget_lock_acquire_recursive>:
 8008b2c:	4770      	bx	lr

08008b2e <__retarget_lock_release_recursive>:
 8008b2e:	4770      	bx	lr

08008b30 <__swhatbuf_r>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	460e      	mov	r6, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	b096      	sub	sp, #88	; 0x58
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	461d      	mov	r5, r3
 8008b40:	da08      	bge.n	8008b54 <__swhatbuf_r+0x24>
 8008b42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	d410      	bmi.n	8008b70 <__swhatbuf_r+0x40>
 8008b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b52:	e00e      	b.n	8008b72 <__swhatbuf_r+0x42>
 8008b54:	466a      	mov	r2, sp
 8008b56:	f000 f9fd 	bl	8008f54 <_fstat_r>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	dbf1      	blt.n	8008b42 <__swhatbuf_r+0x12>
 8008b5e:	9a01      	ldr	r2, [sp, #4]
 8008b60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b68:	425a      	negs	r2, r3
 8008b6a:	415a      	adcs	r2, r3
 8008b6c:	602a      	str	r2, [r5, #0]
 8008b6e:	e7ee      	b.n	8008b4e <__swhatbuf_r+0x1e>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	2000      	movs	r0, #0
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	b016      	add	sp, #88	; 0x58
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b7c <__smakebuf_r>:
 8008b7c:	898b      	ldrh	r3, [r1, #12]
 8008b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b80:	079d      	lsls	r5, r3, #30
 8008b82:	4606      	mov	r6, r0
 8008b84:	460c      	mov	r4, r1
 8008b86:	d507      	bpl.n	8008b98 <__smakebuf_r+0x1c>
 8008b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	6123      	str	r3, [r4, #16]
 8008b90:	2301      	movs	r3, #1
 8008b92:	6163      	str	r3, [r4, #20]
 8008b94:	b002      	add	sp, #8
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	ab01      	add	r3, sp, #4
 8008b9a:	466a      	mov	r2, sp
 8008b9c:	f7ff ffc8 	bl	8008b30 <__swhatbuf_r>
 8008ba0:	9900      	ldr	r1, [sp, #0]
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 f8a3 	bl	8008cf0 <_malloc_r>
 8008baa:	b948      	cbnz	r0, 8008bc0 <__smakebuf_r+0x44>
 8008bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb0:	059a      	lsls	r2, r3, #22
 8008bb2:	d4ef      	bmi.n	8008b94 <__smakebuf_r+0x18>
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	e7e3      	b.n	8008b88 <__smakebuf_r+0xc>
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <__smakebuf_r+0x7c>)
 8008bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	6020      	str	r0, [r4, #0]
 8008bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bcc:	6120      	str	r0, [r4, #16]
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	6163      	str	r3, [r4, #20]
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	b15b      	cbz	r3, 8008bf0 <__smakebuf_r+0x74>
 8008bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 f9cb 	bl	8008f78 <_isatty_r>
 8008be2:	b128      	cbz	r0, 8008bf0 <__smakebuf_r+0x74>
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	f043 0301 	orr.w	r3, r3, #1
 8008bee:	81a3      	strh	r3, [r4, #12]
 8008bf0:	89a0      	ldrh	r0, [r4, #12]
 8008bf2:	4305      	orrs	r5, r0
 8008bf4:	81a5      	strh	r5, [r4, #12]
 8008bf6:	e7cd      	b.n	8008b94 <__smakebuf_r+0x18>
 8008bf8:	08008989 	.word	0x08008989

08008bfc <memchr>:
 8008bfc:	b2c9      	uxtb	r1, r1
 8008bfe:	4402      	add	r2, r0
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4290      	cmp	r0, r2
 8008c04:	4603      	mov	r3, r0
 8008c06:	d101      	bne.n	8008c0c <memchr+0x10>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e003      	b.n	8008c14 <memchr+0x18>
 8008c0c:	781c      	ldrb	r4, [r3, #0]
 8008c0e:	3001      	adds	r0, #1
 8008c10:	428c      	cmp	r4, r1
 8008c12:	d1f6      	bne.n	8008c02 <memchr+0x6>
 8008c14:	4618      	mov	r0, r3
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <_free_r>:
 8008c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c1a:	2900      	cmp	r1, #0
 8008c1c:	d043      	beq.n	8008ca6 <_free_r+0x8e>
 8008c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c22:	1f0c      	subs	r4, r1, #4
 8008c24:	9001      	str	r0, [sp, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfb8      	it	lt
 8008c2a:	18e4      	addlt	r4, r4, r3
 8008c2c:	f000 f9c6 	bl	8008fbc <__malloc_lock>
 8008c30:	4a1e      	ldr	r2, [pc, #120]	; (8008cac <_free_r+0x94>)
 8008c32:	9801      	ldr	r0, [sp, #4]
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	b933      	cbnz	r3, 8008c46 <_free_r+0x2e>
 8008c38:	6063      	str	r3, [r4, #4]
 8008c3a:	6014      	str	r4, [r2, #0]
 8008c3c:	b003      	add	sp, #12
 8008c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c42:	f000 b9c1 	b.w	8008fc8 <__malloc_unlock>
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	d908      	bls.n	8008c5c <_free_r+0x44>
 8008c4a:	6825      	ldr	r5, [r4, #0]
 8008c4c:	1961      	adds	r1, r4, r5
 8008c4e:	428b      	cmp	r3, r1
 8008c50:	bf01      	itttt	eq
 8008c52:	6819      	ldreq	r1, [r3, #0]
 8008c54:	685b      	ldreq	r3, [r3, #4]
 8008c56:	1949      	addeq	r1, r1, r5
 8008c58:	6021      	streq	r1, [r4, #0]
 8008c5a:	e7ed      	b.n	8008c38 <_free_r+0x20>
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	b10b      	cbz	r3, 8008c66 <_free_r+0x4e>
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	d9fa      	bls.n	8008c5c <_free_r+0x44>
 8008c66:	6811      	ldr	r1, [r2, #0]
 8008c68:	1855      	adds	r5, r2, r1
 8008c6a:	42a5      	cmp	r5, r4
 8008c6c:	d10b      	bne.n	8008c86 <_free_r+0x6e>
 8008c6e:	6824      	ldr	r4, [r4, #0]
 8008c70:	4421      	add	r1, r4
 8008c72:	1854      	adds	r4, r2, r1
 8008c74:	6011      	str	r1, [r2, #0]
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d1e0      	bne.n	8008c3c <_free_r+0x24>
 8008c7a:	681c      	ldr	r4, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4421      	add	r1, r4
 8008c80:	6053      	str	r3, [r2, #4]
 8008c82:	6011      	str	r1, [r2, #0]
 8008c84:	e7da      	b.n	8008c3c <_free_r+0x24>
 8008c86:	d902      	bls.n	8008c8e <_free_r+0x76>
 8008c88:	230c      	movs	r3, #12
 8008c8a:	6003      	str	r3, [r0, #0]
 8008c8c:	e7d6      	b.n	8008c3c <_free_r+0x24>
 8008c8e:	6825      	ldr	r5, [r4, #0]
 8008c90:	1961      	adds	r1, r4, r5
 8008c92:	428b      	cmp	r3, r1
 8008c94:	bf02      	ittt	eq
 8008c96:	6819      	ldreq	r1, [r3, #0]
 8008c98:	685b      	ldreq	r3, [r3, #4]
 8008c9a:	1949      	addeq	r1, r1, r5
 8008c9c:	6063      	str	r3, [r4, #4]
 8008c9e:	bf08      	it	eq
 8008ca0:	6021      	streq	r1, [r4, #0]
 8008ca2:	6054      	str	r4, [r2, #4]
 8008ca4:	e7ca      	b.n	8008c3c <_free_r+0x24>
 8008ca6:	b003      	add	sp, #12
 8008ca8:	bd30      	pop	{r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	2000ec14 	.word	0x2000ec14

08008cb0 <sbrk_aligned>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4e0e      	ldr	r6, [pc, #56]	; (8008cec <sbrk_aligned+0x3c>)
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	6831      	ldr	r1, [r6, #0]
 8008cba:	b911      	cbnz	r1, 8008cc2 <sbrk_aligned+0x12>
 8008cbc:	f000 f8d4 	bl	8008e68 <_sbrk_r>
 8008cc0:	6030      	str	r0, [r6, #0]
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 f8cf 	bl	8008e68 <_sbrk_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d00a      	beq.n	8008ce4 <sbrk_aligned+0x34>
 8008cce:	1cc4      	adds	r4, r0, #3
 8008cd0:	f024 0403 	bic.w	r4, r4, #3
 8008cd4:	42a0      	cmp	r0, r4
 8008cd6:	d007      	beq.n	8008ce8 <sbrk_aligned+0x38>
 8008cd8:	1a21      	subs	r1, r4, r0
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f000 f8c4 	bl	8008e68 <_sbrk_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d101      	bne.n	8008ce8 <sbrk_aligned+0x38>
 8008ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ce8:	4620      	mov	r0, r4
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	2000ec18 	.word	0x2000ec18

08008cf0 <_malloc_r>:
 8008cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	1ccd      	adds	r5, r1, #3
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	f025 0503 	bic.w	r5, r5, #3
 8008cfc:	3508      	adds	r5, #8
 8008cfe:	2d0c      	cmp	r5, #12
 8008d00:	bf38      	it	cc
 8008d02:	250c      	movcc	r5, #12
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	db01      	blt.n	8008d0c <_malloc_r+0x1c>
 8008d08:	42a9      	cmp	r1, r5
 8008d0a:	d905      	bls.n	8008d18 <_malloc_r+0x28>
 8008d0c:	230c      	movs	r3, #12
 8008d0e:	2600      	movs	r6, #0
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4630      	mov	r0, r6
 8008d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d18:	4e2e      	ldr	r6, [pc, #184]	; (8008dd4 <_malloc_r+0xe4>)
 8008d1a:	f000 f94f 	bl	8008fbc <__malloc_lock>
 8008d1e:	6833      	ldr	r3, [r6, #0]
 8008d20:	461c      	mov	r4, r3
 8008d22:	bb34      	cbnz	r4, 8008d72 <_malloc_r+0x82>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4638      	mov	r0, r7
 8008d28:	f7ff ffc2 	bl	8008cb0 <sbrk_aligned>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	4604      	mov	r4, r0
 8008d30:	d14d      	bne.n	8008dce <_malloc_r+0xde>
 8008d32:	6834      	ldr	r4, [r6, #0]
 8008d34:	4626      	mov	r6, r4
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	d140      	bne.n	8008dbc <_malloc_r+0xcc>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4638      	mov	r0, r7
 8008d40:	eb04 0803 	add.w	r8, r4, r3
 8008d44:	f000 f890 	bl	8008e68 <_sbrk_r>
 8008d48:	4580      	cmp	r8, r0
 8008d4a:	d13a      	bne.n	8008dc2 <_malloc_r+0xd2>
 8008d4c:	6821      	ldr	r1, [r4, #0]
 8008d4e:	3503      	adds	r5, #3
 8008d50:	4638      	mov	r0, r7
 8008d52:	1a6d      	subs	r5, r5, r1
 8008d54:	f025 0503 	bic.w	r5, r5, #3
 8008d58:	3508      	adds	r5, #8
 8008d5a:	2d0c      	cmp	r5, #12
 8008d5c:	bf38      	it	cc
 8008d5e:	250c      	movcc	r5, #12
 8008d60:	4629      	mov	r1, r5
 8008d62:	f7ff ffa5 	bl	8008cb0 <sbrk_aligned>
 8008d66:	3001      	adds	r0, #1
 8008d68:	d02b      	beq.n	8008dc2 <_malloc_r+0xd2>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	442b      	add	r3, r5
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	e00e      	b.n	8008d90 <_malloc_r+0xa0>
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	1b52      	subs	r2, r2, r5
 8008d76:	d41e      	bmi.n	8008db6 <_malloc_r+0xc6>
 8008d78:	2a0b      	cmp	r2, #11
 8008d7a:	d916      	bls.n	8008daa <_malloc_r+0xba>
 8008d7c:	1961      	adds	r1, r4, r5
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	6025      	str	r5, [r4, #0]
 8008d82:	bf18      	it	ne
 8008d84:	6059      	strne	r1, [r3, #4]
 8008d86:	6863      	ldr	r3, [r4, #4]
 8008d88:	bf08      	it	eq
 8008d8a:	6031      	streq	r1, [r6, #0]
 8008d8c:	5162      	str	r2, [r4, r5]
 8008d8e:	604b      	str	r3, [r1, #4]
 8008d90:	f104 060b 	add.w	r6, r4, #11
 8008d94:	4638      	mov	r0, r7
 8008d96:	f000 f917 	bl	8008fc8 <__malloc_unlock>
 8008d9a:	1d23      	adds	r3, r4, #4
 8008d9c:	f026 0607 	bic.w	r6, r6, #7
 8008da0:	1af2      	subs	r2, r6, r3
 8008da2:	d0b6      	beq.n	8008d12 <_malloc_r+0x22>
 8008da4:	1b9b      	subs	r3, r3, r6
 8008da6:	50a3      	str	r3, [r4, r2]
 8008da8:	e7b3      	b.n	8008d12 <_malloc_r+0x22>
 8008daa:	6862      	ldr	r2, [r4, #4]
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	bf0c      	ite	eq
 8008db0:	6032      	streq	r2, [r6, #0]
 8008db2:	605a      	strne	r2, [r3, #4]
 8008db4:	e7ec      	b.n	8008d90 <_malloc_r+0xa0>
 8008db6:	4623      	mov	r3, r4
 8008db8:	6864      	ldr	r4, [r4, #4]
 8008dba:	e7b2      	b.n	8008d22 <_malloc_r+0x32>
 8008dbc:	4634      	mov	r4, r6
 8008dbe:	6876      	ldr	r6, [r6, #4]
 8008dc0:	e7b9      	b.n	8008d36 <_malloc_r+0x46>
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	f000 f8fe 	bl	8008fc8 <__malloc_unlock>
 8008dcc:	e7a1      	b.n	8008d12 <_malloc_r+0x22>
 8008dce:	6025      	str	r5, [r4, #0]
 8008dd0:	e7de      	b.n	8008d90 <_malloc_r+0xa0>
 8008dd2:	bf00      	nop
 8008dd4:	2000ec14 	.word	0x2000ec14

08008dd8 <_putc_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	460d      	mov	r5, r1
 8008ddc:	4614      	mov	r4, r2
 8008dde:	4606      	mov	r6, r0
 8008de0:	b118      	cbz	r0, 8008dea <_putc_r+0x12>
 8008de2:	6983      	ldr	r3, [r0, #24]
 8008de4:	b90b      	cbnz	r3, 8008dea <_putc_r+0x12>
 8008de6:	f7ff fe03 	bl	80089f0 <__sinit>
 8008dea:	4b1c      	ldr	r3, [pc, #112]	; (8008e5c <_putc_r+0x84>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	d124      	bne.n	8008e3a <_putc_r+0x62>
 8008df0:	6874      	ldr	r4, [r6, #4]
 8008df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008df4:	07d8      	lsls	r0, r3, #31
 8008df6:	d405      	bmi.n	8008e04 <_putc_r+0x2c>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	0599      	lsls	r1, r3, #22
 8008dfc:	d402      	bmi.n	8008e04 <_putc_r+0x2c>
 8008dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e00:	f7ff fe94 	bl	8008b2c <__retarget_lock_acquire_recursive>
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	60a3      	str	r3, [r4, #8]
 8008e0c:	da05      	bge.n	8008e1a <_putc_r+0x42>
 8008e0e:	69a2      	ldr	r2, [r4, #24]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	db1c      	blt.n	8008e4e <_putc_r+0x76>
 8008e14:	b2eb      	uxtb	r3, r5
 8008e16:	2b0a      	cmp	r3, #10
 8008e18:	d019      	beq.n	8008e4e <_putc_r+0x76>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	6022      	str	r2, [r4, #0]
 8008e20:	701d      	strb	r5, [r3, #0]
 8008e22:	b2ed      	uxtb	r5, r5
 8008e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e26:	07da      	lsls	r2, r3, #31
 8008e28:	d405      	bmi.n	8008e36 <_putc_r+0x5e>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	059b      	lsls	r3, r3, #22
 8008e2e:	d402      	bmi.n	8008e36 <_putc_r+0x5e>
 8008e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e32:	f7ff fe7c 	bl	8008b2e <__retarget_lock_release_recursive>
 8008e36:	4628      	mov	r0, r5
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <_putc_r+0x88>)
 8008e3c:	429c      	cmp	r4, r3
 8008e3e:	d101      	bne.n	8008e44 <_putc_r+0x6c>
 8008e40:	68b4      	ldr	r4, [r6, #8]
 8008e42:	e7d6      	b.n	8008df2 <_putc_r+0x1a>
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <_putc_r+0x8c>)
 8008e46:	429c      	cmp	r4, r3
 8008e48:	bf08      	it	eq
 8008e4a:	68f4      	ldreq	r4, [r6, #12]
 8008e4c:	e7d1      	b.n	8008df2 <_putc_r+0x1a>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4622      	mov	r2, r4
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7ff fbf4 	bl	8008640 <__swbuf_r>
 8008e58:	4605      	mov	r5, r0
 8008e5a:	e7e3      	b.n	8008e24 <_putc_r+0x4c>
 8008e5c:	08009f04 	.word	0x08009f04
 8008e60:	08009f24 	.word	0x08009f24
 8008e64:	08009ee4 	.word	0x08009ee4

08008e68 <_sbrk_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4d05      	ldr	r5, [pc, #20]	; (8008e84 <_sbrk_r+0x1c>)
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f8 fea2 	bl	8001bbc <_sbrk>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_sbrk_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_sbrk_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	2000ec1c 	.word	0x2000ec1c

08008e88 <__sread>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e90:	f000 f8a0 	bl	8008fd4 <_read_r>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	bfab      	itete	ge
 8008e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e9c:	181b      	addge	r3, r3, r0
 8008e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ea2:	bfac      	ite	ge
 8008ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ea6:	81a3      	strhlt	r3, [r4, #12]
 8008ea8:	bd10      	pop	{r4, pc}

08008eaa <__swrite>:
 8008eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eae:	461f      	mov	r7, r3
 8008eb0:	898b      	ldrh	r3, [r1, #12]
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	05db      	lsls	r3, r3, #23
 8008eb8:	4616      	mov	r6, r2
 8008eba:	d505      	bpl.n	8008ec8 <__swrite+0x1e>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec4:	f000 f868 	bl	8008f98 <_lseek_r>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	4632      	mov	r2, r6
 8008ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	463b      	mov	r3, r7
 8008eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ede:	f000 b817 	b.w	8008f10 <_write_r>

08008ee2 <__sseek>:
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eea:	f000 f855 	bl	8008f98 <_lseek_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	bf15      	itete	ne
 8008ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008efe:	81a3      	strheq	r3, [r4, #12]
 8008f00:	bf18      	it	ne
 8008f02:	81a3      	strhne	r3, [r4, #12]
 8008f04:	bd10      	pop	{r4, pc}

08008f06 <__sclose>:
 8008f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0a:	f000 b813 	b.w	8008f34 <_close_r>
	...

08008f10 <_write_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	4d06      	ldr	r5, [pc, #24]	; (8008f30 <_write_r+0x20>)
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7f8 fdfb 	bl	8001b1a <_write>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_write_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_write_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	2000ec1c 	.word	0x2000ec1c

08008f34 <_close_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	2300      	movs	r3, #0
 8008f38:	4d05      	ldr	r5, [pc, #20]	; (8008f50 <_close_r+0x1c>)
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f8 fe07 	bl	8001b52 <_close>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_close_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_close_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	2000ec1c 	.word	0x2000ec1c

08008f54 <_fstat_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	2300      	movs	r3, #0
 8008f58:	4d06      	ldr	r5, [pc, #24]	; (8008f74 <_fstat_r+0x20>)
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	f7f8 fe02 	bl	8001b6a <_fstat>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d102      	bne.n	8008f70 <_fstat_r+0x1c>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	b103      	cbz	r3, 8008f70 <_fstat_r+0x1c>
 8008f6e:	6023      	str	r3, [r4, #0]
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	2000ec1c 	.word	0x2000ec1c

08008f78 <_isatty_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4d05      	ldr	r5, [pc, #20]	; (8008f94 <_isatty_r+0x1c>)
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f8 fe01 	bl	8001b8a <_isatty>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_isatty_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_isatty_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	2000ec1c 	.word	0x2000ec1c

08008f98 <_lseek_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4d06      	ldr	r5, [pc, #24]	; (8008fb8 <_lseek_r+0x20>)
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f7f8 fdfa 	bl	8001ba0 <_lseek>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_lseek_r+0x1e>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_lseek_r+0x1e>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	2000ec1c 	.word	0x2000ec1c

08008fbc <__malloc_lock>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	; (8008fc4 <__malloc_lock+0x8>)
 8008fbe:	f7ff bdb5 	b.w	8008b2c <__retarget_lock_acquire_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	2000ec10 	.word	0x2000ec10

08008fc8 <__malloc_unlock>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	; (8008fd0 <__malloc_unlock+0x8>)
 8008fca:	f7ff bdb0 	b.w	8008b2e <__retarget_lock_release_recursive>
 8008fce:	bf00      	nop
 8008fd0:	2000ec10 	.word	0x2000ec10

08008fd4 <_read_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4d06      	ldr	r5, [pc, #24]	; (8008ff4 <_read_r+0x20>)
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7f8 fd7c 	bl	8001ae0 <_read>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_read_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_read_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	2000ec1c 	.word	0x2000ec1c

08008ff8 <asin>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	ec55 4b10 	vmov	r4, r5, d0
 8008ffe:	ed2d 8b02 	vpush	{d8}
 8009002:	f000 f831 	bl	8009068 <__ieee754_asin>
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	eeb0 8a40 	vmov.f32	s16, s0
 8009012:	eef0 8a60 	vmov.f32	s17, s1
 8009016:	f7f7 fd85 	bl	8000b24 <__aeabi_dcmpun>
 800901a:	b9a8      	cbnz	r0, 8009048 <asin+0x50>
 800901c:	ec45 4b10 	vmov	d0, r4, r5
 8009020:	f000 fd5a 	bl	8009ad8 <fabs>
 8009024:	2200      	movs	r2, #0
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <asin+0x60>)
 8009028:	ec51 0b10 	vmov	r0, r1, d0
 800902c:	f7f7 fd70 	bl	8000b10 <__aeabi_dcmpgt>
 8009030:	b150      	cbz	r0, 8009048 <asin+0x50>
 8009032:	f7fe ffab 	bl	8007f8c <__errno>
 8009036:	2321      	movs	r3, #33	; 0x21
 8009038:	ecbd 8b02 	vpop	{d8}
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	4807      	ldr	r0, [pc, #28]	; (800905c <asin+0x64>)
 8009040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009044:	f000 bd54 	b.w	8009af0 <nan>
 8009048:	eeb0 0a48 	vmov.f32	s0, s16
 800904c:	eef0 0a68 	vmov.f32	s1, s17
 8009050:	ecbd 8b02 	vpop	{d8}
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	bf00      	nop
 8009058:	3ff00000 	.word	0x3ff00000
 800905c:	08009eb5 	.word	0x08009eb5

08009060 <atan2>:
 8009060:	f000 ba16 	b.w	8009490 <__ieee754_atan2>
 8009064:	0000      	movs	r0, r0
	...

08009068 <__ieee754_asin>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	ec55 4b10 	vmov	r4, r5, d0
 8009070:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009074:	4bcc      	ldr	r3, [pc, #816]	; (80093a8 <__ieee754_asin+0x340>)
 8009076:	ed2d 8b04 	vpush	{d8-d9}
 800907a:	4598      	cmp	r8, r3
 800907c:	b083      	sub	sp, #12
 800907e:	9501      	str	r5, [sp, #4]
 8009080:	dd35      	ble.n	80090ee <__ieee754_asin+0x86>
 8009082:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009086:	ee10 3a10 	vmov	r3, s0
 800908a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800908e:	ea58 0303 	orrs.w	r3, r8, r3
 8009092:	d117      	bne.n	80090c4 <__ieee754_asin+0x5c>
 8009094:	ee10 0a10 	vmov	r0, s0
 8009098:	4629      	mov	r1, r5
 800909a:	a3a9      	add	r3, pc, #676	; (adr r3, 8009340 <__ieee754_asin+0x2d8>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	f7f7 faa6 	bl	80005f0 <__aeabi_dmul>
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	a3a6      	add	r3, pc, #664	; (adr r3, 8009348 <__ieee754_asin+0x2e0>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f7f7 fa9d 	bl	80005f0 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f8e1 	bl	8000284 <__adddf3>
 80090c2:	e00b      	b.n	80090dc <__ieee754_asin+0x74>
 80090c4:	ee10 2a10 	vmov	r2, s0
 80090c8:	462b      	mov	r3, r5
 80090ca:	ee10 0a10 	vmov	r0, s0
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 f8d6 	bl	8000280 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	f7f7 fbb4 	bl	8000844 <__aeabi_ddiv>
 80090dc:	4604      	mov	r4, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	ec45 4b10 	vmov	d0, r4, r5
 80090e4:	b003      	add	sp, #12
 80090e6:	ecbd 8b04 	vpop	{d8-d9}
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	4baf      	ldr	r3, [pc, #700]	; (80093ac <__ieee754_asin+0x344>)
 80090f0:	4598      	cmp	r8, r3
 80090f2:	dc11      	bgt.n	8009118 <__ieee754_asin+0xb0>
 80090f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80090f8:	f280 80ad 	bge.w	8009256 <__ieee754_asin+0x1ee>
 80090fc:	ee10 0a10 	vmov	r0, s0
 8009100:	4629      	mov	r1, r5
 8009102:	a393      	add	r3, pc, #588	; (adr r3, 8009350 <__ieee754_asin+0x2e8>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f8bc 	bl	8000284 <__adddf3>
 800910c:	2200      	movs	r2, #0
 800910e:	4ba8      	ldr	r3, [pc, #672]	; (80093b0 <__ieee754_asin+0x348>)
 8009110:	f7f7 fcfe 	bl	8000b10 <__aeabi_dcmpgt>
 8009114:	2800      	cmp	r0, #0
 8009116:	d1e3      	bne.n	80090e0 <__ieee754_asin+0x78>
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	f000 fcdc 	bl	8009ad8 <fabs>
 8009120:	2000      	movs	r0, #0
 8009122:	49a3      	ldr	r1, [pc, #652]	; (80093b0 <__ieee754_asin+0x348>)
 8009124:	ec53 2b10 	vmov	r2, r3, d0
 8009128:	f7f7 f8aa 	bl	8000280 <__aeabi_dsub>
 800912c:	2200      	movs	r2, #0
 800912e:	4ba1      	ldr	r3, [pc, #644]	; (80093b4 <__ieee754_asin+0x34c>)
 8009130:	f7f7 fa5e 	bl	80005f0 <__aeabi_dmul>
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	a387      	add	r3, pc, #540	; (adr r3, 8009358 <__ieee754_asin+0x2f0>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fa57 	bl	80005f0 <__aeabi_dmul>
 8009142:	a387      	add	r3, pc, #540	; (adr r3, 8009360 <__ieee754_asin+0x2f8>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 f89c 	bl	8000284 <__adddf3>
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	f7f7 fa4e 	bl	80005f0 <__aeabi_dmul>
 8009154:	a384      	add	r3, pc, #528	; (adr r3, 8009368 <__ieee754_asin+0x300>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f891 	bl	8000280 <__aeabi_dsub>
 800915e:	4622      	mov	r2, r4
 8009160:	462b      	mov	r3, r5
 8009162:	f7f7 fa45 	bl	80005f0 <__aeabi_dmul>
 8009166:	a382      	add	r3, pc, #520	; (adr r3, 8009370 <__ieee754_asin+0x308>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 f88a 	bl	8000284 <__adddf3>
 8009170:	4622      	mov	r2, r4
 8009172:	462b      	mov	r3, r5
 8009174:	f7f7 fa3c 	bl	80005f0 <__aeabi_dmul>
 8009178:	a37f      	add	r3, pc, #508	; (adr r3, 8009378 <__ieee754_asin+0x310>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 f87f 	bl	8000280 <__aeabi_dsub>
 8009182:	4622      	mov	r2, r4
 8009184:	462b      	mov	r3, r5
 8009186:	f7f7 fa33 	bl	80005f0 <__aeabi_dmul>
 800918a:	a37d      	add	r3, pc, #500	; (adr r3, 8009380 <__ieee754_asin+0x318>)
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 f878 	bl	8000284 <__adddf3>
 8009194:	4622      	mov	r2, r4
 8009196:	462b      	mov	r3, r5
 8009198:	f7f7 fa2a 	bl	80005f0 <__aeabi_dmul>
 800919c:	a37a      	add	r3, pc, #488	; (adr r3, 8009388 <__ieee754_asin+0x320>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	ec41 0b18 	vmov	d8, r0, r1
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f7 fa21 	bl	80005f0 <__aeabi_dmul>
 80091ae:	a378      	add	r3, pc, #480	; (adr r3, 8009390 <__ieee754_asin+0x328>)
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f7f7 f864 	bl	8000280 <__aeabi_dsub>
 80091b8:	4622      	mov	r2, r4
 80091ba:	462b      	mov	r3, r5
 80091bc:	f7f7 fa18 	bl	80005f0 <__aeabi_dmul>
 80091c0:	a375      	add	r3, pc, #468	; (adr r3, 8009398 <__ieee754_asin+0x330>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 f85d 	bl	8000284 <__adddf3>
 80091ca:	4622      	mov	r2, r4
 80091cc:	462b      	mov	r3, r5
 80091ce:	f7f7 fa0f 	bl	80005f0 <__aeabi_dmul>
 80091d2:	a373      	add	r3, pc, #460	; (adr r3, 80093a0 <__ieee754_asin+0x338>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 f852 	bl	8000280 <__aeabi_dsub>
 80091dc:	4622      	mov	r2, r4
 80091de:	462b      	mov	r3, r5
 80091e0:	f7f7 fa06 	bl	80005f0 <__aeabi_dmul>
 80091e4:	4b72      	ldr	r3, [pc, #456]	; (80093b0 <__ieee754_asin+0x348>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	f7f7 f84c 	bl	8000284 <__adddf3>
 80091ec:	4606      	mov	r6, r0
 80091ee:	460f      	mov	r7, r1
 80091f0:	ec45 4b10 	vmov	d0, r4, r5
 80091f4:	f000 fa16 	bl	8009624 <__ieee754_sqrt>
 80091f8:	4b6f      	ldr	r3, [pc, #444]	; (80093b8 <__ieee754_asin+0x350>)
 80091fa:	4598      	cmp	r8, r3
 80091fc:	ec5b ab10 	vmov	sl, fp, d0
 8009200:	f340 80dc 	ble.w	80093bc <__ieee754_asin+0x354>
 8009204:	4632      	mov	r2, r6
 8009206:	463b      	mov	r3, r7
 8009208:	ec51 0b18 	vmov	r0, r1, d8
 800920c:	f7f7 fb1a 	bl	8000844 <__aeabi_ddiv>
 8009210:	4652      	mov	r2, sl
 8009212:	465b      	mov	r3, fp
 8009214:	f7f7 f9ec 	bl	80005f0 <__aeabi_dmul>
 8009218:	4652      	mov	r2, sl
 800921a:	465b      	mov	r3, fp
 800921c:	f7f7 f832 	bl	8000284 <__adddf3>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	f7f7 f82e 	bl	8000284 <__adddf3>
 8009228:	a347      	add	r3, pc, #284	; (adr r3, 8009348 <__ieee754_asin+0x2e0>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f827 	bl	8000280 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	a142      	add	r1, pc, #264	; (adr r1, 8009340 <__ieee754_asin+0x2d8>)
 8009238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800923c:	f7f7 f820 	bl	8000280 <__aeabi_dsub>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfdf      	itttt	le
 800924a:	4602      	movle	r2, r0
 800924c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009250:	4614      	movle	r4, r2
 8009252:	461d      	movle	r5, r3
 8009254:	e744      	b.n	80090e0 <__ieee754_asin+0x78>
 8009256:	ee10 2a10 	vmov	r2, s0
 800925a:	ee10 0a10 	vmov	r0, s0
 800925e:	462b      	mov	r3, r5
 8009260:	4629      	mov	r1, r5
 8009262:	f7f7 f9c5 	bl	80005f0 <__aeabi_dmul>
 8009266:	4606      	mov	r6, r0
 8009268:	460f      	mov	r7, r1
 800926a:	a33b      	add	r3, pc, #236	; (adr r3, 8009358 <__ieee754_asin+0x2f0>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f9be 	bl	80005f0 <__aeabi_dmul>
 8009274:	a33a      	add	r3, pc, #232	; (adr r3, 8009360 <__ieee754_asin+0x2f8>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 f803 	bl	8000284 <__adddf3>
 800927e:	4632      	mov	r2, r6
 8009280:	463b      	mov	r3, r7
 8009282:	f7f7 f9b5 	bl	80005f0 <__aeabi_dmul>
 8009286:	a338      	add	r3, pc, #224	; (adr r3, 8009368 <__ieee754_asin+0x300>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f6 fff8 	bl	8000280 <__aeabi_dsub>
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	f7f7 f9ac 	bl	80005f0 <__aeabi_dmul>
 8009298:	a335      	add	r3, pc, #212	; (adr r3, 8009370 <__ieee754_asin+0x308>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f6 fff1 	bl	8000284 <__adddf3>
 80092a2:	4632      	mov	r2, r6
 80092a4:	463b      	mov	r3, r7
 80092a6:	f7f7 f9a3 	bl	80005f0 <__aeabi_dmul>
 80092aa:	a333      	add	r3, pc, #204	; (adr r3, 8009378 <__ieee754_asin+0x310>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ffe6 	bl	8000280 <__aeabi_dsub>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f7 f99a 	bl	80005f0 <__aeabi_dmul>
 80092bc:	a330      	add	r3, pc, #192	; (adr r3, 8009380 <__ieee754_asin+0x318>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f6 ffdf 	bl	8000284 <__adddf3>
 80092c6:	4632      	mov	r2, r6
 80092c8:	463b      	mov	r3, r7
 80092ca:	f7f7 f991 	bl	80005f0 <__aeabi_dmul>
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	a32c      	add	r3, pc, #176	; (adr r3, 8009388 <__ieee754_asin+0x320>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f7 f988 	bl	80005f0 <__aeabi_dmul>
 80092e0:	a32b      	add	r3, pc, #172	; (adr r3, 8009390 <__ieee754_asin+0x328>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ffcb 	bl	8000280 <__aeabi_dsub>
 80092ea:	4632      	mov	r2, r6
 80092ec:	463b      	mov	r3, r7
 80092ee:	f7f7 f97f 	bl	80005f0 <__aeabi_dmul>
 80092f2:	a329      	add	r3, pc, #164	; (adr r3, 8009398 <__ieee754_asin+0x330>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f6 ffc4 	bl	8000284 <__adddf3>
 80092fc:	4632      	mov	r2, r6
 80092fe:	463b      	mov	r3, r7
 8009300:	f7f7 f976 	bl	80005f0 <__aeabi_dmul>
 8009304:	a326      	add	r3, pc, #152	; (adr r3, 80093a0 <__ieee754_asin+0x338>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ffb9 	bl	8000280 <__aeabi_dsub>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	f7f7 f96d 	bl	80005f0 <__aeabi_dmul>
 8009316:	2200      	movs	r2, #0
 8009318:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <__ieee754_asin+0x348>)
 800931a:	f7f6 ffb3 	bl	8000284 <__adddf3>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f7 fa8d 	bl	8000844 <__aeabi_ddiv>
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	f7f7 f95f 	bl	80005f0 <__aeabi_dmul>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	4620      	mov	r0, r4
 8009338:	4629      	mov	r1, r5
 800933a:	e6c0      	b.n	80090be <__ieee754_asin+0x56>
 800933c:	f3af 8000 	nop.w
 8009340:	54442d18 	.word	0x54442d18
 8009344:	3ff921fb 	.word	0x3ff921fb
 8009348:	33145c07 	.word	0x33145c07
 800934c:	3c91a626 	.word	0x3c91a626
 8009350:	8800759c 	.word	0x8800759c
 8009354:	7e37e43c 	.word	0x7e37e43c
 8009358:	0dfdf709 	.word	0x0dfdf709
 800935c:	3f023de1 	.word	0x3f023de1
 8009360:	7501b288 	.word	0x7501b288
 8009364:	3f49efe0 	.word	0x3f49efe0
 8009368:	b5688f3b 	.word	0xb5688f3b
 800936c:	3fa48228 	.word	0x3fa48228
 8009370:	0e884455 	.word	0x0e884455
 8009374:	3fc9c155 	.word	0x3fc9c155
 8009378:	03eb6f7d 	.word	0x03eb6f7d
 800937c:	3fd4d612 	.word	0x3fd4d612
 8009380:	55555555 	.word	0x55555555
 8009384:	3fc55555 	.word	0x3fc55555
 8009388:	b12e9282 	.word	0xb12e9282
 800938c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009390:	1b8d0159 	.word	0x1b8d0159
 8009394:	3fe6066c 	.word	0x3fe6066c
 8009398:	9c598ac8 	.word	0x9c598ac8
 800939c:	40002ae5 	.word	0x40002ae5
 80093a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80093a4:	40033a27 	.word	0x40033a27
 80093a8:	3fefffff 	.word	0x3fefffff
 80093ac:	3fdfffff 	.word	0x3fdfffff
 80093b0:	3ff00000 	.word	0x3ff00000
 80093b4:	3fe00000 	.word	0x3fe00000
 80093b8:	3fef3332 	.word	0x3fef3332
 80093bc:	ee10 2a10 	vmov	r2, s0
 80093c0:	ee10 0a10 	vmov	r0, s0
 80093c4:	465b      	mov	r3, fp
 80093c6:	4659      	mov	r1, fp
 80093c8:	f04f 0800 	mov.w	r8, #0
 80093cc:	f7f6 ff5a 	bl	8000284 <__adddf3>
 80093d0:	4632      	mov	r2, r6
 80093d2:	463b      	mov	r3, r7
 80093d4:	ec41 0b19 	vmov	d9, r0, r1
 80093d8:	ec51 0b18 	vmov	r0, r1, d8
 80093dc:	f7f7 fa32 	bl	8000844 <__aeabi_ddiv>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	ec51 0b19 	vmov	r0, r1, d9
 80093e8:	f7f7 f902 	bl	80005f0 <__aeabi_dmul>
 80093ec:	4642      	mov	r2, r8
 80093ee:	4606      	mov	r6, r0
 80093f0:	460f      	mov	r7, r1
 80093f2:	465b      	mov	r3, fp
 80093f4:	4640      	mov	r0, r8
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f7 f8fa 	bl	80005f0 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4620      	mov	r0, r4
 8009402:	4629      	mov	r1, r5
 8009404:	f7f6 ff3c 	bl	8000280 <__aeabi_dsub>
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	4642      	mov	r2, r8
 800940e:	465b      	mov	r3, fp
 8009410:	4650      	mov	r0, sl
 8009412:	4659      	mov	r1, fp
 8009414:	f7f6 ff36 	bl	8000284 <__adddf3>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 fa10 	bl	8000844 <__aeabi_ddiv>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	f7f6 ff2c 	bl	8000284 <__adddf3>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	a113      	add	r1, pc, #76	; (adr r1, 8009480 <__ieee754_asin+0x418>)
 8009432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009436:	f7f6 ff23 	bl	8000280 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f6 ff1d 	bl	8000280 <__aeabi_dsub>
 8009446:	4642      	mov	r2, r8
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	465b      	mov	r3, fp
 800944e:	4640      	mov	r0, r8
 8009450:	4659      	mov	r1, fp
 8009452:	f7f6 ff17 	bl	8000284 <__adddf3>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	a10b      	add	r1, pc, #44	; (adr r1, 8009488 <__ieee754_asin+0x420>)
 800945c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009460:	f7f6 ff0e 	bl	8000280 <__aeabi_dsub>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4620      	mov	r0, r4
 800946a:	4629      	mov	r1, r5
 800946c:	f7f6 ff08 	bl	8000280 <__aeabi_dsub>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	a104      	add	r1, pc, #16	; (adr r1, 8009488 <__ieee754_asin+0x420>)
 8009476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947a:	e6df      	b.n	800923c <__ieee754_asin+0x1d4>
 800947c:	f3af 8000 	nop.w
 8009480:	33145c07 	.word	0x33145c07
 8009484:	3c91a626 	.word	0x3c91a626
 8009488:	54442d18 	.word	0x54442d18
 800948c:	3fe921fb 	.word	0x3fe921fb

08009490 <__ieee754_atan2>:
 8009490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009494:	ec57 6b11 	vmov	r6, r7, d1
 8009498:	4273      	negs	r3, r6
 800949a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800949e:	f8df e180 	ldr.w	lr, [pc, #384]	; 8009620 <__ieee754_atan2+0x190>
 80094a2:	ee11 8a10 	vmov	r8, s2
 80094a6:	4333      	orrs	r3, r6
 80094a8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80094ac:	4573      	cmp	r3, lr
 80094ae:	ec51 0b10 	vmov	r0, r1, d0
 80094b2:	d80a      	bhi.n	80094ca <__ieee754_atan2+0x3a>
 80094b4:	4244      	negs	r4, r0
 80094b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094ba:	468c      	mov	ip, r1
 80094bc:	ee10 9a10 	vmov	r9, s0
 80094c0:	4304      	orrs	r4, r0
 80094c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80094c6:	4574      	cmp	r4, lr
 80094c8:	d907      	bls.n	80094da <__ieee754_atan2+0x4a>
 80094ca:	4632      	mov	r2, r6
 80094cc:	463b      	mov	r3, r7
 80094ce:	f7f6 fed9 	bl	8000284 <__adddf3>
 80094d2:	ec41 0b10 	vmov	d0, r0, r1
 80094d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80094de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094e2:	4334      	orrs	r4, r6
 80094e4:	d103      	bne.n	80094ee <__ieee754_atan2+0x5e>
 80094e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ea:	f000 b955 	b.w	8009798 <atan>
 80094ee:	17bc      	asrs	r4, r7, #30
 80094f0:	ea53 0909 	orrs.w	r9, r3, r9
 80094f4:	f004 0402 	and.w	r4, r4, #2
 80094f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80094fc:	d107      	bne.n	800950e <__ieee754_atan2+0x7e>
 80094fe:	2c02      	cmp	r4, #2
 8009500:	d060      	beq.n	80095c4 <__ieee754_atan2+0x134>
 8009502:	2c03      	cmp	r4, #3
 8009504:	d1e5      	bne.n	80094d2 <__ieee754_atan2+0x42>
 8009506:	a142      	add	r1, pc, #264	; (adr r1, 8009610 <__ieee754_atan2+0x180>)
 8009508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800950c:	e7e1      	b.n	80094d2 <__ieee754_atan2+0x42>
 800950e:	ea52 0808 	orrs.w	r8, r2, r8
 8009512:	d106      	bne.n	8009522 <__ieee754_atan2+0x92>
 8009514:	f1bc 0f00 	cmp.w	ip, #0
 8009518:	da5f      	bge.n	80095da <__ieee754_atan2+0x14a>
 800951a:	a13f      	add	r1, pc, #252	; (adr r1, 8009618 <__ieee754_atan2+0x188>)
 800951c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009520:	e7d7      	b.n	80094d2 <__ieee754_atan2+0x42>
 8009522:	4572      	cmp	r2, lr
 8009524:	d10f      	bne.n	8009546 <__ieee754_atan2+0xb6>
 8009526:	4293      	cmp	r3, r2
 8009528:	f104 34ff 	add.w	r4, r4, #4294967295
 800952c:	d107      	bne.n	800953e <__ieee754_atan2+0xae>
 800952e:	2c02      	cmp	r4, #2
 8009530:	d84c      	bhi.n	80095cc <__ieee754_atan2+0x13c>
 8009532:	4b35      	ldr	r3, [pc, #212]	; (8009608 <__ieee754_atan2+0x178>)
 8009534:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009538:	e9d4 0100 	ldrd	r0, r1, [r4]
 800953c:	e7c9      	b.n	80094d2 <__ieee754_atan2+0x42>
 800953e:	2c02      	cmp	r4, #2
 8009540:	d848      	bhi.n	80095d4 <__ieee754_atan2+0x144>
 8009542:	4b32      	ldr	r3, [pc, #200]	; (800960c <__ieee754_atan2+0x17c>)
 8009544:	e7f6      	b.n	8009534 <__ieee754_atan2+0xa4>
 8009546:	4573      	cmp	r3, lr
 8009548:	d0e4      	beq.n	8009514 <__ieee754_atan2+0x84>
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009550:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009554:	da1e      	bge.n	8009594 <__ieee754_atan2+0x104>
 8009556:	2f00      	cmp	r7, #0
 8009558:	da01      	bge.n	800955e <__ieee754_atan2+0xce>
 800955a:	323c      	adds	r2, #60	; 0x3c
 800955c:	db1e      	blt.n	800959c <__ieee754_atan2+0x10c>
 800955e:	4632      	mov	r2, r6
 8009560:	463b      	mov	r3, r7
 8009562:	f7f7 f96f 	bl	8000844 <__aeabi_ddiv>
 8009566:	ec41 0b10 	vmov	d0, r0, r1
 800956a:	f000 fab5 	bl	8009ad8 <fabs>
 800956e:	f000 f913 	bl	8009798 <atan>
 8009572:	ec51 0b10 	vmov	r0, r1, d0
 8009576:	2c01      	cmp	r4, #1
 8009578:	d013      	beq.n	80095a2 <__ieee754_atan2+0x112>
 800957a:	2c02      	cmp	r4, #2
 800957c:	d015      	beq.n	80095aa <__ieee754_atan2+0x11a>
 800957e:	2c00      	cmp	r4, #0
 8009580:	d0a7      	beq.n	80094d2 <__ieee754_atan2+0x42>
 8009582:	a319      	add	r3, pc, #100	; (adr r3, 80095e8 <__ieee754_atan2+0x158>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe7a 	bl	8000280 <__aeabi_dsub>
 800958c:	a318      	add	r3, pc, #96	; (adr r3, 80095f0 <__ieee754_atan2+0x160>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	e014      	b.n	80095be <__ieee754_atan2+0x12e>
 8009594:	a118      	add	r1, pc, #96	; (adr r1, 80095f8 <__ieee754_atan2+0x168>)
 8009596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959a:	e7ec      	b.n	8009576 <__ieee754_atan2+0xe6>
 800959c:	2000      	movs	r0, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	e7e9      	b.n	8009576 <__ieee754_atan2+0xe6>
 80095a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095a6:	4619      	mov	r1, r3
 80095a8:	e793      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095aa:	a30f      	add	r3, pc, #60	; (adr r3, 80095e8 <__ieee754_atan2+0x158>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 fe66 	bl	8000280 <__aeabi_dsub>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	a10d      	add	r1, pc, #52	; (adr r1, 80095f0 <__ieee754_atan2+0x160>)
 80095ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095be:	f7f6 fe5f 	bl	8000280 <__aeabi_dsub>
 80095c2:	e786      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095c4:	a10a      	add	r1, pc, #40	; (adr r1, 80095f0 <__ieee754_atan2+0x160>)
 80095c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ca:	e782      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095cc:	a10c      	add	r1, pc, #48	; (adr r1, 8009600 <__ieee754_atan2+0x170>)
 80095ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d2:	e77e      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095d4:	2000      	movs	r0, #0
 80095d6:	2100      	movs	r1, #0
 80095d8:	e77b      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095da:	a107      	add	r1, pc, #28	; (adr r1, 80095f8 <__ieee754_atan2+0x168>)
 80095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e0:	e777      	b.n	80094d2 <__ieee754_atan2+0x42>
 80095e2:	bf00      	nop
 80095e4:	f3af 8000 	nop.w
 80095e8:	33145c07 	.word	0x33145c07
 80095ec:	3ca1a626 	.word	0x3ca1a626
 80095f0:	54442d18 	.word	0x54442d18
 80095f4:	400921fb 	.word	0x400921fb
 80095f8:	54442d18 	.word	0x54442d18
 80095fc:	3ff921fb 	.word	0x3ff921fb
 8009600:	54442d18 	.word	0x54442d18
 8009604:	3fe921fb 	.word	0x3fe921fb
 8009608:	08009f48 	.word	0x08009f48
 800960c:	08009f60 	.word	0x08009f60
 8009610:	54442d18 	.word	0x54442d18
 8009614:	c00921fb 	.word	0xc00921fb
 8009618:	54442d18 	.word	0x54442d18
 800961c:	bff921fb 	.word	0xbff921fb
 8009620:	7ff00000 	.word	0x7ff00000

08009624 <__ieee754_sqrt>:
 8009624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009628:	4e59      	ldr	r6, [pc, #356]	; (8009790 <__ieee754_sqrt+0x16c>)
 800962a:	ee10 0a10 	vmov	r0, s0
 800962e:	ee10 3a10 	vmov	r3, s0
 8009632:	ec55 4b10 	vmov	r4, r5, d0
 8009636:	43ae      	bics	r6, r5
 8009638:	462a      	mov	r2, r5
 800963a:	4629      	mov	r1, r5
 800963c:	d110      	bne.n	8009660 <__ieee754_sqrt+0x3c>
 800963e:	ee10 2a10 	vmov	r2, s0
 8009642:	462b      	mov	r3, r5
 8009644:	f7f6 ffd4 	bl	80005f0 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f7f6 fe18 	bl	8000284 <__adddf3>
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	ec45 4b10 	vmov	d0, r4, r5
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	2d00      	cmp	r5, #0
 8009662:	dc10      	bgt.n	8009686 <__ieee754_sqrt+0x62>
 8009664:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009668:	4330      	orrs	r0, r6
 800966a:	d0f5      	beq.n	8009658 <__ieee754_sqrt+0x34>
 800966c:	b15d      	cbz	r5, 8009686 <__ieee754_sqrt+0x62>
 800966e:	ee10 2a10 	vmov	r2, s0
 8009672:	462b      	mov	r3, r5
 8009674:	ee10 0a10 	vmov	r0, s0
 8009678:	f7f6 fe02 	bl	8000280 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	f7f7 f8e0 	bl	8000844 <__aeabi_ddiv>
 8009684:	e7e6      	b.n	8009654 <__ieee754_sqrt+0x30>
 8009686:	1512      	asrs	r2, r2, #20
 8009688:	d07a      	beq.n	8009780 <__ieee754_sqrt+0x15c>
 800968a:	07d4      	lsls	r4, r2, #31
 800968c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009690:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009694:	f04f 0400 	mov.w	r4, #0
 8009698:	bf58      	it	pl
 800969a:	0fda      	lsrpl	r2, r3, #31
 800969c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80096a0:	bf58      	it	pl
 80096a2:	005b      	lslpl	r3, r3, #1
 80096a4:	f04f 0516 	mov.w	r5, #22
 80096a8:	bf58      	it	pl
 80096aa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80096ae:	4620      	mov	r0, r4
 80096b0:	0fda      	lsrs	r2, r3, #31
 80096b2:	107f      	asrs	r7, r7, #1
 80096b4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80096b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	1886      	adds	r6, r0, r2
 80096c0:	428e      	cmp	r6, r1
 80096c2:	bfde      	ittt	le
 80096c4:	1b89      	suble	r1, r1, r6
 80096c6:	18b0      	addle	r0, r6, r2
 80096c8:	18a4      	addle	r4, r4, r2
 80096ca:	3d01      	subs	r5, #1
 80096cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80096d4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80096d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096dc:	d1ef      	bne.n	80096be <__ieee754_sqrt+0x9a>
 80096de:	462a      	mov	r2, r5
 80096e0:	f04f 0e20 	mov.w	lr, #32
 80096e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096e8:	4281      	cmp	r1, r0
 80096ea:	eb06 0c05 	add.w	ip, r6, r5
 80096ee:	dc02      	bgt.n	80096f6 <__ieee754_sqrt+0xd2>
 80096f0:	d113      	bne.n	800971a <__ieee754_sqrt+0xf6>
 80096f2:	459c      	cmp	ip, r3
 80096f4:	d811      	bhi.n	800971a <__ieee754_sqrt+0xf6>
 80096f6:	f1bc 0f00 	cmp.w	ip, #0
 80096fa:	eb0c 0506 	add.w	r5, ip, r6
 80096fe:	da44      	bge.n	800978a <__ieee754_sqrt+0x166>
 8009700:	2d00      	cmp	r5, #0
 8009702:	db42      	blt.n	800978a <__ieee754_sqrt+0x166>
 8009704:	f100 0801 	add.w	r8, r0, #1
 8009708:	1a09      	subs	r1, r1, r0
 800970a:	459c      	cmp	ip, r3
 800970c:	4432      	add	r2, r6
 800970e:	eba3 030c 	sub.w	r3, r3, ip
 8009712:	bf88      	it	hi
 8009714:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009718:	4640      	mov	r0, r8
 800971a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800971e:	f1be 0e01 	subs.w	lr, lr, #1
 8009722:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009726:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800972a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800972e:	d1db      	bne.n	80096e8 <__ieee754_sqrt+0xc4>
 8009730:	430b      	orrs	r3, r1
 8009732:	d006      	beq.n	8009742 <__ieee754_sqrt+0x11e>
 8009734:	1c50      	adds	r0, r2, #1
 8009736:	bf13      	iteet	ne
 8009738:	3201      	addne	r2, #1
 800973a:	3401      	addeq	r4, #1
 800973c:	4672      	moveq	r2, lr
 800973e:	f022 0201 	bicne.w	r2, r2, #1
 8009742:	1063      	asrs	r3, r4, #1
 8009744:	07e1      	lsls	r1, r4, #31
 8009746:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800974a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800974e:	bf48      	it	mi
 8009750:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009754:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009758:	4614      	mov	r4, r2
 800975a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800975e:	e77b      	b.n	8009658 <__ieee754_sqrt+0x34>
 8009760:	0ad9      	lsrs	r1, r3, #11
 8009762:	3815      	subs	r0, #21
 8009764:	055b      	lsls	r3, r3, #21
 8009766:	2900      	cmp	r1, #0
 8009768:	d0fa      	beq.n	8009760 <__ieee754_sqrt+0x13c>
 800976a:	02cd      	lsls	r5, r1, #11
 800976c:	d50a      	bpl.n	8009784 <__ieee754_sqrt+0x160>
 800976e:	f1c2 0420 	rsb	r4, r2, #32
 8009772:	1e55      	subs	r5, r2, #1
 8009774:	fa23 f404 	lsr.w	r4, r3, r4
 8009778:	4093      	lsls	r3, r2
 800977a:	1b42      	subs	r2, r0, r5
 800977c:	4321      	orrs	r1, r4
 800977e:	e784      	b.n	800968a <__ieee754_sqrt+0x66>
 8009780:	4610      	mov	r0, r2
 8009782:	e7f0      	b.n	8009766 <__ieee754_sqrt+0x142>
 8009784:	0049      	lsls	r1, r1, #1
 8009786:	3201      	adds	r2, #1
 8009788:	e7ef      	b.n	800976a <__ieee754_sqrt+0x146>
 800978a:	4680      	mov	r8, r0
 800978c:	e7bc      	b.n	8009708 <__ieee754_sqrt+0xe4>
 800978e:	bf00      	nop
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	00000000 	.word	0x00000000

08009798 <atan>:
 8009798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	ec55 4b10 	vmov	r4, r5, d0
 80097a0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097a4:	4bc2      	ldr	r3, [pc, #776]	; (8009ab0 <atan+0x318>)
 80097a6:	46ab      	mov	fp, r5
 80097a8:	429e      	cmp	r6, r3
 80097aa:	dd18      	ble.n	80097de <atan+0x46>
 80097ac:	4bc1      	ldr	r3, [pc, #772]	; (8009ab4 <atan+0x31c>)
 80097ae:	429e      	cmp	r6, r3
 80097b0:	dc01      	bgt.n	80097b6 <atan+0x1e>
 80097b2:	d109      	bne.n	80097c8 <atan+0x30>
 80097b4:	b144      	cbz	r4, 80097c8 <atan+0x30>
 80097b6:	4622      	mov	r2, r4
 80097b8:	462b      	mov	r3, r5
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fd61 	bl	8000284 <__adddf3>
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	e006      	b.n	80097d6 <atan+0x3e>
 80097c8:	f1bb 0f00 	cmp.w	fp, #0
 80097cc:	f300 8131 	bgt.w	8009a32 <atan+0x29a>
 80097d0:	a59b      	add	r5, pc, #620	; (adr r5, 8009a40 <atan+0x2a8>)
 80097d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80097d6:	ec45 4b10 	vmov	d0, r4, r5
 80097da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	4bb6      	ldr	r3, [pc, #728]	; (8009ab8 <atan+0x320>)
 80097e0:	429e      	cmp	r6, r3
 80097e2:	dc14      	bgt.n	800980e <atan+0x76>
 80097e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80097e8:	429e      	cmp	r6, r3
 80097ea:	dc0d      	bgt.n	8009808 <atan+0x70>
 80097ec:	ee10 0a10 	vmov	r0, s0
 80097f0:	4629      	mov	r1, r5
 80097f2:	a395      	add	r3, pc, #596	; (adr r3, 8009a48 <atan+0x2b0>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fd44 	bl	8000284 <__adddf3>
 80097fc:	2200      	movs	r2, #0
 80097fe:	4baf      	ldr	r3, [pc, #700]	; (8009abc <atan+0x324>)
 8009800:	f7f7 f986 	bl	8000b10 <__aeabi_dcmpgt>
 8009804:	2800      	cmp	r0, #0
 8009806:	d1e6      	bne.n	80097d6 <atan+0x3e>
 8009808:	f04f 3aff 	mov.w	sl, #4294967295
 800980c:	e02b      	b.n	8009866 <atan+0xce>
 800980e:	f000 f963 	bl	8009ad8 <fabs>
 8009812:	4bab      	ldr	r3, [pc, #684]	; (8009ac0 <atan+0x328>)
 8009814:	429e      	cmp	r6, r3
 8009816:	ec55 4b10 	vmov	r4, r5, d0
 800981a:	f300 80bf 	bgt.w	800999c <atan+0x204>
 800981e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009822:	429e      	cmp	r6, r3
 8009824:	f300 80a0 	bgt.w	8009968 <atan+0x1d0>
 8009828:	ee10 2a10 	vmov	r2, s0
 800982c:	ee10 0a10 	vmov	r0, s0
 8009830:	462b      	mov	r3, r5
 8009832:	4629      	mov	r1, r5
 8009834:	f7f6 fd26 	bl	8000284 <__adddf3>
 8009838:	2200      	movs	r2, #0
 800983a:	4ba0      	ldr	r3, [pc, #640]	; (8009abc <atan+0x324>)
 800983c:	f04f 0a00 	mov.w	sl, #0
 8009840:	f7f6 fd1e 	bl	8000280 <__aeabi_dsub>
 8009844:	4606      	mov	r6, r0
 8009846:	460f      	mov	r7, r1
 8009848:	2200      	movs	r2, #0
 800984a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fd17 	bl	8000284 <__adddf3>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 fff1 	bl	8000844 <__aeabi_ddiv>
 8009862:	4604      	mov	r4, r0
 8009864:	460d      	mov	r5, r1
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 febf 	bl	80005f0 <__aeabi_dmul>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4680      	mov	r8, r0
 8009878:	4689      	mov	r9, r1
 800987a:	f7f6 feb9 	bl	80005f0 <__aeabi_dmul>
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	a373      	add	r3, pc, #460	; (adr r3, 8009a50 <atan+0x2b8>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 feb2 	bl	80005f0 <__aeabi_dmul>
 800988c:	a372      	add	r3, pc, #456	; (adr r3, 8009a58 <atan+0x2c0>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 fcf7 	bl	8000284 <__adddf3>
 8009896:	4632      	mov	r2, r6
 8009898:	463b      	mov	r3, r7
 800989a:	f7f6 fea9 	bl	80005f0 <__aeabi_dmul>
 800989e:	a370      	add	r3, pc, #448	; (adr r3, 8009a60 <atan+0x2c8>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 fcee 	bl	8000284 <__adddf3>
 80098a8:	4632      	mov	r2, r6
 80098aa:	463b      	mov	r3, r7
 80098ac:	f7f6 fea0 	bl	80005f0 <__aeabi_dmul>
 80098b0:	a36d      	add	r3, pc, #436	; (adr r3, 8009a68 <atan+0x2d0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f7f6 fce5 	bl	8000284 <__adddf3>
 80098ba:	4632      	mov	r2, r6
 80098bc:	463b      	mov	r3, r7
 80098be:	f7f6 fe97 	bl	80005f0 <__aeabi_dmul>
 80098c2:	a36b      	add	r3, pc, #428	; (adr r3, 8009a70 <atan+0x2d8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fcdc 	bl	8000284 <__adddf3>
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	f7f6 fe8e 	bl	80005f0 <__aeabi_dmul>
 80098d4:	a368      	add	r3, pc, #416	; (adr r3, 8009a78 <atan+0x2e0>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f7f6 fcd3 	bl	8000284 <__adddf3>
 80098de:	4642      	mov	r2, r8
 80098e0:	464b      	mov	r3, r9
 80098e2:	f7f6 fe85 	bl	80005f0 <__aeabi_dmul>
 80098e6:	4680      	mov	r8, r0
 80098e8:	4689      	mov	r9, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	a364      	add	r3, pc, #400	; (adr r3, 8009a80 <atan+0x2e8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fe7c 	bl	80005f0 <__aeabi_dmul>
 80098f8:	a363      	add	r3, pc, #396	; (adr r3, 8009a88 <atan+0x2f0>)
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 fcbf 	bl	8000280 <__aeabi_dsub>
 8009902:	4632      	mov	r2, r6
 8009904:	463b      	mov	r3, r7
 8009906:	f7f6 fe73 	bl	80005f0 <__aeabi_dmul>
 800990a:	a361      	add	r3, pc, #388	; (adr r3, 8009a90 <atan+0x2f8>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f7f6 fcb6 	bl	8000280 <__aeabi_dsub>
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	f7f6 fe6a 	bl	80005f0 <__aeabi_dmul>
 800991c:	a35e      	add	r3, pc, #376	; (adr r3, 8009a98 <atan+0x300>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fcad 	bl	8000280 <__aeabi_dsub>
 8009926:	4632      	mov	r2, r6
 8009928:	463b      	mov	r3, r7
 800992a:	f7f6 fe61 	bl	80005f0 <__aeabi_dmul>
 800992e:	a35c      	add	r3, pc, #368	; (adr r3, 8009aa0 <atan+0x308>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fca4 	bl	8000280 <__aeabi_dsub>
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	f7f6 fe58 	bl	80005f0 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f6 fc9c 	bl	8000284 <__adddf3>
 800994c:	4622      	mov	r2, r4
 800994e:	462b      	mov	r3, r5
 8009950:	f7f6 fe4e 	bl	80005f0 <__aeabi_dmul>
 8009954:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	d14b      	bne.n	80099f6 <atan+0x25e>
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	f7f6 fc8d 	bl	8000280 <__aeabi_dsub>
 8009966:	e72c      	b.n	80097c2 <atan+0x2a>
 8009968:	ee10 0a10 	vmov	r0, s0
 800996c:	2200      	movs	r2, #0
 800996e:	4b53      	ldr	r3, [pc, #332]	; (8009abc <atan+0x324>)
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fc85 	bl	8000280 <__aeabi_dsub>
 8009976:	4606      	mov	r6, r0
 8009978:	460f      	mov	r7, r1
 800997a:	2200      	movs	r2, #0
 800997c:	4b4f      	ldr	r3, [pc, #316]	; (8009abc <atan+0x324>)
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f04f 0a01 	mov.w	sl, #1
 8009986:	f7f6 fc7d 	bl	8000284 <__adddf3>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 ff57 	bl	8000844 <__aeabi_ddiv>
 8009996:	4604      	mov	r4, r0
 8009998:	460d      	mov	r5, r1
 800999a:	e764      	b.n	8009866 <atan+0xce>
 800999c:	4b49      	ldr	r3, [pc, #292]	; (8009ac4 <atan+0x32c>)
 800999e:	429e      	cmp	r6, r3
 80099a0:	da1d      	bge.n	80099de <atan+0x246>
 80099a2:	ee10 0a10 	vmov	r0, s0
 80099a6:	2200      	movs	r2, #0
 80099a8:	4b47      	ldr	r3, [pc, #284]	; (8009ac8 <atan+0x330>)
 80099aa:	4629      	mov	r1, r5
 80099ac:	f7f6 fc68 	bl	8000280 <__aeabi_dsub>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	4b44      	ldr	r3, [pc, #272]	; (8009ac8 <atan+0x330>)
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f04f 0a02 	mov.w	sl, #2
 80099c0:	f7f6 fe16 	bl	80005f0 <__aeabi_dmul>
 80099c4:	2200      	movs	r2, #0
 80099c6:	4b3d      	ldr	r3, [pc, #244]	; (8009abc <atan+0x324>)
 80099c8:	f7f6 fc5c 	bl	8000284 <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f6 ff36 	bl	8000844 <__aeabi_ddiv>
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	e743      	b.n	8009866 <atan+0xce>
 80099de:	462b      	mov	r3, r5
 80099e0:	ee10 2a10 	vmov	r2, s0
 80099e4:	2000      	movs	r0, #0
 80099e6:	4939      	ldr	r1, [pc, #228]	; (8009acc <atan+0x334>)
 80099e8:	f7f6 ff2c 	bl	8000844 <__aeabi_ddiv>
 80099ec:	f04f 0a03 	mov.w	sl, #3
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	e737      	b.n	8009866 <atan+0xce>
 80099f6:	4b36      	ldr	r3, [pc, #216]	; (8009ad0 <atan+0x338>)
 80099f8:	4e36      	ldr	r6, [pc, #216]	; (8009ad4 <atan+0x33c>)
 80099fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80099fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009a02:	e9da 2300 	ldrd	r2, r3, [sl]
 8009a06:	f7f6 fc3b 	bl	8000280 <__aeabi_dsub>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	f7f6 fc37 	bl	8000280 <__aeabi_dsub>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009a1a:	f7f6 fc31 	bl	8000280 <__aeabi_dsub>
 8009a1e:	f1bb 0f00 	cmp.w	fp, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	460d      	mov	r5, r1
 8009a26:	f6bf aed6 	bge.w	80097d6 <atan+0x3e>
 8009a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a2e:	461d      	mov	r5, r3
 8009a30:	e6d1      	b.n	80097d6 <atan+0x3e>
 8009a32:	a51d      	add	r5, pc, #116	; (adr r5, 8009aa8 <atan+0x310>)
 8009a34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a38:	e6cd      	b.n	80097d6 <atan+0x3e>
 8009a3a:	bf00      	nop
 8009a3c:	f3af 8000 	nop.w
 8009a40:	54442d18 	.word	0x54442d18
 8009a44:	bff921fb 	.word	0xbff921fb
 8009a48:	8800759c 	.word	0x8800759c
 8009a4c:	7e37e43c 	.word	0x7e37e43c
 8009a50:	e322da11 	.word	0xe322da11
 8009a54:	3f90ad3a 	.word	0x3f90ad3a
 8009a58:	24760deb 	.word	0x24760deb
 8009a5c:	3fa97b4b 	.word	0x3fa97b4b
 8009a60:	a0d03d51 	.word	0xa0d03d51
 8009a64:	3fb10d66 	.word	0x3fb10d66
 8009a68:	c54c206e 	.word	0xc54c206e
 8009a6c:	3fb745cd 	.word	0x3fb745cd
 8009a70:	920083ff 	.word	0x920083ff
 8009a74:	3fc24924 	.word	0x3fc24924
 8009a78:	5555550d 	.word	0x5555550d
 8009a7c:	3fd55555 	.word	0x3fd55555
 8009a80:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a84:	bfa2b444 	.word	0xbfa2b444
 8009a88:	52defd9a 	.word	0x52defd9a
 8009a8c:	3fadde2d 	.word	0x3fadde2d
 8009a90:	af749a6d 	.word	0xaf749a6d
 8009a94:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a98:	fe231671 	.word	0xfe231671
 8009a9c:	3fbc71c6 	.word	0x3fbc71c6
 8009aa0:	9998ebc4 	.word	0x9998ebc4
 8009aa4:	3fc99999 	.word	0x3fc99999
 8009aa8:	54442d18 	.word	0x54442d18
 8009aac:	3ff921fb 	.word	0x3ff921fb
 8009ab0:	440fffff 	.word	0x440fffff
 8009ab4:	7ff00000 	.word	0x7ff00000
 8009ab8:	3fdbffff 	.word	0x3fdbffff
 8009abc:	3ff00000 	.word	0x3ff00000
 8009ac0:	3ff2ffff 	.word	0x3ff2ffff
 8009ac4:	40038000 	.word	0x40038000
 8009ac8:	3ff80000 	.word	0x3ff80000
 8009acc:	bff00000 	.word	0xbff00000
 8009ad0:	08009f98 	.word	0x08009f98
 8009ad4:	08009f78 	.word	0x08009f78

08009ad8 <fabs>:
 8009ad8:	ec51 0b10 	vmov	r0, r1, d0
 8009adc:	ee10 2a10 	vmov	r2, s0
 8009ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	4770      	bx	lr
 8009aea:	0000      	movs	r0, r0
 8009aec:	0000      	movs	r0, r0
	...

08009af0 <nan>:
 8009af0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009af8 <nan+0x8>
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	00000000 	.word	0x00000000
 8009afc:	7ff80000 	.word	0x7ff80000

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
